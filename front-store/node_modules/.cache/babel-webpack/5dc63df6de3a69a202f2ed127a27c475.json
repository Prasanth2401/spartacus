{"ast":null,"code":"import * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Component, ChangeDetectionStrategy, NgModule, Injectable } from '@angular/core';\nimport * as i5 from '@angular/router';\nimport { RouterModule } from '@angular/router';\nimport * as i2$1 from '@spartacus/core';\nimport { GlobalMessageType, UrlModule, I18nModule, provideDefaultConfig, AuthGuard, OAuthFlow, NotAuthGuard, RoutingService, AuthConfigService, GlobalMessageService, HttpErrorModel, AuthService, AuthRedirectService } from '@spartacus/core';\nimport * as i2 from '@spartacus/storefront';\nimport { ICON_TYPE, IconModule, SpinnerModule, CustomFormValidators, FormErrorsModule, sortTitles } from '@spartacus/storefront';\nimport { BehaviorSubject, Subscription, combineLatest } from 'rxjs';\nimport { first, tap, map, filter, switchMap } from 'rxjs/operators';\nimport * as i1 from '@spartacus/user/profile/root';\nimport { UserPasswordFacade, UserEmailFacade, UserProfileFacade } from '@spartacus/user/profile/root';\nimport * as i4 from '@angular/forms';\nimport { FormGroup, FormControl, Validators, ReactiveFormsModule, FormsModule } from '@angular/forms';\n\nfunction CloseAccountModalComponent_ng_container_0_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"div\", 8);\n    i0.ɵɵelement(2, \"cx-spinner\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction CloseAccountModalComponent_ng_container_0_ng_template_11_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 9);\n    i0.ɵɵelementStart(1, \"div\", 10);\n    i0.ɵɵelementStart(2, \"p\", 11);\n    i0.ɵɵtext(3);\n    i0.ɵɵpipe(4, \"cxTranslate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 10);\n    i0.ɵɵelementStart(6, \"div\", 12);\n    i0.ɵɵelementStart(7, \"button\", 13);\n    i0.ɵɵlistener(\"click\", function CloseAccountModalComponent_ng_container_0_ng_template_11_Template_button_click_7_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext(2);\n      return ctx_r4.closeAccount();\n    });\n    i0.ɵɵtext(8);\n    i0.ɵɵpipe(9, \"cxTranslate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"button\", 14);\n    i0.ɵɵlistener(\"click\", function CloseAccountModalComponent_ng_container_0_ng_template_11_Template_button_click_10_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r6 = i0.ɵɵnextContext(2);\n      return ctx_r6.dismissModal();\n    });\n    i0.ɵɵtext(11);\n    i0.ɵɵpipe(12, \"cxTranslate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(4, 3, \"closeAccount.confirmAccountClosureMessage\"), \" \");\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(9, 5, \"closeAccount.closeMyAccount\"), \" \");\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(12, 7, \"common.cancel\"), \" \");\n  }\n}\n\nfunction CloseAccountModalComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 1);\n    i0.ɵɵelementStart(2, \"h3\", 2);\n    i0.ɵɵtext(3);\n    i0.ɵɵpipe(4, \"cxTranslate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"button\", 3);\n    i0.ɵɵlistener(\"click\", function CloseAccountModalComponent_ng_container_0_Template_button_click_5_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.dismissModal();\n    });\n    i0.ɵɵpipe(6, \"cxTranslate\");\n    i0.ɵɵelementStart(7, \"span\", 4);\n    i0.ɵɵelement(8, \"cx-icon\", 5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(9, CloseAccountModalComponent_ng_container_0_div_9_Template, 3, 0, \"div\", 6);\n    i0.ɵɵpipe(10, \"async\");\n    i0.ɵɵtemplate(11, CloseAccountModalComponent_ng_container_0_ng_template_11_Template, 13, 9, \"ng-template\", null, 7, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const _r2 = i0.ɵɵreference(12);\n\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(4, 5, \"closeAccount.confirmAccountClosure\"), \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵattribute(\"aria-label\", i0.ɵɵpipeBind1(6, 7, \"common.close\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"type\", ctx_r0.iconTypes.CLOSE);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(10, 9, ctx_r0.isLoading$))(\"ngIfElse\", _r2);\n  }\n}\n\nconst _c0 = function () {\n  return {\n    cxRoute: \"home\"\n  };\n};\n\nfunction ForgotPasswordComponent_cx_spinner_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"cx-spinner\", 7);\n  }\n}\n\nconst _c1 = function () {\n  return {\n    cxRoute: \"login\"\n  };\n};\n\nfunction RegisterComponent_section_0_option_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 25);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const title_r5 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", title_r5.code);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", title_r5.name, \" \");\n  }\n}\n\nfunction RegisterComponent_section_0_label_58_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\");\n    i0.ɵɵelement(1, \"input\", 26);\n    i0.ɵɵelementStart(2, \"span\", 21);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const anonymousConsent_r6 = ctx.ngIf;\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"checked\", ctx_r4.isConsentGiven(anonymousConsent_r6.consent));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", anonymousConsent_r6.template, \" \");\n  }\n}\n\nconst _c2 = function () {\n  return {\n    cxRoute: \"termsAndConditions\"\n  };\n};\n\nfunction RegisterComponent_section_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"section\", 2);\n    i0.ɵɵelementStart(1, \"div\", 3);\n    i0.ɵɵelementStart(2, \"div\", 4);\n    i0.ɵɵelementStart(3, \"div\", 5);\n    i0.ɵɵelementStart(4, \"form\", 6);\n    i0.ɵɵlistener(\"ngSubmit\", function RegisterComponent_section_0_Template_form_ngSubmit_4_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.submitForm();\n    });\n    i0.ɵɵelementStart(5, \"div\", 7);\n    i0.ɵɵelementStart(6, \"label\");\n    i0.ɵɵelementStart(7, \"span\", 8);\n    i0.ɵɵtext(8);\n    i0.ɵɵpipe(9, \"cxTranslate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"select\", 9);\n    i0.ɵɵelementStart(11, \"option\", 10);\n    i0.ɵɵtext(12);\n    i0.ɵɵpipe(13, \"cxTranslate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(14, RegisterComponent_section_0_option_14_Template, 2, 2, \"option\", 11);\n    i0.ɵɵpipe(15, \"async\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(16, \"div\", 7);\n    i0.ɵɵelementStart(17, \"label\");\n    i0.ɵɵelementStart(18, \"span\", 8);\n    i0.ɵɵtext(19);\n    i0.ɵɵpipe(20, \"cxTranslate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(21, \"input\", 12);\n    i0.ɵɵpipe(22, \"cxTranslate\");\n    i0.ɵɵelement(23, \"cx-form-errors\", 13);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(24, \"div\", 7);\n    i0.ɵɵelementStart(25, \"label\");\n    i0.ɵɵelementStart(26, \"span\", 8);\n    i0.ɵɵtext(27);\n    i0.ɵɵpipe(28, \"cxTranslate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(29, \"input\", 14);\n    i0.ɵɵpipe(30, \"cxTranslate\");\n    i0.ɵɵelement(31, \"cx-form-errors\", 13);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(32, \"div\", 7);\n    i0.ɵɵelementStart(33, \"label\");\n    i0.ɵɵelementStart(34, \"span\", 8);\n    i0.ɵɵtext(35);\n    i0.ɵɵpipe(36, \"cxTranslate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(37, \"input\", 15);\n    i0.ɵɵpipe(38, \"cxTranslate\");\n    i0.ɵɵelement(39, \"cx-form-errors\", 13);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(40, \"div\", 7);\n    i0.ɵɵelementStart(41, \"label\");\n    i0.ɵɵelementStart(42, \"span\", 8);\n    i0.ɵɵtext(43);\n    i0.ɵɵpipe(44, \"cxTranslate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(45, \"input\", 16);\n    i0.ɵɵpipe(46, \"cxTranslate\");\n    i0.ɵɵelement(47, \"cx-form-errors\", 13);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(48, \"div\", 7);\n    i0.ɵɵelementStart(49, \"label\");\n    i0.ɵɵelementStart(50, \"span\", 8);\n    i0.ɵɵtext(51);\n    i0.ɵɵpipe(52, \"cxTranslate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(53, \"input\", 17);\n    i0.ɵɵpipe(54, \"cxTranslate\");\n    i0.ɵɵelement(55, \"cx-form-errors\", 13);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(56, \"div\", 7);\n    i0.ɵɵelementStart(57, \"div\", 18);\n    i0.ɵɵtemplate(58, RegisterComponent_section_0_label_58_Template, 4, 2, \"label\", 19);\n    i0.ɵɵpipe(59, \"async\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(60, \"div\", 7);\n    i0.ɵɵelementStart(61, \"div\", 18);\n    i0.ɵɵelementStart(62, \"label\");\n    i0.ɵɵelement(63, \"input\", 20);\n    i0.ɵɵelementStart(64, \"span\", 21);\n    i0.ɵɵtext(65);\n    i0.ɵɵpipe(66, \"cxTranslate\");\n    i0.ɵɵelementStart(67, \"a\", 22);\n    i0.ɵɵpipe(68, \"cxUrl\");\n    i0.ɵɵtext(69);\n    i0.ɵɵpipe(70, \"cxTranslate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(71, \"cx-form-errors\", 13);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(72, \"button\", 23);\n    i0.ɵɵtext(73);\n    i0.ɵɵpipe(74, \"cxTranslate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(75, \"a\", 24);\n    i0.ɵɵpipe(76, \"cxUrl\");\n    i0.ɵɵtext(77);\n    i0.ɵɵpipe(78, \"cxTranslate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"formGroup\", ctx_r0.registerForm);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(9, 27, \"register.title\"));\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(13, 29, \"register.selectTitle\"), \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(15, 31, ctx_r0.titles$));\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(20, 33, \"register.firstName.label\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(22, 35, \"register.firstName.placeholder\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"control\", ctx_r0.registerForm.get(\"firstName\"));\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(28, 37, \"register.lastName.label\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(30, 39, \"register.lastName.placeholder\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"control\", ctx_r0.registerForm.get(\"lastName\"));\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(36, 41, \"register.emailAddress.label\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(38, 43, \"register.emailAddress.placeholder\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"control\", ctx_r0.registerForm.get(\"email\"));\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(44, 45, \"register.password.label\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(46, 47, \"register.password.placeholder\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"control\", ctx_r0.registerForm.get(\"password\"));\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(52, 49, \"register.confirmPassword.label\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(54, 51, \"register.confirmPassword.placeholder\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"control\", ctx_r0.registerForm.get(\"passwordconf\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(59, 53, ctx_r0.anonymousConsent$));\n    i0.ɵɵadvance(7);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(66, 55, \"register.confirmThatRead\"), \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"routerLink\", i0.ɵɵpipeBind1(68, 57, i0.ɵɵpureFunction0(67, _c2)));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(70, 59, \"register.termsAndConditions\"), \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"control\", ctx_r0.registerForm.get(\"termsandconditions\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(74, 61, \"register.register\"), \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"routerLink\", i0.ɵɵpipeBind1(76, 63, i0.ɵɵpureFunction0(68, _c1)));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(78, 65, \"register.signIn\"));\n  }\n}\n\nfunction RegisterComponent_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 27);\n    i0.ɵɵelement(1, \"cx-spinner\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction ResetPasswordComponent_cx_spinner_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"cx-spinner\", 2);\n  }\n}\n\nfunction ResetPasswordComponent_form_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"form\", 3);\n    i0.ɵɵlistener(\"ngSubmit\", function ResetPasswordComponent_form_2_Template_form_ngSubmit_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const token_r2 = restoredCtx.ngIf;\n      const ctx_r3 = i0.ɵɵnextContext();\n      return ctx_r3.onSubmit(token_r2);\n    });\n    i0.ɵɵelementStart(1, \"label\");\n    i0.ɵɵelementStart(2, \"span\", 4);\n    i0.ɵɵtext(3);\n    i0.ɵɵpipe(4, \"cxTranslate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(5, \"input\", 5);\n    i0.ɵɵpipe(6, \"cxTranslate\");\n    i0.ɵɵelement(7, \"cx-form-errors\", 6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"label\");\n    i0.ɵɵelementStart(9, \"span\", 4);\n    i0.ɵɵtext(10);\n    i0.ɵɵpipe(11, \"cxTranslate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(12, \"input\", 7);\n    i0.ɵɵpipe(13, \"cxTranslate\");\n    i0.ɵɵelement(14, \"cx-form-errors\", 6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"button\", 8);\n    i0.ɵɵtext(16);\n    i0.ɵɵpipe(17, \"cxTranslate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"formGroup\", ctx_r1.form);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(4, 9, \"register.newPassword\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(6, 11, \"register.password.placeholder\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"control\", ctx_r1.form.get(\"password\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(11, 13, \"register.passwordMinRequirements\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(13, 15, \"register.confirmPassword.placeholder\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"control\", ctx_r1.form.get(\"passwordConfirm\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"disabled\", ctx_r1.form.disabled);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(17, 17, \"register.resetPassword\"), \" \");\n  }\n}\n\nfunction UpdateEmailComponent_cx_spinner_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"cx-spinner\", 9);\n  }\n}\n\nfunction UpdatePasswordComponent_cx_spinner_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"cx-spinner\", 9);\n  }\n}\n\nfunction UpdateProfileComponent_cx_spinner_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"cx-spinner\", 12);\n  }\n}\n\nfunction UpdateProfileComponent_option_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 13);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const title_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", title_r2.code);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", title_r2.name, \" \");\n  }\n}\n\nclass CloseAccountModalComponent {\n  constructor(modalService, authService, globalMessageService, routingService, translationService, userProfile) {\n    this.modalService = modalService;\n    this.authService = authService;\n    this.globalMessageService = globalMessageService;\n    this.routingService = routingService;\n    this.translationService = translationService;\n    this.userProfile = userProfile;\n    this.iconTypes = ICON_TYPE;\n    this.isLoading$ = new BehaviorSubject(false);\n  }\n\n  ngOnInit() {\n    this.isLoggedIn$ = this.authService.isUserLoggedIn();\n  }\n\n  onSuccess() {\n    this.dismissModal();\n    this.translationService.translate('closeAccount.accountClosedSuccessfully').pipe(first()).subscribe(text => {\n      this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_CONFIRMATION);\n    });\n    this.routingService.go({\n      cxRoute: 'home'\n    });\n  }\n\n  onError() {\n    this.dismissModal();\n    this.translationService.translate('closeAccount.accountClosedFailure').pipe(first()).subscribe(text => {\n      this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_ERROR);\n    });\n  }\n\n  dismissModal(reason) {\n    this.modalService.dismissActiveModal(reason);\n  }\n\n  closeAccount() {\n    this.isLoading$.next(true);\n    this.userProfile.close().subscribe({\n      next: () => {\n        this.onSuccess();\n        this.isLoading$.next(false);\n      },\n      error: () => {\n        this.onError();\n        this.isLoading$.next(false);\n      }\n    });\n  }\n\n}\n\nCloseAccountModalComponent.ɵfac = function CloseAccountModalComponent_Factory(t) {\n  return new (t || CloseAccountModalComponent)(i0.ɵɵdirectiveInject(i2.ModalService), i0.ɵɵdirectiveInject(i2$1.AuthService), i0.ɵɵdirectiveInject(i2$1.GlobalMessageService), i0.ɵɵdirectiveInject(i2$1.RoutingService), i0.ɵɵdirectiveInject(i2$1.TranslationService), i0.ɵɵdirectiveInject(i1.UserProfileFacade));\n};\n\nCloseAccountModalComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: CloseAccountModalComponent,\n  selectors: [[\"cx-close-account-modal\"]],\n  decls: 2,\n  vars: 3,\n  consts: [[4, \"ngIf\"], [1, \"modal-header\", \"cx-dialog-header\"], [1, \"modal-title\"], [\"type\", \"button\", 1, \"close\", 3, \"click\"], [\"aria-hidden\", \"true\"], [3, \"type\"], [4, \"ngIf\", \"ngIfElse\"], [\"loaded\", \"\"], [1, \"cx-spinner\"], [1, \"modal-body\"], [1, \"cx-row\"], [1, \"cx-confirmation\"], [1, \"cx-btn-group\"], [1, \"btn\", \"btn-primary\", 3, \"click\"], [1, \"btn\", \"btn-block\", \"btn-secondary\", 3, \"click\"]],\n  template: function CloseAccountModalComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, CloseAccountModalComponent_ng_container_0_Template, 13, 11, \"ng-container\", 0);\n      i0.ɵɵpipe(1, \"async\");\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(1, 1, ctx.isLoggedIn$));\n    }\n  },\n  directives: [i3.NgIf, i2.IconComponent, i2.SpinnerComponent],\n  pipes: [i3.AsyncPipe, i2$1.TranslatePipe],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CloseAccountModalComponent, [{\n    type: Component,\n    args: [{\n      selector: 'cx-close-account-modal',\n      templateUrl: './close-account-modal.component.html',\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: i2.ModalService\n    }, {\n      type: i2$1.AuthService\n    }, {\n      type: i2$1.GlobalMessageService\n    }, {\n      type: i2$1.RoutingService\n    }, {\n      type: i2$1.TranslationService\n    }, {\n      type: i1.UserProfileFacade\n    }];\n  }, null);\n})();\n\nclass CloseAccountComponent {\n  constructor(modalService) {\n    this.modalService = modalService;\n  }\n\n  openModal() {\n    this.modal = this.modalService.open(CloseAccountModalComponent, {\n      centered: true\n    }).componentInstance;\n  }\n\n}\n\nCloseAccountComponent.ɵfac = function CloseAccountComponent_Factory(t) {\n  return new (t || CloseAccountComponent)(i0.ɵɵdirectiveInject(i2.ModalService));\n};\n\nCloseAccountComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: CloseAccountComponent,\n  selectors: [[\"cx-close-account\"]],\n  decls: 11,\n  vars: 10,\n  consts: [[1, \"col-lg-8\", \"col-md-9\"], [1, \"row\", \"cx-btn-group\"], [1, \"col-sm-3\"], [1, \"btn\", \"btn-block\", \"btn-secondary\", 3, \"routerLink\"], [1, \"col-sm-6\"], [1, \"btn\", \"btn-primary\", 3, \"click\"]],\n  template: function CloseAccountComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelementStart(1, \"div\", 1);\n      i0.ɵɵelementStart(2, \"div\", 2);\n      i0.ɵɵelementStart(3, \"a\", 3);\n      i0.ɵɵpipe(4, \"cxUrl\");\n      i0.ɵɵtext(5);\n      i0.ɵɵpipe(6, \"cxTranslate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"div\", 4);\n      i0.ɵɵelementStart(8, \"button\", 5);\n      i0.ɵɵlistener(\"click\", function CloseAccountComponent_Template_button_click_8_listener() {\n        return ctx.openModal();\n      });\n      i0.ɵɵtext(9);\n      i0.ɵɵpipe(10, \"cxTranslate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"routerLink\", i0.ɵɵpipeBind1(4, 3, i0.ɵɵpureFunction0(9, _c0)));\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(6, 5, \"common.cancel\"));\n      i0.ɵɵadvance(4);\n      i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(10, 7, \"closeAccount.closeMyAccount\"), \" \");\n    }\n  },\n  directives: [i5.RouterLinkWithHref],\n  pipes: [i2$1.UrlPipe, i2$1.TranslatePipe],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CloseAccountComponent, [{\n    type: Component,\n    args: [{\n      selector: 'cx-close-account',\n      templateUrl: './close-account.component.html',\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: i2.ModalService\n    }];\n  }, null);\n})();\n\nclass CloseAccountModule {}\n\nCloseAccountModule.ɵfac = function CloseAccountModule_Factory(t) {\n  return new (t || CloseAccountModule)();\n};\n\nCloseAccountModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: CloseAccountModule\n});\nCloseAccountModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [provideDefaultConfig({\n    cmsComponents: {\n      CloseAccountComponent: {\n        component: CloseAccountComponent,\n        guards: [AuthGuard]\n      }\n    }\n  })],\n  imports: [[CommonModule, RouterModule, UrlModule, I18nModule, IconModule, SpinnerModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CloseAccountModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, RouterModule, UrlModule, I18nModule, IconModule, SpinnerModule],\n      providers: [provideDefaultConfig({\n        cmsComponents: {\n          CloseAccountComponent: {\n            component: CloseAccountComponent,\n            guards: [AuthGuard]\n          }\n        }\n      })],\n      declarations: [CloseAccountComponent, CloseAccountModalComponent]\n    }]\n  }], null, null);\n})();\n\nclass ForgotPasswordComponentService {\n  constructor(userPasswordService, routingService, authConfigService, globalMessage) {\n    this.userPasswordService = userPasswordService;\n    this.routingService = routingService;\n    this.authConfigService = authConfigService;\n    this.globalMessage = globalMessage;\n    this.busy$ = new BehaviorSubject(false);\n    this.isUpdating$ = this.busy$.pipe(tap(state => state === true ? this.form.disable() : this.form.enable()));\n    this.form = new FormGroup({\n      userEmail: new FormControl('', [Validators.required, CustomFormValidators.emailValidator])\n    });\n  }\n  /**\n   * Sends an email to the user to reset the password.\n   *\n   * When the `ResourceOwnerPasswordFlow` is used, the user is routed\n   * to the login page.\n   */\n\n\n  requestEmail() {\n    if (!this.form.valid) {\n      this.form.markAllAsTouched();\n      return;\n    }\n\n    this.busy$.next(true);\n    this.userPasswordService.requestForgotPasswordEmail(this.form.value.userEmail).subscribe({\n      next: () => this.onSuccess(),\n      error: error => this.onError(error)\n    });\n  }\n\n  onSuccess() {\n    this.globalMessage.add({\n      key: 'forgottenPassword.passwordResetEmailSent'\n    }, GlobalMessageType.MSG_TYPE_CONFIRMATION);\n    this.busy$.next(false);\n    this.form.reset();\n    this.redirect();\n  }\n\n  onError(_error) {\n    this.busy$.next(false);\n  }\n  /**\n   * Redirects the user back to the login page.\n   *\n   * This only happens in case of the `ResourceOwnerPasswordFlow` OAuth flow.\n   */\n\n\n  redirect() {\n    if (this.authConfigService.getOAuthFlow() === OAuthFlow.ResourceOwnerPasswordFlow) {\n      this.routingService.go({\n        cxRoute: 'login'\n      });\n    }\n  }\n\n}\n\nForgotPasswordComponentService.ɵfac = function ForgotPasswordComponentService_Factory(t) {\n  return new (t || ForgotPasswordComponentService)(i0.ɵɵinject(i1.UserPasswordFacade), i0.ɵɵinject(i2$1.RoutingService), i0.ɵɵinject(i2$1.AuthConfigService), i0.ɵɵinject(i2$1.GlobalMessageService));\n};\n\nForgotPasswordComponentService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ForgotPasswordComponentService,\n  factory: ForgotPasswordComponentService.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ForgotPasswordComponentService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i1.UserPasswordFacade\n    }, {\n      type: i2$1.RoutingService\n    }, {\n      type: i2$1.AuthConfigService\n    }, {\n      type: i2$1.GlobalMessageService\n    }];\n  }, null);\n})();\n\nclass ForgotPasswordComponent {\n  constructor(service) {\n    this.service = service;\n    this.form = this.service.form;\n    this.isUpdating$ = this.service.isUpdating$;\n  }\n\n  onSubmit() {\n    this.service.requestEmail();\n  }\n\n}\n\nForgotPasswordComponent.ɵfac = function ForgotPasswordComponent_Factory(t) {\n  return new (t || ForgotPasswordComponent)(i0.ɵɵdirectiveInject(ForgotPasswordComponentService));\n};\n\nForgotPasswordComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: ForgotPasswordComponent,\n  selectors: [[\"cx-forgot-password\"]],\n  decls: 17,\n  vars: 22,\n  consts: [[\"class\", \"overlay\", 4, \"ngIf\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"label-content\"], [\"aria-required\", \"true\", \"type\", \"email\", \"formControlName\", \"userEmail\", 1, \"form-control\", 3, \"placeholder\"], [\"aria-live\", \"assertive\", \"aria-atomic\", \"true\", 3, \"control\"], [1, \"btn\", \"btn-block\", \"btn-secondary\", 3, \"routerLink\"], [1, \"btn\", \"btn-block\", \"btn-primary\", 3, \"disabled\"], [1, \"overlay\"]],\n  template: function ForgotPasswordComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, ForgotPasswordComponent_cx_spinner_0_Template, 1, 0, \"cx-spinner\", 0);\n      i0.ɵɵpipe(1, \"async\");\n      i0.ɵɵelementStart(2, \"form\", 1);\n      i0.ɵɵlistener(\"ngSubmit\", function ForgotPasswordComponent_Template_form_ngSubmit_2_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(3, \"label\");\n      i0.ɵɵelementStart(4, \"span\", 2);\n      i0.ɵɵtext(5);\n      i0.ɵɵpipe(6, \"cxTranslate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(7, \"input\", 3);\n      i0.ɵɵpipe(8, \"cxTranslate\");\n      i0.ɵɵelement(9, \"cx-form-errors\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"a\", 5);\n      i0.ɵɵpipe(11, \"cxUrl\");\n      i0.ɵɵtext(12);\n      i0.ɵɵpipe(13, \"cxTranslate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(14, \"button\", 6);\n      i0.ɵɵtext(15);\n      i0.ɵɵpipe(16, \"cxTranslate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(1, 9, ctx.isUpdating$));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"formGroup\", ctx.form);\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(6, 11, \"forgottenPassword.emailAddress.label\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(8, 13, \"forgottenPassword.emailAddress.placeholder\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"control\", ctx.form.get(\"userEmail\"));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"routerLink\", i0.ɵɵpipeBind1(11, 15, i0.ɵɵpureFunction0(21, _c1)));\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(13, 17, \"common.cancel\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"disabled\", ctx.form.disabled);\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(16, 19, \"common.submit\"), \" \");\n    }\n  },\n  directives: [i3.NgIf, i4.ɵNgNoValidate, i4.NgControlStatusGroup, i4.FormGroupDirective, i4.DefaultValueAccessor, i4.NgControlStatus, i4.FormControlName, i2.FormErrorsComponent, i5.RouterLinkWithHref, i2.SpinnerComponent],\n  pipes: [i3.AsyncPipe, i2$1.TranslatePipe, i2$1.UrlPipe],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ForgotPasswordComponent, [{\n    type: Component,\n    args: [{\n      selector: 'cx-forgot-password',\n      templateUrl: './forgot-password.component.html',\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: ForgotPasswordComponentService\n    }];\n  }, null);\n})();\n\nclass ForgotPasswordModule {}\n\nForgotPasswordModule.ɵfac = function ForgotPasswordModule_Factory(t) {\n  return new (t || ForgotPasswordModule)();\n};\n\nForgotPasswordModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: ForgotPasswordModule\n});\nForgotPasswordModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [provideDefaultConfig({\n    cmsComponents: {\n      ForgotPasswordComponent: {\n        component: ForgotPasswordComponent,\n        guards: [NotAuthGuard],\n        providers: [{\n          provide: ForgotPasswordComponentService,\n          useClass: ForgotPasswordComponentService,\n          deps: [UserPasswordFacade, RoutingService, AuthConfigService, GlobalMessageService]\n        }]\n      }\n    }\n  })],\n  imports: [[CommonModule, ReactiveFormsModule, RouterModule, UrlModule, I18nModule, FormErrorsModule, SpinnerModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ForgotPasswordModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, ReactiveFormsModule, RouterModule, UrlModule, I18nModule, FormErrorsModule, SpinnerModule],\n      providers: [provideDefaultConfig({\n        cmsComponents: {\n          ForgotPasswordComponent: {\n            component: ForgotPasswordComponent,\n            guards: [NotAuthGuard],\n            providers: [{\n              provide: ForgotPasswordComponentService,\n              useClass: ForgotPasswordComponentService,\n              deps: [UserPasswordFacade, RoutingService, AuthConfigService, GlobalMessageService]\n            }]\n          }\n        }\n      })],\n      declarations: [ForgotPasswordComponent]\n    }]\n  }], null, null);\n})();\n\nclass RegisterComponent {\n  constructor(userRegister, globalMessageService, fb, router, anonymousConsentsService, anonymousConsentsConfig, authConfigService) {\n    this.userRegister = userRegister;\n    this.globalMessageService = globalMessageService;\n    this.fb = fb;\n    this.router = router;\n    this.anonymousConsentsService = anonymousConsentsService;\n    this.anonymousConsentsConfig = anonymousConsentsConfig;\n    this.authConfigService = authConfigService;\n    this.isLoading$ = new BehaviorSubject(false);\n    this.subscription = new Subscription();\n    this.registerForm = this.fb.group({\n      titleCode: [''],\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: ['', [Validators.required, CustomFormValidators.passwordValidator]],\n      passwordconf: ['', Validators.required],\n      newsletter: new FormControl({\n        value: false,\n        disabled: this.isConsentRequired()\n      }),\n      termsandconditions: [false, Validators.requiredTrue]\n    }, {\n      validators: CustomFormValidators.passwordsMustMatch('password', 'passwordconf')\n    });\n  }\n\n  ngOnInit() {\n    var _a, _b, _c;\n\n    this.titles$ = this.userRegister.getTitles().pipe(map(titles => {\n      return titles.sort(sortTitles);\n    })); // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n\n    this.subscription.add(this.globalMessageService.get().pipe(filter(messages => !!Object.keys(messages).length)).subscribe(globalMessageEntities => {\n      const messages = globalMessageEntities && globalMessageEntities[GlobalMessageType.MSG_TYPE_ERROR];\n\n      if (messages && messages.some(message => message === 'This field is required.')) {\n        this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n        this.globalMessageService.add({\n          key: 'register.titleRequired'\n        }, GlobalMessageType.MSG_TYPE_ERROR);\n      }\n    }));\n    const registerConsent = (_c = (_b = (_a = this.anonymousConsentsConfig) === null || _a === void 0 ? void 0 : _a.anonymousConsents) === null || _b === void 0 ? void 0 : _b.registerConsent) !== null && _c !== void 0 ? _c : '';\n    this.anonymousConsent$ = combineLatest([this.anonymousConsentsService.getConsent(registerConsent), this.anonymousConsentsService.getTemplate(registerConsent)]).pipe(map(([consent, template]) => {\n      return {\n        consent,\n        template: (template === null || template === void 0 ? void 0 : template.description) ? template.description : ''\n      };\n    }));\n    this.subscription.add( // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    this.registerForm.get('newsletter').valueChanges.subscribe(() => {\n      this.toggleAnonymousConsent();\n    }));\n  }\n\n  submitForm() {\n    if (this.registerForm.valid) {\n      this.registerUser();\n    } else {\n      this.registerForm.markAllAsTouched();\n    }\n  }\n\n  registerUser() {\n    this.isLoading$.next(true);\n    this.userRegister.register(this.collectDataFromRegisterForm(this.registerForm.value)).subscribe({\n      next: () => this.onRegisterUserSuccess(),\n      complete: () => this.isLoading$.next(false)\n    });\n  }\n\n  titleSelected(title) {\n    this.registerForm['controls'].titleCode.setValue(title.code);\n  }\n\n  collectDataFromRegisterForm(formData) {\n    const {\n      firstName,\n      lastName,\n      email,\n      password,\n      titleCode\n    } = formData;\n    return {\n      firstName,\n      lastName,\n      uid: email.toLowerCase(),\n      password,\n      titleCode\n    };\n  }\n\n  isConsentGiven(consent) {\n    return this.anonymousConsentsService.isConsentGiven(consent);\n  }\n\n  isConsentRequired() {\n    var _a, _b, _c, _d;\n\n    const requiredConsents = (_b = (_a = this.anonymousConsentsConfig) === null || _a === void 0 ? void 0 : _a.anonymousConsents) === null || _b === void 0 ? void 0 : _b.requiredConsents;\n    const registerConsent = (_d = (_c = this.anonymousConsentsConfig) === null || _c === void 0 ? void 0 : _c.anonymousConsents) === null || _d === void 0 ? void 0 : _d.registerConsent;\n\n    if (requiredConsents && registerConsent) {\n      return requiredConsents.includes(registerConsent);\n    }\n\n    return false;\n  }\n\n  onRegisterUserSuccess() {\n    if (this.authConfigService.getOAuthFlow() === OAuthFlow.ResourceOwnerPasswordFlow) {\n      this.router.go('login');\n    }\n\n    this.globalMessageService.add({\n      key: 'register.postRegisterMessage'\n    }, GlobalMessageType.MSG_TYPE_CONFIRMATION);\n  }\n\n  toggleAnonymousConsent() {\n    var _a, _b;\n\n    const registerConsent = (_b = (_a = this.anonymousConsentsConfig) === null || _a === void 0 ? void 0 : _a.anonymousConsents) === null || _b === void 0 ? void 0 : _b.registerConsent;\n\n    if (registerConsent) {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      if (Boolean(this.registerForm.get('newsletter').value)) {\n        this.anonymousConsentsService.giveConsent(registerConsent);\n      } else {\n        this.anonymousConsentsService.withdrawConsent(registerConsent);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n\n}\n\nRegisterComponent.ɵfac = function RegisterComponent_Factory(t) {\n  return new (t || RegisterComponent)(i0.ɵɵdirectiveInject(i1.UserRegisterFacade), i0.ɵɵdirectiveInject(i2$1.GlobalMessageService), i0.ɵɵdirectiveInject(i4.FormBuilder), i0.ɵɵdirectiveInject(i2$1.RoutingService), i0.ɵɵdirectiveInject(i2$1.AnonymousConsentsService), i0.ɵɵdirectiveInject(i2$1.AnonymousConsentsConfig), i0.ɵɵdirectiveInject(i2$1.AuthConfigService));\n};\n\nRegisterComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: RegisterComponent,\n  selectors: [[\"cx-register\"]],\n  decls: 4,\n  vars: 4,\n  consts: [[\"class\", \"cx-page-section container\", 4, \"ngIf\", \"ngIfElse\"], [\"loading\", \"\"], [1, \"cx-page-section\", \"container\"], [1, \"row\", \"justify-content-center\"], [1, \"col-md-6\"], [1, \"cx-section\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [1, \"label-content\"], [\"formControlName\", \"titleCode\", 1, \"form-control\"], [\"selected\", \"\", \"value\", \"\", \"disabled\", \"\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"aria-required\", \"true\", \"type\", \"text\", \"name\", \"firstname\", \"formControlName\", \"firstName\", 1, \"form-control\", 3, \"placeholder\"], [\"aria-live\", \"assertive\", \"aria-atomic\", \"true\", 3, \"control\"], [\"aria-required\", \"true\", \"type\", \"text\", \"name\", \"lastname\", \"formControlName\", \"lastName\", 1, \"form-control\", 3, \"placeholder\"], [\"aria-required\", \"true\", \"type\", \"email\", \"name\", \"email\", \"formControlName\", \"email\", 1, \"form-control\", 3, \"placeholder\"], [\"aria-required\", \"true\", \"type\", \"password\", \"name\", \"password\", \"formControlName\", \"password\", 1, \"form-control\", 3, \"placeholder\"], [\"aria-required\", \"true\", \"type\", \"password\", \"name\", \"confirmpassword\", \"formControlName\", \"passwordconf\", 1, \"form-control\", 3, \"placeholder\"], [1, \"form-check\"], [4, \"ngIf\"], [\"aria-required\", \"true\", \"type\", \"checkbox\", \"name\", \"termsandconditions\", \"formControlName\", \"termsandconditions\"], [1, \"form-check-label\"], [\"target\", \"_blank\", 3, \"routerLink\"], [\"type\", \"submit\", 1, \"btn\", \"btn-block\", \"btn-primary\"], [1, \"cx-login-link\", \"btn-link\", 3, \"routerLink\"], [3, \"value\"], [\"type\", \"checkbox\", \"name\", \"newsletter\", \"formControlName\", \"newsletter\", 1, \"form-check-input\", 3, \"checked\"], [1, \"cx-spinner\"]],\n  template: function RegisterComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, RegisterComponent_section_0_Template, 79, 69, \"section\", 0);\n      i0.ɵɵpipe(1, \"async\");\n      i0.ɵɵtemplate(2, RegisterComponent_ng_template_2_Template, 2, 0, \"ng-template\", null, 1, i0.ɵɵtemplateRefExtractor);\n    }\n\n    if (rf & 2) {\n      const _r1 = i0.ɵɵreference(3);\n\n      i0.ɵɵproperty(\"ngIf\", !i0.ɵɵpipeBind1(1, 2, ctx.isLoading$))(\"ngIfElse\", _r1);\n    }\n  },\n  directives: [i3.NgIf, i4.ɵNgNoValidate, i4.NgControlStatusGroup, i4.FormGroupDirective, i4.SelectControlValueAccessor, i4.NgControlStatus, i4.FormControlName, i4.NgSelectOption, i4.ɵNgSelectMultipleOption, i3.NgForOf, i4.DefaultValueAccessor, i2.FormErrorsComponent, i4.CheckboxControlValueAccessor, i5.RouterLinkWithHref, i2.SpinnerComponent],\n  pipes: [i3.AsyncPipe, i2$1.TranslatePipe, i2$1.UrlPipe],\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RegisterComponent, [{\n    type: Component,\n    args: [{\n      selector: 'cx-register',\n      templateUrl: './register.component.html'\n    }]\n  }], function () {\n    return [{\n      type: i1.UserRegisterFacade\n    }, {\n      type: i2$1.GlobalMessageService\n    }, {\n      type: i4.FormBuilder\n    }, {\n      type: i2$1.RoutingService\n    }, {\n      type: i2$1.AnonymousConsentsService\n    }, {\n      type: i2$1.AnonymousConsentsConfig\n    }, {\n      type: i2$1.AuthConfigService\n    }];\n  }, null);\n})();\n\nclass RegisterComponentModule {}\n\nRegisterComponentModule.ɵfac = function RegisterComponentModule_Factory(t) {\n  return new (t || RegisterComponentModule)();\n};\n\nRegisterComponentModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: RegisterComponentModule\n});\nRegisterComponentModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [provideDefaultConfig({\n    cmsComponents: {\n      RegisterCustomerComponent: {\n        component: RegisterComponent,\n        guards: [NotAuthGuard]\n      }\n    }\n  })],\n  imports: [[CommonModule, ReactiveFormsModule, RouterModule, UrlModule, I18nModule, SpinnerModule, FormErrorsModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RegisterComponentModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, ReactiveFormsModule, RouterModule, UrlModule, I18nModule, SpinnerModule, FormErrorsModule],\n      providers: [provideDefaultConfig({\n        cmsComponents: {\n          RegisterCustomerComponent: {\n            component: RegisterComponent,\n            guards: [NotAuthGuard]\n          }\n        }\n      })],\n      declarations: [RegisterComponent]\n    }]\n  }], null, null);\n})();\n\nclass ResetPasswordComponentService {\n  constructor(userPasswordService, routingService, globalMessage) {\n    this.userPasswordService = userPasswordService;\n    this.routingService = routingService;\n    this.globalMessage = globalMessage;\n    this.busy$ = new BehaviorSubject(false);\n    this.isUpdating$ = this.busy$.pipe(tap(state => state === true ? this.form.disable() : this.form.enable()));\n    this.resetToken$ = this.routingService.getRouterState().pipe(map(routerState => routerState.state.queryParams['token']));\n    this.form = new FormGroup({\n      password: new FormControl('', [Validators.required, CustomFormValidators.passwordValidator]),\n      passwordConfirm: new FormControl('', Validators.required)\n    }, {\n      validators: CustomFormValidators.passwordsMustMatch('password', 'passwordConfirm')\n    });\n  }\n  /**\n   * Resets the password by the given token.\n   *\n   * The token has been provided during the request password flow.\n   * The token is not validated on the client.\n   */\n\n\n  resetPassword(token) {\n    if (!this.form.valid) {\n      this.form.markAllAsTouched();\n      return;\n    }\n\n    this.busy$.next(true);\n    const password = this.form.get('password').value;\n    this.userPasswordService.reset(token, password).subscribe({\n      next: () => this.onSuccess(),\n      error: error => this.onError(error)\n    });\n  }\n\n  onSuccess() {\n    this.globalMessage.add({\n      key: 'forgottenPassword.passwordResetSuccess'\n    }, GlobalMessageType.MSG_TYPE_CONFIRMATION);\n    this.busy$.next(false);\n    this.form.reset();\n    this.redirect();\n  }\n\n  onError(error) {\n    var _a;\n\n    this.busy$.next(false);\n\n    if (error instanceof HttpErrorModel) {\n      ((_a = error.details) !== null && _a !== void 0 ? _a : []).forEach(err => {\n        if (err.message) {\n          this.globalMessage.add({\n            raw: err.message\n          }, GlobalMessageType.MSG_TYPE_ERROR);\n        }\n      });\n    }\n  }\n  /**\n   * Redirects the user to the login page.\n   */\n\n\n  redirect() {\n    this.routingService.go({\n      cxRoute: 'login'\n    });\n  }\n\n}\n\nResetPasswordComponentService.ɵfac = function ResetPasswordComponentService_Factory(t) {\n  return new (t || ResetPasswordComponentService)(i0.ɵɵinject(i1.UserPasswordFacade), i0.ɵɵinject(i2$1.RoutingService), i0.ɵɵinject(i2$1.GlobalMessageService));\n};\n\nResetPasswordComponentService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ResetPasswordComponentService,\n  factory: ResetPasswordComponentService.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ResetPasswordComponentService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i1.UserPasswordFacade\n    }, {\n      type: i2$1.RoutingService\n    }, {\n      type: i2$1.GlobalMessageService\n    }];\n  }, null);\n})();\n\nclass ResetPasswordComponent {\n  constructor(service) {\n    this.service = service;\n    this.form = this.service.form;\n    this.isUpdating$ = this.service.isUpdating$;\n    this.token$ = this.service.resetToken$;\n  }\n\n  onSubmit(token) {\n    this.service.resetPassword(token);\n  }\n\n}\n\nResetPasswordComponent.ɵfac = function ResetPasswordComponent_Factory(t) {\n  return new (t || ResetPasswordComponent)(i0.ɵɵdirectiveInject(ResetPasswordComponentService));\n};\n\nResetPasswordComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: ResetPasswordComponent,\n  selectors: [[\"cx-reset-password\"]],\n  hostAttrs: [1, \"user-form\"],\n  decls: 4,\n  vars: 6,\n  consts: [[\"class\", \"overlay\", 4, \"ngIf\"], [3, \"formGroup\", \"ngSubmit\", 4, \"ngIf\"], [1, \"overlay\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"label-content\"], [\"aria-required\", \"true\", \"type\", \"password\", \"formControlName\", \"password\", 1, \"form-control\", 3, \"placeholder\"], [\"aria-live\", \"assertive\", \"aria-atomic\", \"true\", 3, \"control\"], [\"aria-required\", \"true\", \"type\", \"password\", \"formControlName\", \"passwordConfirm\", 1, \"form-control\", 3, \"placeholder\"], [1, \"btn\", \"btn-block\", \"btn-primary\", 3, \"disabled\"]],\n  template: function ResetPasswordComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, ResetPasswordComponent_cx_spinner_0_Template, 1, 0, \"cx-spinner\", 0);\n      i0.ɵɵpipe(1, \"async\");\n      i0.ɵɵtemplate(2, ResetPasswordComponent_form_2_Template, 18, 19, \"form\", 1);\n      i0.ɵɵpipe(3, \"async\");\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(1, 2, ctx.isUpdating$));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(3, 4, ctx.token$));\n    }\n  },\n  directives: [i3.NgIf, i2.SpinnerComponent, i4.ɵNgNoValidate, i4.NgControlStatusGroup, i4.FormGroupDirective, i4.DefaultValueAccessor, i4.NgControlStatus, i4.FormControlName, i2.FormErrorsComponent],\n  pipes: [i3.AsyncPipe, i2$1.TranslatePipe],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ResetPasswordComponent, [{\n    type: Component,\n    args: [{\n      selector: 'cx-reset-password',\n      templateUrl: './reset-password.component.html',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        class: 'user-form'\n      }\n    }]\n  }], function () {\n    return [{\n      type: ResetPasswordComponentService\n    }];\n  }, null);\n})();\n\nclass ResetPasswordModule {}\n\nResetPasswordModule.ɵfac = function ResetPasswordModule_Factory(t) {\n  return new (t || ResetPasswordModule)();\n};\n\nResetPasswordModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: ResetPasswordModule\n});\nResetPasswordModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [provideDefaultConfig({\n    cmsComponents: {\n      ResetPasswordComponent: {\n        component: ResetPasswordComponent,\n        guards: [NotAuthGuard],\n        providers: [{\n          provide: ResetPasswordComponentService,\n          useClass: ResetPasswordComponentService,\n          deps: [UserPasswordFacade, RoutingService, GlobalMessageService]\n        }]\n      }\n    }\n  })],\n  imports: [[CommonModule, FormsModule, ReactiveFormsModule, RouterModule, I18nModule, FormErrorsModule, SpinnerModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ResetPasswordModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, FormsModule, ReactiveFormsModule, RouterModule, I18nModule, FormErrorsModule, SpinnerModule],\n      providers: [provideDefaultConfig({\n        cmsComponents: {\n          ResetPasswordComponent: {\n            component: ResetPasswordComponent,\n            guards: [NotAuthGuard],\n            providers: [{\n              provide: ResetPasswordComponentService,\n              useClass: ResetPasswordComponentService,\n              deps: [UserPasswordFacade, RoutingService, GlobalMessageService]\n            }]\n          }\n        }\n      })],\n      declarations: [ResetPasswordComponent]\n    }]\n  }], null, null);\n})();\n\nclass UpdateEmailComponentService {\n  constructor(userEmail, routingService, globalMessageService, authService, authRedirectService) {\n    this.userEmail = userEmail;\n    this.routingService = routingService;\n    this.globalMessageService = globalMessageService;\n    this.authService = authService;\n    this.authRedirectService = authRedirectService;\n    this.busy$ = new BehaviorSubject(false);\n    this.isUpdating$ = this.busy$.pipe(tap(state => state === true ? this.form.disable() : this.form.enable()));\n    this.form = new FormGroup({\n      email: new FormControl('', [Validators.required, CustomFormValidators.emailValidator]),\n      confirmEmail: new FormControl('', [Validators.required]),\n      password: new FormControl('', [Validators.required])\n    }, {\n      validators: CustomFormValidators.emailsMustMatch('email', 'confirmEmail')\n    });\n  }\n\n  save() {\n    var _a, _b;\n\n    if (!this.form.valid) {\n      this.form.markAllAsTouched();\n      return;\n    }\n\n    this.busy$.next(true);\n    const newEmail = (_a = this.form.get('confirmEmail')) === null || _a === void 0 ? void 0 : _a.value;\n    const password = (_b = this.form.get('password')) === null || _b === void 0 ? void 0 : _b.value;\n    this.userEmail.update(password, newEmail).subscribe({\n      next: () => this.onSuccess(newEmail),\n      error: error => this.onError(error)\n    });\n  }\n  /**\n   * Handles successful updating of the user email.\n   */\n\n\n  onSuccess(newUid) {\n    this.globalMessageService.add({\n      key: 'updateEmailForm.emailUpdateSuccess',\n      params: {\n        newUid\n      }\n    }, GlobalMessageType.MSG_TYPE_CONFIRMATION);\n    this.busy$.next(false);\n    this.form.reset(); // sets the redirect url after login\n\n    this.authRedirectService.setRedirectUrl(this.routingService.getUrl({\n      cxRoute: 'home'\n    })); // TODO(#9638): Use logout route when it will support passing redirect url\n\n    this.authService.coreLogout().then(() => {\n      this.routingService.go({\n        cxRoute: 'login'\n      }, {\n        state: {\n          newUid\n        }\n      });\n    });\n  }\n\n  onError(_error) {\n    this.busy$.next(false);\n  }\n\n}\n\nUpdateEmailComponentService.ɵfac = function UpdateEmailComponentService_Factory(t) {\n  return new (t || UpdateEmailComponentService)(i0.ɵɵinject(i1.UserEmailFacade), i0.ɵɵinject(i2$1.RoutingService), i0.ɵɵinject(i2$1.GlobalMessageService), i0.ɵɵinject(i2$1.AuthService), i0.ɵɵinject(i2$1.AuthRedirectService));\n};\n\nUpdateEmailComponentService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: UpdateEmailComponentService,\n  factory: UpdateEmailComponentService.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(UpdateEmailComponentService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i1.UserEmailFacade\n    }, {\n      type: i2$1.RoutingService\n    }, {\n      type: i2$1.GlobalMessageService\n    }, {\n      type: i2$1.AuthService\n    }, {\n      type: i2$1.AuthRedirectService\n    }];\n  }, null);\n})();\n\nclass UpdateEmailComponent {\n  constructor(service) {\n    this.service = service;\n    this.form = this.service.form;\n    this.isUpdating$ = this.service.isUpdating$;\n  }\n\n  onSubmit() {\n    this.service.save();\n  }\n\n}\n\nUpdateEmailComponent.ɵfac = function UpdateEmailComponent_Factory(t) {\n  return new (t || UpdateEmailComponent)(i0.ɵɵdirectiveInject(UpdateEmailComponentService));\n};\n\nUpdateEmailComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: UpdateEmailComponent,\n  selectors: [[\"cx-update-email\"]],\n  hostAttrs: [1, \"user-form\"],\n  decls: 31,\n  vars: 36,\n  consts: [[\"class\", \"overlay\", 4, \"ngIf\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"label-content\"], [\"aria-required\", \"true\", \"type\", \"email\", \"name\", \"email\", \"formControlName\", \"email\", 1, \"form-control\", 3, \"placeholder\"], [\"aria-live\", \"assertive\", \"aria-atomic\", \"true\", 3, \"control\"], [\"aria-required\", \"true\", \"type\", \"email\", \"name\", \"confirmEmail\", \"formControlName\", \"confirmEmail\", 1, \"form-control\", 3, \"placeholder\"], [\"aria-required\", \"true\", \"type\", \"password\", \"name\", \"password\", \"formControlName\", \"password\", \"autocomplete\", \"new-password\", 1, \"form-control\", 3, \"placeholder\"], [1, \"btn\", \"btn-block\", \"btn-secondary\", 3, \"routerLink\"], [1, \"btn\", \"btn-block\", \"btn-primary\", 3, \"disabled\"], [1, \"overlay\"]],\n  template: function UpdateEmailComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, UpdateEmailComponent_cx_spinner_0_Template, 1, 0, \"cx-spinner\", 0);\n      i0.ɵɵpipe(1, \"async\");\n      i0.ɵɵelementStart(2, \"form\", 1);\n      i0.ɵɵlistener(\"ngSubmit\", function UpdateEmailComponent_Template_form_ngSubmit_2_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(3, \"label\");\n      i0.ɵɵelementStart(4, \"span\", 2);\n      i0.ɵɵtext(5);\n      i0.ɵɵpipe(6, \"cxTranslate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(7, \"input\", 3);\n      i0.ɵɵpipe(8, \"cxTranslate\");\n      i0.ɵɵelement(9, \"cx-form-errors\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"label\");\n      i0.ɵɵelementStart(11, \"span\", 2);\n      i0.ɵɵtext(12);\n      i0.ɵɵpipe(13, \"cxTranslate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(14, \"input\", 5);\n      i0.ɵɵpipe(15, \"cxTranslate\");\n      i0.ɵɵelement(16, \"cx-form-errors\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(17, \"label\");\n      i0.ɵɵelementStart(18, \"span\", 2);\n      i0.ɵɵtext(19);\n      i0.ɵɵpipe(20, \"cxTranslate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(21, \"input\", 6);\n      i0.ɵɵpipe(22, \"cxTranslate\");\n      i0.ɵɵelement(23, \"cx-form-errors\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(24, \"a\", 7);\n      i0.ɵɵpipe(25, \"cxUrl\");\n      i0.ɵɵtext(26);\n      i0.ɵɵpipe(27, \"cxTranslate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(28, \"button\", 8);\n      i0.ɵɵtext(29);\n      i0.ɵɵpipe(30, \"cxTranslate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(1, 15, ctx.isUpdating$));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"formGroup\", ctx.form);\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(6, 17, \"updateEmailForm.newEmailAddress.label\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(8, 19, \"updateEmailForm.newEmailAddress.placeholder\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"control\", ctx.form.get(\"email\"));\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(13, 21, \"updateEmailForm.confirmNewEmailAddress.label\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(15, 23, \"updateEmailForm.confirmNewEmailAddress.placeholder\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"control\", ctx.form.get(\"confirmEmail\"));\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(20, 25, \"updateEmailForm.password.label\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(22, 27, \"updateEmailForm.password.placeholder\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"control\", ctx.form.get(\"password\"));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"routerLink\", i0.ɵɵpipeBind1(25, 29, i0.ɵɵpureFunction0(35, _c0)));\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(27, 31, \"common.cancel\"), \" \");\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"disabled\", ctx.form.disabled);\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(30, 33, \"common.save\"), \" \");\n    }\n  },\n  directives: [i3.NgIf, i4.ɵNgNoValidate, i4.NgControlStatusGroup, i4.FormGroupDirective, i4.DefaultValueAccessor, i4.NgControlStatus, i4.FormControlName, i2.FormErrorsComponent, i5.RouterLinkWithHref, i2.SpinnerComponent],\n  pipes: [i3.AsyncPipe, i2$1.TranslatePipe, i2$1.UrlPipe],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(UpdateEmailComponent, [{\n    type: Component,\n    args: [{\n      selector: 'cx-update-email',\n      templateUrl: './update-email.component.html',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        class: 'user-form'\n      }\n    }]\n  }], function () {\n    return [{\n      type: UpdateEmailComponentService\n    }];\n  }, null);\n})();\n\nclass UpdateEmailModule {}\n\nUpdateEmailModule.ɵfac = function UpdateEmailModule_Factory(t) {\n  return new (t || UpdateEmailModule)();\n};\n\nUpdateEmailModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: UpdateEmailModule\n});\nUpdateEmailModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [provideDefaultConfig({\n    cmsComponents: {\n      UpdateEmailComponent: {\n        component: UpdateEmailComponent,\n        guards: [AuthGuard],\n        providers: [{\n          provide: UpdateEmailComponentService,\n          useClass: UpdateEmailComponentService,\n          deps: [UserEmailFacade, RoutingService, GlobalMessageService, AuthService, AuthRedirectService]\n        }]\n      }\n    }\n  })],\n  imports: [[CommonModule, FormsModule, ReactiveFormsModule, SpinnerModule, UrlModule, RouterModule, I18nModule, FormErrorsModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(UpdateEmailModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, FormsModule, ReactiveFormsModule, SpinnerModule, UrlModule, RouterModule, I18nModule, FormErrorsModule],\n      providers: [provideDefaultConfig({\n        cmsComponents: {\n          UpdateEmailComponent: {\n            component: UpdateEmailComponent,\n            guards: [AuthGuard],\n            providers: [{\n              provide: UpdateEmailComponentService,\n              useClass: UpdateEmailComponentService,\n              deps: [UserEmailFacade, RoutingService, GlobalMessageService, AuthService, AuthRedirectService]\n            }]\n          }\n        }\n      })],\n      declarations: [UpdateEmailComponent]\n    }]\n  }], null, null);\n})();\n\nclass UpdatePasswordComponentService {\n  constructor(userPasswordService, routingService, globalMessageService) {\n    this.userPasswordService = userPasswordService;\n    this.routingService = routingService;\n    this.globalMessageService = globalMessageService;\n    this.busy$ = new BehaviorSubject(false);\n    this.isUpdating$ = this.busy$.pipe(tap(state => state === true ? this.form.disable() : this.form.enable()));\n    this.form = new FormGroup({\n      oldPassword: new FormControl('', Validators.required),\n      newPassword: new FormControl('', [Validators.required, CustomFormValidators.passwordValidator]),\n      newPasswordConfirm: new FormControl('', Validators.required)\n    }, {\n      validators: CustomFormValidators.passwordsMustMatch('newPassword', 'newPasswordConfirm')\n    });\n  }\n  /**\n   * Updates the password for the user.\n   */\n\n\n  updatePassword() {\n    var _a, _b;\n\n    if (!this.form.valid) {\n      this.form.markAllAsTouched();\n      return;\n    }\n\n    this.busy$.next(true);\n    const oldPassword = (_a = this.form.get('oldPassword')) === null || _a === void 0 ? void 0 : _a.value;\n    const newPassword = (_b = this.form.get('newPassword')) === null || _b === void 0 ? void 0 : _b.value;\n    this.userPasswordService.update(oldPassword, newPassword).subscribe({\n      next: () => this.onSuccess(),\n      error: error => this.onError(error)\n    });\n  }\n\n  onSuccess() {\n    this.globalMessageService.add({\n      key: 'updatePasswordForm.passwordUpdateSuccess'\n    }, GlobalMessageType.MSG_TYPE_CONFIRMATION);\n    this.busy$.next(false);\n    this.form.reset();\n    this.routingService.go({\n      cxRoute: 'home'\n    });\n  }\n\n  onError(_error) {\n    this.busy$.next(false);\n    this.form.reset();\n  }\n\n}\n\nUpdatePasswordComponentService.ɵfac = function UpdatePasswordComponentService_Factory(t) {\n  return new (t || UpdatePasswordComponentService)(i0.ɵɵinject(i1.UserPasswordFacade), i0.ɵɵinject(i2$1.RoutingService), i0.ɵɵinject(i2$1.GlobalMessageService));\n};\n\nUpdatePasswordComponentService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: UpdatePasswordComponentService,\n  factory: UpdatePasswordComponentService.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(UpdatePasswordComponentService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i1.UserPasswordFacade\n    }, {\n      type: i2$1.RoutingService\n    }, {\n      type: i2$1.GlobalMessageService\n    }];\n  }, null);\n})();\n\nclass UpdatePasswordComponent {\n  constructor(service) {\n    this.service = service;\n    this.form = this.service.form;\n    this.isUpdating$ = this.service.isUpdating$;\n  }\n\n  onSubmit() {\n    this.service.updatePassword();\n  }\n\n}\n\nUpdatePasswordComponent.ɵfac = function UpdatePasswordComponent_Factory(t) {\n  return new (t || UpdatePasswordComponent)(i0.ɵɵdirectiveInject(UpdatePasswordComponentService));\n};\n\nUpdatePasswordComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: UpdatePasswordComponent,\n  selectors: [[\"cx-update-password\"]],\n  hostAttrs: [1, \"user-form\"],\n  decls: 31,\n  vars: 36,\n  consts: [[\"class\", \"overlay\", 4, \"ngIf\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"label-content\"], [\"aria-required\", \"true\", \"type\", \"password\", \"name\", \"oldPassword\", \"formControlName\", \"oldPassword\", 1, \"form-control\", 3, \"placeholder\"], [\"aria-live\", \"assertive\", \"aria-atomic\", \"true\", 3, \"control\"], [\"aria-required\", \"true\", \"type\", \"password\", \"name\", \"newPassword\", \"formControlName\", \"newPassword\", 1, \"form-control\", 3, \"placeholder\"], [\"aria-required\", \"true\", \"type\", \"password\", \"name\", \"newPasswordConfirm\", \"formControlName\", \"newPasswordConfirm\", 1, \"form-control\", 3, \"placeholder\"], [1, \"btn\", \"btn-block\", \"btn-secondary\", 3, \"routerLink\"], [1, \"btn\", \"btn-block\", \"btn-primary\", 3, \"disabled\"], [1, \"overlay\"]],\n  template: function UpdatePasswordComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, UpdatePasswordComponent_cx_spinner_0_Template, 1, 0, \"cx-spinner\", 0);\n      i0.ɵɵpipe(1, \"async\");\n      i0.ɵɵelementStart(2, \"form\", 1);\n      i0.ɵɵlistener(\"ngSubmit\", function UpdatePasswordComponent_Template_form_ngSubmit_2_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(3, \"label\");\n      i0.ɵɵelementStart(4, \"span\", 2);\n      i0.ɵɵtext(5);\n      i0.ɵɵpipe(6, \"cxTranslate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(7, \"input\", 3);\n      i0.ɵɵpipe(8, \"cxTranslate\");\n      i0.ɵɵelement(9, \"cx-form-errors\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"label\");\n      i0.ɵɵelementStart(11, \"span\", 2);\n      i0.ɵɵtext(12);\n      i0.ɵɵpipe(13, \"cxTranslate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(14, \"input\", 5);\n      i0.ɵɵpipe(15, \"cxTranslate\");\n      i0.ɵɵelement(16, \"cx-form-errors\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(17, \"label\");\n      i0.ɵɵelementStart(18, \"span\", 2);\n      i0.ɵɵtext(19);\n      i0.ɵɵpipe(20, \"cxTranslate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(21, \"input\", 6);\n      i0.ɵɵpipe(22, \"cxTranslate\");\n      i0.ɵɵelement(23, \"cx-form-errors\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(24, \"a\", 7);\n      i0.ɵɵpipe(25, \"cxUrl\");\n      i0.ɵɵtext(26);\n      i0.ɵɵpipe(27, \"cxTranslate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(28, \"button\", 8);\n      i0.ɵɵtext(29);\n      i0.ɵɵpipe(30, \"cxTranslate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(1, 15, ctx.isUpdating$));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"formGroup\", ctx.form);\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(6, 17, \"updatePasswordForm.oldPassword.label\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(8, 19, \"updatePasswordForm.oldPassword.placeholder\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"control\", ctx.form.get(\"oldPassword\"));\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(13, 21, \"updatePasswordForm.newPassword.label\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(15, 23, \"updatePasswordForm.newPassword.placeholder\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"control\", ctx.form.get(\"newPassword\"));\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(20, 25, \"updatePasswordForm.confirmPassword.label\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(22, 27, \"updatePasswordForm.confirmPassword.placeholder\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"control\", ctx.form.get(\"newPasswordConfirm\"));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"routerLink\", i0.ɵɵpipeBind1(25, 29, i0.ɵɵpureFunction0(35, _c0)));\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(27, 31, \"common.cancel\"), \" \");\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"disabled\", ctx.form.disabled);\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(30, 33, \"common.save\"), \" \");\n    }\n  },\n  directives: [i3.NgIf, i4.ɵNgNoValidate, i4.NgControlStatusGroup, i4.FormGroupDirective, i4.DefaultValueAccessor, i4.NgControlStatus, i4.FormControlName, i2.FormErrorsComponent, i5.RouterLinkWithHref, i2.SpinnerComponent],\n  pipes: [i3.AsyncPipe, i2$1.TranslatePipe, i2$1.UrlPipe],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(UpdatePasswordComponent, [{\n    type: Component,\n    args: [{\n      selector: 'cx-update-password',\n      templateUrl: './update-password.component.html',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        class: 'user-form'\n      }\n    }]\n  }], function () {\n    return [{\n      type: UpdatePasswordComponentService\n    }];\n  }, null);\n})();\n\nclass UpdatePasswordModule {}\n\nUpdatePasswordModule.ɵfac = function UpdatePasswordModule_Factory(t) {\n  return new (t || UpdatePasswordModule)();\n};\n\nUpdatePasswordModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: UpdatePasswordModule\n});\nUpdatePasswordModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [provideDefaultConfig({\n    cmsComponents: {\n      UpdatePasswordComponent: {\n        component: UpdatePasswordComponent,\n        guards: [AuthGuard],\n        providers: [{\n          provide: UpdatePasswordComponentService,\n          useClass: UpdatePasswordComponentService,\n          deps: [UserPasswordFacade, RoutingService, GlobalMessageService]\n        }]\n      }\n    }\n  })],\n  imports: [[CommonModule, FormsModule, ReactiveFormsModule, SpinnerModule, I18nModule, FormErrorsModule, UrlModule, RouterModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(UpdatePasswordModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, FormsModule, ReactiveFormsModule, SpinnerModule, I18nModule, FormErrorsModule, UrlModule, RouterModule],\n      providers: [provideDefaultConfig({\n        cmsComponents: {\n          UpdatePasswordComponent: {\n            component: UpdatePasswordComponent,\n            guards: [AuthGuard],\n            providers: [{\n              provide: UpdatePasswordComponentService,\n              useClass: UpdatePasswordComponentService,\n              deps: [UserPasswordFacade, RoutingService, GlobalMessageService]\n            }]\n          }\n        }\n      })],\n      declarations: [UpdatePasswordComponent]\n    }]\n  }], null, null);\n})();\n\nclass UpdateProfileComponentService {\n  constructor(userProfile, globalMessageService) {\n    this.userProfile = userProfile;\n    this.globalMessageService = globalMessageService;\n    this.user$ = this.userProfile.get().pipe(filter(user => Boolean(user)));\n    this.busy$ = new BehaviorSubject(false);\n    this.isUpdating$ = this.user$.pipe(tap(user => this.form.patchValue(user)), switchMap(_user => this.busy$), tap(state => state === true ? this.form.disable() : this.form.enable()));\n    this.titles$ = this.userProfile.getTitles();\n    this.form = new FormGroup({\n      customerId: new FormControl(''),\n      titleCode: new FormControl(''),\n      firstName: new FormControl('', Validators.required),\n      lastName: new FormControl('', Validators.required)\n    });\n  }\n  /**\n   * Updates the user's details and handles the UI.\n   */\n\n\n  updateProfile() {\n    if (!this.form.valid) {\n      this.form.markAllAsTouched();\n      return;\n    }\n\n    this.busy$.next(true);\n    this.userProfile.update(this.form.value).subscribe({\n      next: () => this.onSuccess(),\n      error: error => this.onError(error)\n    });\n  }\n\n  onSuccess() {\n    this.globalMessageService.add({\n      key: 'updateProfileForm.profileUpdateSuccess'\n    }, GlobalMessageType.MSG_TYPE_CONFIRMATION);\n    this.busy$.next(false);\n    this.form.reset();\n  }\n\n  onError(_error) {\n    this.busy$.next(false);\n  }\n\n}\n\nUpdateProfileComponentService.ɵfac = function UpdateProfileComponentService_Factory(t) {\n  return new (t || UpdateProfileComponentService)(i0.ɵɵinject(i1.UserProfileFacade), i0.ɵɵinject(i2$1.GlobalMessageService));\n};\n\nUpdateProfileComponentService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: UpdateProfileComponentService,\n  factory: UpdateProfileComponentService.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(UpdateProfileComponentService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i1.UserProfileFacade\n    }, {\n      type: i2$1.GlobalMessageService\n    }];\n  }, null);\n})();\n\nclass UpdateProfileComponent {\n  constructor(service) {\n    this.service = service;\n    this.form = this.service.form;\n    this.isUpdating$ = this.service.isUpdating$;\n    this.titles$ = this.service.titles$;\n  }\n\n  onSubmit() {\n    this.service.updateProfile();\n  }\n\n}\n\nUpdateProfileComponent.ɵfac = function UpdateProfileComponent_Factory(t) {\n  return new (t || UpdateProfileComponent)(i0.ɵɵdirectiveInject(UpdateProfileComponentService));\n};\n\nUpdateProfileComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: UpdateProfileComponent,\n  selectors: [[\"cx-update-profile\"]],\n  hostAttrs: [1, \"user-form\"],\n  decls: 40,\n  vars: 42,\n  consts: [[\"class\", \"overlay\", 4, \"ngIf\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"label-content\"], [\"formControlName\", \"titleCode\", 1, \"form-control\"], [\"value\", \"\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"aria-required\", \"true\", \"type\", \"text\", \"name\", \"firstName\", \"formControlName\", \"firstName\", 1, \"form-control\", 3, \"placeholder\"], [\"aria-live\", \"assertive\", \"aria-atomic\", \"true\", 3, \"control\"], [\"aria-required\", \"true\", \"type\", \"text\", \"name\", \"lastName\", \"formControlName\", \"lastName\", 1, \"form-control\", 3, \"placeholder\"], [\"aria-required\", \"true\", \"type\", \"text\", \"name\", \"customerId\", \"formControlName\", \"customerId\", \"readonly\", \"\", 1, \"form-control\"], [1, \"btn\", \"btn-block\", \"btn-secondary\", 3, \"routerLink\"], [1, \"btn\", \"btn-block\", \"btn-primary\", 3, \"disabled\"], [1, \"overlay\"], [3, \"value\"]],\n  template: function UpdateProfileComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, UpdateProfileComponent_cx_spinner_0_Template, 1, 0, \"cx-spinner\", 0);\n      i0.ɵɵpipe(1, \"async\");\n      i0.ɵɵelementStart(2, \"form\", 1);\n      i0.ɵɵlistener(\"ngSubmit\", function UpdateProfileComponent_Template_form_ngSubmit_2_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(3, \"label\");\n      i0.ɵɵelementStart(4, \"span\", 2);\n      i0.ɵɵtext(5);\n      i0.ɵɵpipe(6, \"cxTranslate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"select\", 3);\n      i0.ɵɵelementStart(8, \"option\", 4);\n      i0.ɵɵtext(9);\n      i0.ɵɵpipe(10, \"cxTranslate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(11, UpdateProfileComponent_option_11_Template, 2, 2, \"option\", 5);\n      i0.ɵɵpipe(12, \"async\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"label\");\n      i0.ɵɵelementStart(14, \"span\", 2);\n      i0.ɵɵtext(15);\n      i0.ɵɵpipe(16, \"cxTranslate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(17, \"input\", 6);\n      i0.ɵɵpipe(18, \"cxTranslate\");\n      i0.ɵɵelement(19, \"cx-form-errors\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(20, \"label\");\n      i0.ɵɵelementStart(21, \"span\", 2);\n      i0.ɵɵtext(22);\n      i0.ɵɵpipe(23, \"cxTranslate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(24, \"input\", 8);\n      i0.ɵɵpipe(25, \"cxTranslate\");\n      i0.ɵɵelement(26, \"cx-form-errors\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(27, \"label\");\n      i0.ɵɵelementStart(28, \"span\", 2);\n      i0.ɵɵtext(29);\n      i0.ɵɵpipe(30, \"cxTranslate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(31, \"input\", 9);\n      i0.ɵɵelement(32, \"cx-form-errors\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(33, \"a\", 10);\n      i0.ɵɵpipe(34, \"cxUrl\");\n      i0.ɵɵtext(35);\n      i0.ɵɵpipe(36, \"cxTranslate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(37, \"button\", 11);\n      i0.ɵɵtext(38);\n      i0.ɵɵpipe(39, \"cxTranslate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(1, 17, ctx.isUpdating$));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"formGroup\", ctx.form);\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(6, 19, \"updateProfileForm.title\"));\n      i0.ɵɵadvance(4);\n      i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(10, 21, \"updateProfileForm.none\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(12, 23, ctx.titles$));\n      i0.ɵɵadvance(4);\n      i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(16, 25, \"updateProfileForm.firstName.label\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(18, 27, \"updateProfileForm.firstName.placeholder\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"control\", ctx.form.get(\"firstName\"));\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(23, 29, \"updateProfileForm.lastName.label\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵpropertyInterpolate(\"placeholder\", i0.ɵɵpipeBind1(25, 31, \"updateProfileForm.lastName.placeholder\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"control\", ctx.form.get(\"lastName\"));\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(30, 33, \"updateProfileForm.customerId\"));\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"control\", ctx.form.get(\"lastName\"));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"routerLink\", i0.ɵɵpipeBind1(34, 35, i0.ɵɵpureFunction0(41, _c0)));\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(36, 37, \"common.cancel\"), \" \");\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"disabled\", ctx.form.disabled);\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(39, 39, \"common.save\"), \" \");\n    }\n  },\n  directives: [i3.NgIf, i4.ɵNgNoValidate, i4.NgControlStatusGroup, i4.FormGroupDirective, i4.SelectControlValueAccessor, i4.NgControlStatus, i4.FormControlName, i4.NgSelectOption, i4.ɵNgSelectMultipleOption, i3.NgForOf, i4.DefaultValueAccessor, i2.FormErrorsComponent, i5.RouterLinkWithHref, i2.SpinnerComponent],\n  pipes: [i3.AsyncPipe, i2$1.TranslatePipe, i2$1.UrlPipe],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(UpdateProfileComponent, [{\n    type: Component,\n    args: [{\n      selector: 'cx-update-profile',\n      templateUrl: './update-profile.component.html',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        class: 'user-form'\n      }\n    }]\n  }], function () {\n    return [{\n      type: UpdateProfileComponentService\n    }];\n  }, null);\n})();\n\nclass UpdateProfileModule {}\n\nUpdateProfileModule.ɵfac = function UpdateProfileModule_Factory(t) {\n  return new (t || UpdateProfileModule)();\n};\n\nUpdateProfileModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: UpdateProfileModule\n});\nUpdateProfileModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [provideDefaultConfig({\n    cmsComponents: {\n      UpdateProfileComponent: {\n        component: UpdateProfileComponent,\n        guards: [AuthGuard],\n        providers: [{\n          provide: UpdateProfileComponentService,\n          useClass: UpdateProfileComponentService,\n          deps: [UserProfileFacade, GlobalMessageService]\n        }]\n      }\n    }\n  })],\n  imports: [[CommonModule, FormsModule, ReactiveFormsModule, SpinnerModule, I18nModule, FormErrorsModule, RouterModule, UrlModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(UpdateProfileModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, FormsModule, ReactiveFormsModule, SpinnerModule, I18nModule, FormErrorsModule, RouterModule, UrlModule],\n      providers: [provideDefaultConfig({\n        cmsComponents: {\n          UpdateProfileComponent: {\n            component: UpdateProfileComponent,\n            guards: [AuthGuard],\n            providers: [{\n              provide: UpdateProfileComponentService,\n              useClass: UpdateProfileComponentService,\n              deps: [UserProfileFacade, GlobalMessageService]\n            }]\n          }\n        }\n      })],\n      declarations: [UpdateProfileComponent]\n    }]\n  }], null, null);\n})();\n\nclass UserProfileComponentsModule {}\n\nUserProfileComponentsModule.ɵfac = function UserProfileComponentsModule_Factory(t) {\n  return new (t || UserProfileComponentsModule)();\n};\n\nUserProfileComponentsModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: UserProfileComponentsModule\n});\nUserProfileComponentsModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[RegisterComponentModule, UpdateProfileModule, UpdateEmailModule, UpdatePasswordModule, ForgotPasswordModule, ResetPasswordModule, CloseAccountModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(UserProfileComponentsModule, [{\n    type: NgModule,\n    args: [{\n      imports: [RegisterComponentModule, UpdateProfileModule, UpdateEmailModule, UpdatePasswordModule, ForgotPasswordModule, ResetPasswordModule, CloseAccountModule]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CloseAccountComponent, CloseAccountModalComponent, CloseAccountModule, ForgotPasswordComponent, ForgotPasswordComponentService, ForgotPasswordModule, RegisterComponent, RegisterComponentModule, ResetPasswordComponent, ResetPasswordComponentService, ResetPasswordModule, UpdateEmailComponent, UpdateEmailComponentService, UpdateEmailModule, UpdatePasswordComponent, UpdatePasswordComponentService, UpdatePasswordModule, UpdateProfileComponent, UpdateProfileComponentService, UpdateProfileModule, UserProfileComponentsModule }; //# sourceMappingURL=spartacus-user-profile-components.js.map","map":{"version":3,"sources":["D:/spartacus/front-store/node_modules/@spartacus/user/fesm2015/spartacus-user-profile-components.js","D:/spartacus/front-store/node_modules/feature-libs/user/profile/components/close-account/components/close-account-modal/close-account-modal.component.html","D:/spartacus/front-store/node_modules/feature-libs/user/profile/components/forgot-password/forgot-password.component.html","D:/spartacus/front-store/node_modules/feature-libs/user/profile/components/register/register.component.html","D:/spartacus/front-store/node_modules/feature-libs/user/profile/components/reset-password/reset-password.component.html","D:/spartacus/front-store/node_modules/feature-libs/user/profile/components/update-email/update-email.component.html","D:/spartacus/front-store/node_modules/feature-libs/user/profile/components/update-password/update-password.component.html","D:/spartacus/front-store/node_modules/feature-libs/user/profile/components/update-profile/update-profile.component.html","D:/spartacus/front-store/node_modules/feature-libs/user/profile/components/close-account/components/close-account/close-account.component.html"],"names":["i3","CommonModule","i0","Component","ChangeDetectionStrategy","NgModule","Injectable","i5","RouterModule","i2$1","GlobalMessageType","UrlModule","I18nModule","provideDefaultConfig","AuthGuard","OAuthFlow","NotAuthGuard","RoutingService","AuthConfigService","GlobalMessageService","HttpErrorModel","AuthService","AuthRedirectService","i2","ICON_TYPE","IconModule","SpinnerModule","CustomFormValidators","FormErrorsModule","sortTitles","BehaviorSubject","Subscription","combineLatest","first","tap","map","filter","switchMap","i1","UserPasswordFacade","UserEmailFacade","UserProfileFacade","i4","FormGroup","FormControl","Validators","ReactiveFormsModule","FormsModule","CloseAccountModalComponent","constructor","modalService","authService","globalMessageService","routingService","translationService","userProfile","iconTypes","isLoading$","ngOnInit","isLoggedIn$","isUserLoggedIn","onSuccess","dismissModal","translate","pipe","subscribe","text","add","MSG_TYPE_CONFIRMATION","go","cxRoute","onError","MSG_TYPE_ERROR","reason","dismissActiveModal","closeAccount","next","close","error","ɵfac","ModalService","TranslationService","ɵcmp","NgIf","IconComponent","SpinnerComponent","AsyncPipe","TranslatePipe","type","args","selector","templateUrl","changeDetection","OnPush","CloseAccountComponent","openModal","modal","open","centered","componentInstance","RouterLinkWithHref","UrlPipe","CloseAccountModule","ɵmod","ɵinj","cmsComponents","component","guards","imports","providers","declarations","ForgotPasswordComponentService","userPasswordService","authConfigService","globalMessage","busy$","isUpdating$","state","form","disable","enable","userEmail","required","emailValidator","requestEmail","valid","markAllAsTouched","requestForgotPasswordEmail","value","key","reset","redirect","_error","getOAuthFlow","ResourceOwnerPasswordFlow","ɵprov","ForgotPasswordComponent","service","onSubmit","ɵNgNoValidate","NgControlStatusGroup","FormGroupDirective","DefaultValueAccessor","NgControlStatus","FormControlName","FormErrorsComponent","ForgotPasswordModule","provide","useClass","deps","RegisterComponent","userRegister","fb","router","anonymousConsentsService","anonymousConsentsConfig","subscription","registerForm","group","titleCode","firstName","lastName","email","password","passwordValidator","passwordconf","newsletter","disabled","isConsentRequired","termsandconditions","requiredTrue","validators","passwordsMustMatch","_a","_b","_c","titles$","getTitles","titles","sort","get","messages","Object","keys","length","globalMessageEntities","some","message","remove","registerConsent","anonymousConsents","anonymousConsent$","getConsent","getTemplate","consent","template","description","valueChanges","toggleAnonymousConsent","submitForm","registerUser","register","collectDataFromRegisterForm","onRegisterUserSuccess","complete","titleSelected","title","setValue","code","formData","uid","toLowerCase","isConsentGiven","_d","requiredConsents","includes","Boolean","giveConsent","withdrawConsent","ngOnDestroy","unsubscribe","UserRegisterFacade","FormBuilder","AnonymousConsentsService","AnonymousConsentsConfig","SelectControlValueAccessor","NgSelectOption","ɵNgSelectMultipleOption","NgForOf","CheckboxControlValueAccessor","RegisterComponentModule","RegisterCustomerComponent","ResetPasswordComponentService","resetToken$","getRouterState","routerState","queryParams","passwordConfirm","resetPassword","token","details","forEach","err","raw","ResetPasswordComponent","token$","host","class","ResetPasswordModule","UpdateEmailComponentService","authRedirectService","confirmEmail","emailsMustMatch","save","newEmail","update","newUid","params","setRedirectUrl","getUrl","coreLogout","then","UpdateEmailComponent","UpdateEmailModule","UpdatePasswordComponentService","oldPassword","newPassword","newPasswordConfirm","updatePassword","UpdatePasswordComponent","UpdatePasswordModule","UpdateProfileComponentService","user$","user","patchValue","_user","customerId","updateProfile","UpdateProfileComponent","UpdateProfileModule","UserProfileComponentsModule"],"mappings":"AAAA,OAAO,KAAKA,EAAZ,MAAoB,iBAApB;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,SAASC,SAAT,EAAoBC,uBAApB,EAA6CC,QAA7C,EAAuDC,UAAvD,QAAyE,eAAzE;AACA,OAAO,KAAKC,EAAZ,MAAoB,iBAApB;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,OAAO,KAAKC,IAAZ,MAAsB,iBAAtB;AACA,SAASC,iBAAT,EAA4BC,SAA5B,EAAuCC,UAAvC,EAAmDC,oBAAnD,EAAyEC,SAAzE,EAAoFC,SAApF,EAA+FC,YAA/F,EAA6GC,cAA7G,EAA6HC,iBAA7H,EAAgJC,oBAAhJ,EAAsKC,cAAtK,EAAsLC,WAAtL,EAAmMC,mBAAnM,QAA8N,iBAA9N;AACA,OAAO,KAAKC,EAAZ,MAAoB,uBAApB;AACA,SAASC,SAAT,EAAoBC,UAApB,EAAgCC,aAAhC,EAA+CC,oBAA/C,EAAqEC,gBAArE,EAAuFC,UAAvF,QAAyG,uBAAzG;AACA,SAASC,eAAT,EAA0BC,YAA1B,EAAwCC,aAAxC,QAA6D,MAA7D;AACA,SAASC,KAAT,EAAgBC,GAAhB,EAAqBC,GAArB,EAA0BC,MAA1B,EAAkCC,SAAlC,QAAmD,gBAAnD;AACA,OAAO,KAAKC,EAAZ,MAAoB,8BAApB;AACA,SAASC,kBAAT,EAA6BC,eAA7B,EAA8CC,iBAA9C,QAAuE,8BAAvE;AACA,OAAO,KAAKC,EAAZ,MAAoB,gBAApB;AACA,SAASC,SAAT,EAAoBC,WAApB,EAAiCC,UAAjC,EAA6CC,mBAA7C,EAAkEC,WAAlE,QAAqF,gBAArF;;;;AAoD6G7C,IAAAA,EClD3G,yB;ADkD2GA,IAAAA,ECjDzG,4B;ADiDyGA,IAAAA,EChDvG,2B;ADgDuGA,IAAAA,EC/CzG,e;AD+CyGA,IAAAA,EC9C3G,e;;;;;;gBD8C2GA,E;;AAAAA,IAAAA,EC3CzG,4B;AD2CyGA,IAAAA,EC1CvG,6B;AD0CuGA,IAAAA,ECzCrG,2B;ADyCqGA,IAAAA,ECxCnG,U;ADwCmGA,IAAAA,E;AAAAA,IAAAA,ECvCrG,e;ADuCqGA,IAAAA,ECtCvG,e;ADsCuGA,IAAAA,ECrCvG,6B;ADqCuGA,IAAAA,ECpCrG,6B;ADoCqGA,IAAAA,ECnCnG,gC;ADmCmGA,IAAAA,ECnCnE;ADmCmEA,MAAAA,ECnCnE;AAAA,qBDmCmEA,ECnCnE;AAAA;AAAA,M;ADmCmEA,IAAAA,EClCjG,U;ADkCiGA,IAAAA,E;AAAAA,IAAAA,ECjCnG,e;ADiCmGA,IAAAA,EChCnG,iC;ADgCmGA,IAAAA,EChC3F;ADgC2FA,MAAAA,EChC3F;AAAA,qBDgC2FA,EChC3F;AAAA;AAAA,M;ADgC2FA,IAAAA,EC/BjG,W;AD+BiGA,IAAAA,E;AAAAA,IAAAA,EC9BnG,e;AD8BmGA,IAAAA,EC7BrG,e;AD6BqGA,IAAAA,EC5BvG,e;AD4BuGA,IAAAA,EC3BzG,e;;;;AD2ByGA,IAAAA,ECxCnG,a;ADwCmGA,IAAAA,ECxCnG,yBDwCmGA,ECxCnG,qE;ADwCmGA,IAAAA,EClCjG,a;ADkCiGA,IAAAA,EClCjG,yBDkCiGA,EClCjG,uD;ADkCiGA,IAAAA,EC/BjG,a;AD+BiGA,IAAAA,EC/BjG,yBD+BiGA,EC/BjG,0C;;;;;;gBD+BiGA,E;;AAAAA,IAAAA,ECnE7G,2B;ADmE6GA,IAAAA,EClE3G,4B;ADkE2GA,IAAAA,ECjEzG,2B;ADiEyGA,IAAAA,EChEvG,U;ADgEuGA,IAAAA,E;AAAAA,IAAAA,EC/DzG,e;AD+DyGA,IAAAA,EC9DzG,+B;AD8DyGA,IAAAA,EC1DvG;AD0DuGA,MAAAA,EC1DvG;AAAA,qBD0DuGA,EC1DvG;AAAA;AAAA,M;AD0DuGA,IAAAA,E;AAAAA,IAAAA,ECxDvG,6B;ADwDuGA,IAAAA,ECvDrG,2B;ADuDqGA,IAAAA,ECtDvG,e;ADsDuGA,IAAAA,ECrDzG,e;ADqDyGA,IAAAA,ECpD3G,e;ADoD2GA,IAAAA,EClD3G,wF;ADkD2GA,IAAAA,E;AAAAA,IAAAA,EC5C3G,kHD4C2GA,EC5C3G,wB;AD4C2GA,IAAAA,ECzB7G,wB;;;;gBDyB6GA,E;;mBAAAA,E;AAAAA,IAAAA,EChEvG,a;ADgEuGA,IAAAA,EChEvG,yBDgEuGA,EChEvG,8D;ADgEuGA,IAAAA,EC3DvG,a;AD2DuGA,IAAAA,EC3DvG,2BD2DuGA,EC3DvG,mC;AD2DuGA,IAAAA,ECvD5F,a;ADuD4FA,IAAAA,ECvD5F,2C;ADuD4FA,IAAAA,EClDrG,a;ADkDqGA,IAAAA,EClDrG,oBDkDqGA,EClDrG,wD;;;;;;;;;;;;ADkDqGA,IAAAA,EEnE7G,8B;;;;;;;;;;;;AFmE6GA,IAAAA,EGlD7F,gC;AHkD6FA,IAAAA,EG9C3F,U;AH8C2FA,IAAAA,EG7C7F,e;;;;;AH6C6FA,IAAAA,EGhD3F,mC;AHgD2FA,IAAAA,EG9C3F,a;AH8C2FA,IAAAA,EG9C3F,4C;;;;;;AH8C2FA,IAAAA,EG6E/F,2B;AH7E+FA,IAAAA,EG8E7F,0B;AH9E6FA,IAAAA,EGqF7F,8B;AHrF6FA,IAAAA,EGsF3F,U;AHtF2FA,IAAAA,EGuF7F,e;AHvF6FA,IAAAA,EGwF/F,e;;;;;mBHxF+FA,E;AAAAA,IAAAA,EGmF3F,a;AHnF2FA,IAAAA,EGmF3F,0E;AHnF2FA,IAAAA,EGsF3F,a;AHtF2FA,IAAAA,EGsF3F,2D;;;;;;;;;;;;gBHtF2FA,E;;AAAAA,IAAAA,EGnE7G,gC;AHmE6GA,IAAAA,EG/D3G,4B;AH+D2GA,IAAAA,EG9DzG,4B;AH8DyGA,IAAAA,EG7DvG,4B;AH6DuGA,IAAAA,EG5DrG,6B;AH4DqGA,IAAAA,EG5D/F;AH4D+FA,MAAAA,EG5D/F;AAAA,qBH4D+FA,EG5D/F;AAAA;AAAA,M;AH4D+FA,IAAAA,EG3DnG,4B;AH2DmGA,IAAAA,EG1DjG,2B;AH0DiGA,IAAAA,EGzD/F,6B;AHyD+FA,IAAAA,EGzDnE,U;AHyDmEA,IAAAA,E;AAAAA,IAAAA,EGvD7F,e;AHuD6FA,IAAAA,EGtD/F,gC;AHsD+FA,IAAAA,EGrD7F,iC;AHqD6FA,IAAAA,EGpD3F,W;AHoD2FA,IAAAA,E;AAAAA,IAAAA,EGnD7F,e;AHmD6FA,IAAAA,EGlD7F,mF;AHkD6FA,IAAAA,E;AAAAA,IAAAA,EG5C/F,e;AH4C+FA,IAAAA,EG3CjG,e;AH2CiGA,IAAAA,EG1CnG,e;AH0CmGA,IAAAA,EGxCnG,6B;AHwCmGA,IAAAA,EGvCjG,4B;AHuCiGA,IAAAA,EGtC/F,8B;AHsC+FA,IAAAA,EGtCnE,W;AHsCmEA,IAAAA,E;AAAAA,IAAAA,EGpC7F,e;AHoC6FA,IAAAA,EGnC/F,2B;AHmC+FA,IAAAA,E;AAAAA,IAAAA,EGzB/F,oC;AHyB+FA,IAAAA,EGpBjG,e;AHoBiGA,IAAAA,EGnBnG,e;AHmBmGA,IAAAA,EGjBnG,6B;AHiBmGA,IAAAA,EGhBjG,4B;AHgBiGA,IAAAA,EGf/F,8B;AHe+FA,IAAAA,EGfnE,W;AHemEA,IAAAA,E;AAAAA,IAAAA,EGb7F,e;AHa6FA,IAAAA,EGZ/F,2B;AHY+FA,IAAAA,E;AAAAA,IAAAA,EGF/F,oC;AHE+FA,IAAAA,EGGjG,e;AHHiGA,IAAAA,EGInG,e;AHJmGA,IAAAA,EGMnG,6B;AHNmGA,IAAAA,EGOjG,4B;AHPiGA,IAAAA,EGQ/F,8B;AHR+FA,IAAAA,EGQnE,W;AHRmEA,IAAAA,E;AAAAA,IAAAA,EGU7F,e;AHV6FA,IAAAA,EGW/F,2B;AHX+FA,IAAAA,E;AAAAA,IAAAA,EGqB/F,oC;AHrB+FA,IAAAA,EG0BjG,e;AH1BiGA,IAAAA,EG2BnG,e;AH3BmGA,IAAAA,EG6BnG,6B;AH7BmGA,IAAAA,EG8BjG,4B;AH9BiGA,IAAAA,EG+B/F,8B;AH/B+FA,IAAAA,EG+BnE,W;AH/BmEA,IAAAA,E;AAAAA,IAAAA,EGiC7F,e;AHjC6FA,IAAAA,EGkC/F,2B;AHlC+FA,IAAAA,E;AAAAA,IAAAA,EG4C/F,oC;AH5C+FA,IAAAA,EGiDjG,e;AHjDiGA,IAAAA,EGkDnG,e;AHlDmGA,IAAAA,EGoDnG,6B;AHpDmGA,IAAAA,EGqDjG,4B;AHrDiGA,IAAAA,EGsD/F,8B;AHtD+FA,IAAAA,EGsDnE,W;AHtDmEA,IAAAA,E;AAAAA,IAAAA,EGwD7F,e;AHxD6FA,IAAAA,EGyD/F,2B;AHzD+FA,IAAAA,E;AAAAA,IAAAA,EGmE/F,oC;AHnE+FA,IAAAA,EGwEjG,e;AHxEiGA,IAAAA,EGyEnG,e;AHzEmGA,IAAAA,EG2EnG,6B;AH3EmGA,IAAAA,EG4EjG,8B;AH5EiGA,IAAAA,EG6E/F,iF;AH7E+FA,IAAAA,E;AAAAA,IAAAA,EGyFjG,e;AHzFiGA,IAAAA,EG0FnG,e;AH1FmGA,IAAAA,EG4FnG,6B;AH5FmGA,IAAAA,EG6FjG,8B;AH7FiGA,IAAAA,EG8F/F,4B;AH9F+FA,IAAAA,EG+F7F,2B;AH/F6FA,IAAAA,EGqG7F,+B;AHrG6FA,IAAAA,EGsG3F,W;AHtG2FA,IAAAA,E;AAAAA,IAAAA,EGuG3F,4B;AHvG2FA,IAAAA,E;AAAAA,IAAAA,EG2GzF,W;AH3GyFA,IAAAA,E;AAAAA,IAAAA,EG4G3F,e;AH5G2FA,IAAAA,EG6G7F,e;AH7G6FA,IAAAA,EG8G7F,oC;AH9G6FA,IAAAA,EGmH/F,e;AHnH+FA,IAAAA,EGoHjG,e;AHpHiGA,IAAAA,EGqHnG,e;AHrHmGA,IAAAA,EGsHnG,iC;AHtHmGA,IAAAA,EGuHjG,W;AHvHiGA,IAAAA,E;AAAAA,IAAAA,EGwHnG,e;AHxHmGA,IAAAA,EGyHnG,4B;AHzHmGA,IAAAA,E;AAAAA,IAAAA,EG4HhG,W;AH5HgGA,IAAAA,E;AAAAA,IAAAA,EG4H3D,e;AH5H2DA,IAAAA,EG8HrG,e;AH9HqGA,IAAAA,EG+HvG,e;AH/HuGA,IAAAA,EGgIzG,e;AHhIyGA,IAAAA,EGiI3G,e;AHjI2GA,IAAAA,EGkI7G,e;;;;mBHlI6GA,E;AAAAA,IAAAA,EG5DrE,a;AH4DqEA,IAAAA,EG5DrE,6C;AH4DqEA,IAAAA,EGzDnE,a;AHyDmEA,IAAAA,EGzDnE,mBHyDmEA,EGzDnE,sC;AHyDmEA,IAAAA,EGpD3F,a;AHoD2FA,IAAAA,EGpD3F,yBHoD2FA,EGpD3F,kD;AHoD2FA,IAAAA,EGjDzE,a;AHiDyEA,IAAAA,EGjDzE,uBHiDyEA,EGjDzE,qC;AHiDyEA,IAAAA,EGtCnE,a;AHsCmEA,IAAAA,EGtCnE,mBHsCmEA,EGtCnE,iD;AHsCmEA,IAAAA,EG9B7F,a;AH8B6FA,IAAAA,EG9B7F,sCH8B6FA,EG9B7F,uD;AH8B6FA,IAAAA,EGtB7F,a;AHsB6FA,IAAAA,EGtB7F,4D;AHsB6FA,IAAAA,EGfnE,a;AHemEA,IAAAA,EGfnE,mBHemEA,EGfnE,gD;AHemEA,IAAAA,EGP7F,a;AHO6FA,IAAAA,EGP7F,sCHO6FA,EGP7F,sD;AHO6FA,IAAAA,EGC7F,a;AHD6FA,IAAAA,EGC7F,2D;AHD6FA,IAAAA,EGQnE,a;AHRmEA,IAAAA,EGQnE,mBHRmEA,EGQnE,oD;AHRmEA,IAAAA,EGgB7F,a;AHhB6FA,IAAAA,EGgB7F,sCHhB6FA,EGgB7F,0D;AHhB6FA,IAAAA,EGwB7F,a;AHxB6FA,IAAAA,EGwB7F,wD;AHxB6FA,IAAAA,EG+BnE,a;AH/BmEA,IAAAA,EG+BnE,mBH/BmEA,EG+BnE,gD;AH/BmEA,IAAAA,EGuC7F,a;AHvC6FA,IAAAA,EGuC7F,sCHvC6FA,EGuC7F,sD;AHvC6FA,IAAAA,EG+C7F,a;AH/C6FA,IAAAA,EG+C7F,2D;AH/C6FA,IAAAA,EGsDnE,a;AHtDmEA,IAAAA,EGsDnE,mBHtDmEA,EGsDnE,uD;AHtDmEA,IAAAA,EG8D7F,a;AH9D6FA,IAAAA,EG8D7F,sCH9D6FA,EG8D7F,6D;AH9D6FA,IAAAA,EGsE7F,a;AHtE6FA,IAAAA,EGsE7F,+D;AHtE6FA,IAAAA,EG6EvF,a;AH7EuFA,IAAAA,EG6EvF,oBH7EuFA,EG6EvF,+C;AH7EuFA,IAAAA,EGsG3F,a;AHtG2FA,IAAAA,EGsG3F,yBHtG2FA,EGsG3F,sD;AHtG2FA,IAAAA,EGwGzF,a;AHxGyFA,IAAAA,EGwGzF,0BHxGyFA,EGwGzF,qBHxGyFA,EGwGzF,2B;AHxGyFA,IAAAA,EG2GzF,a;AH3GyFA,IAAAA,EG2GzF,yBH3GyFA,EG2GzF,yD;AH3GyFA,IAAAA,EGiH3F,a;AHjH2FA,IAAAA,EGiH3F,qE;AHjH2FA,IAAAA,EGuHjG,a;AHvHiGA,IAAAA,EGuHjG,yBHvHiGA,EGuHjG,+C;AHvHiGA,IAAAA,EG2HjG,a;AH3HiGA,IAAAA,EG2HjG,0BH3HiGA,EG2HjG,qBH3HiGA,EG2HjG,2B;AH3HiGA,IAAAA,EG4HhG,a;AH5HgGA,IAAAA,EG4HhG,mBH5HgGA,EG4HhG,wC;;;;;;AH5HgGA,IAAAA,EGqI3G,6B;AHrI2GA,IAAAA,EGqInF,2B;AHrImFA,IAAAA,EGqI1D,e;;;;;;AHrI0DA,IAAAA,EInE7G,8B;;;;;;gBJmE6GA,E;;AAAAA,IAAAA,EIjE7G,6B;AJiE6GA,IAAAA,EI/D3G;AAAA,0BJ+D2GA,EI/D3G;AAAA;AAAA,qBJ+D2GA,EI/D3G;AAAA;AAAA,M;AJ+D2GA,IAAAA,EI5D3G,2B;AJ4D2GA,IAAAA,EI3DzG,6B;AJ2DyGA,IAAAA,EI3D7E,U;AJ2D6EA,IAAAA,E;AAAAA,IAAAA,EIzDvG,e;AJyDuGA,IAAAA,EIxDzG,yB;AJwDyGA,IAAAA,E;AAAAA,IAAAA,EIjDzG,kC;AJiDyGA,IAAAA,EI5C3G,e;AJ4C2GA,IAAAA,EI1C3G,2B;AJ0C2GA,IAAAA,EIzCzG,6B;AJyCyGA,IAAAA,EIzC7E,W;AJyC6EA,IAAAA,E;AAAAA,IAAAA,EIvCvG,e;AJuCuGA,IAAAA,EItCzG,0B;AJsCyGA,IAAAA,E;AAAAA,IAAAA,EI/BzG,mC;AJ+ByGA,IAAAA,EI1B3G,e;AJ0B2GA,IAAAA,EIxB3G,gC;AJwB2GA,IAAAA,EIvBzG,W;AJuByGA,IAAAA,E;AAAAA,IAAAA,EItB3G,e;AJsB2GA,IAAAA,EIrB7G,e;;;;mBJqB6GA,E;AAAAA,IAAAA,EI9D3G,qC;AJ8D2GA,IAAAA,EI3D7E,a;AJ2D6EA,IAAAA,EI3D7E,mBJ2D6EA,EI3D7E,2C;AJ2D6EA,IAAAA,EIpDvG,a;AJoDuGA,IAAAA,EIpDvG,sCJoDuGA,EIpDvG,qD;AJoDuGA,IAAAA,EI9CvG,a;AJ8CuGA,IAAAA,EI9CvG,mD;AJ8CuGA,IAAAA,EIzC7E,a;AJyC6EA,IAAAA,EIzC7E,mBJyC6EA,EIzC7E,yD;AJyC6EA,IAAAA,EIlCvG,a;AJkCuGA,IAAAA,EIlCvG,sCJkCuGA,EIlCvG,6D;AJkCuGA,IAAAA,EI5BvG,a;AJ4BuGA,IAAAA,EI5BvG,0D;AJ4BuGA,IAAAA,EIxBjE,a;AJwBiEA,IAAAA,EIxBjE,6C;AJwBiEA,IAAAA,EIvBzG,a;AJuByGA,IAAAA,EIvBzG,yBJuByGA,EIvBzG,oD;;;;;;AJuByGA,IAAAA,E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AAAA,EK1C7E,WL0sBhC;AAhqB6GA,MAAAA,EAgqB7G;AAhqB6GA,MAAAA,EKxCvG,eLwsBN;AAhqB6GA,MAAAA,EKvCzG,0BLusBJ;AAhqB6GA,MAAAA,EAgqB7G;AAhqB6GA,MAAAA,EK7BzG,mCL6rBJ;AAhqB6GA,MAAAA,EKxB3G,eLwrBF;AAhqB6GA,MAAAA,EKtB3G,4BLsrBF;AAhqB6GA,MAAAA,EKrBzG,8BLqrBJ;AAhqB6GA,MAAAA,EKrB7E,WLqrBhC;AAhqB6GA,MAAAA,EAgqB7G;AAhqB6GA,MAAAA,EKnBvG,eLmrBN;AAhqB6GA,MAAAA,EKlBzG,0BLkrBJ;AAhqB6GA,MAAAA,EAgqB7G;AAhqB6GA,MAAAA,EKTzG,mCLyqBJ;AAhqB6GA,MAAAA,EKJ3G,eLoqBF;AAhqB6GA,MAAAA,EKF3G,2BLkqBF;AAhqB6GA,MAAAA,EAgqB7G;AAhqB6GA,MAAAA,EKEzG,WL8pBJ;AAhqB6GA,MAAAA,EAgqB7G;AAhqB6GA,MAAAA,EKG3G,eL6pBF;AAhqB6GA,MAAAA,EKK3G,gCL2pBF;AAhqB6GA,MAAAA,EKMzG,WL0pBJ;AAhqB6GA,MAAAA,EAgqB7G;AAhqB6GA,MAAAA,EKO3G,eLypBF;AAhqB6GA,MAAAA,EKQ7G,eLwpBA;AAAA;;AAAA;AAhqB6GA,MAAAA,EKnEhF,oBLmEgFA,EKnEhF,qCLmuB7B;AAhqB6GA,MAAAA,EKjE/E,aLiuB9B;AAhqB6GA,MAAAA,EKjE/E,kCLiuB9B;AAhqB6GA,MAAAA,EK/D7E,aL+tBhC;AAhqB6GA,MAAAA,EK/D7E,mBL+D6EA,EK/D7E,6DL+tBhC;AAhqB6GA,MAAAA,EKvDvG,aLutBN;AAhqB6GA,MAAAA,EKvDvG,sCLuDuGA,EKvDvG,mELutBN;AAhqB6GA,MAAAA,EK/CvG,aL+sBN;AAhqB6GA,MAAAA,EK/CvG,6CL+sBN;AAhqB6GA,MAAAA,EK1C7E,aL0sBhC;AAhqB6GA,MAAAA,EK1C7E,mBL0C6EA,EK1C7E,qEL0sBhC;AAhqB6GA,MAAAA,EKlCvG,aLksBN;AAhqB6GA,MAAAA,EKlCvG,sCLkCuGA,EKlCvG,2ELksBN;AAhqB6GA,MAAAA,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7zB6GA,MAAAA,EM3C3G,4BNw2BF;AA7zB6GA,MAAAA,EM1CzG,8BNu2BJ;AA7zB6GA,MAAAA,EM1C7E,WNu2BhC;AA7zB6GA,MAAAA,EA6zB7G;AA7zB6GA,MAAAA,EMxCvG,eNq2BN;AA7zB6GA,MAAAA,EMvCzG,0BNo2BJ;AA7zB6GA,MAAAA,EA6zB7G;AA7zB6GA,MAAAA,EM7BzG,mCN01BJ;AA7zB6GA,MAAAA,EMxB3G,eNq1BF;AA7zB6GA,MAAAA,EMtB3G,4BNm1BF;AA7zB6GA,MAAAA,EMrBzG,8BNk1BJ;AA7zB6GA,MAAAA,EMrB7E,WNk1BhC;AA7zB6GA,MAAAA,EA6zB7G;AA7zB6GA,MAAAA,EMnBvG,eNg1BN;AA7zB6GA,MAAAA,EMlBzG,0BN+0BJ;AA7zB6GA,MAAAA,EA6zB7G;AA7zB6GA,MAAAA,EMRzG,mCNq0BJ;AA7zB6GA,MAAAA,EMH3G,eNg0BF;AA7zB6GA,MAAAA,EMD3G,2BN8zBF;AA7zB6GA,MAAAA,EA6zB7G;AA7zB6GA,MAAAA,EMGzG,WN0zBJ;AA7zB6GA,MAAAA,EA6zB7G;AA7zB6GA,MAAAA,EMI3G,eNyzBF;AA7zB6GA,MAAAA,EMM3G,gCNuzBF;AA7zB6GA,MAAAA,EMOzG,WNszBJ;AA7zB6GA,MAAAA,EA6zB7G;AA7zB6GA,MAAAA,EMQ3G,eNqzBF;AA7zB6GA,MAAAA,EMS7G,eNozBA;AAAA;;AAAA;AA7zB6GA,MAAAA,EMnEhF,oBNmEgFA,EMnEhF,qCNg4B7B;AA7zB6GA,MAAAA,EMjE/E,aN83B9B;AA7zB6GA,MAAAA,EMjE/E,kCN83B9B;AA7zB6GA,MAAAA,EM/D7E,aN43BhC;AA7zB6GA,MAAAA,EM/D7E,mBN+D6EA,EM/D7E,4DN43BhC;AA7zB6GA,MAAAA,EMvDvG,aNo3BN;AA7zB6GA,MAAAA,EMvDvG,sCNuDuGA,EMvDvG,kENo3BN;AA7zB6GA,MAAAA,EM/CvG,aN42BN;AA7zB6GA,MAAAA,EM/CvG,mDN42BN;AA7zB6GA,MAAAA,EM1C7E,aNu2BhC;AA7zB6GA,MAAAA,EM1C7E,mBN0C6EA,EM1C7E,6DNu2BhC;AA7zB6GA,MAAAA,EMlCvG,aN+1BN;AA7zB6GA,MAAAA,EMlCvG,sCNkCuGA,EMlCvG,mEN+1BN;AA7zB6GA,MAAAA,EM1BvG,aNu1BN;AA7zB6GA,MAAAA,EM1BvG,mDNu1BN;AA7zB6GA,MAAAA,EMrB7E,aNk1BhC;AA7zB6GA,MAAAA,EMrB7E,mBNqB6EA,EMrB7E,iENk1BhC;AA7zB6GA,MAAAA,EMbvG,aN00BN;AA7zB6GA,MAAAA,EMbvG,sCNauGA,EMbvG,uEN00BN;AA7zB6GA,MAAAA,EMLvG,aNk0BN;AA7zB6GA,MAAAA,EMLvG,0DNk0BN;AA7zB6GA,MAAAA,EMCzG,aN4zBJ;AA7zB6GA,MAAAA,EMCzG,0BNDyGA,EMCzG,qBNDyGA,EMCzG,2BN4zBJ;AA7zB6GA,MAAAA,EMGzG,aN0zBJ;AA7zB6GA,MAAAA,EMGzG,yBNHyGA,EMGzG,2CN0zBJ;AA7zB6GA,MAAAA,EMMjE,aNuzB5C;AA7zB6GA,MAAAA,EMMjE,0CNuzB5C;AA7zB6GA,MAAAA,EMOzG,aNszBJ;AA7zB6GA,MAAAA,EMOzG,yBNPyGA,EMOzG,yCNszBJ;AAAA;AAAA;AAAA,eAAghFF,EAAE,CAACmF,IAAnhF,EAAimFzC,EAAE,CAACiG,aAApmF,EAAurFjG,EAAE,CAACkG,oBAA1rF,EAAg0FlG,EAAE,CAACmG,kBAAn0F,EAA87FnG,EAAE,CAACoG,oBAAj8F,EAA2rGpG,EAAE,CAACqG,eAA9rG,EAAgxGrG,EAAE,CAACsG,eAAnxG,EAAg5EzH,EAAE,CAAC0H,mBAAn5E,EAA65G1I,EAAE,CAAC6F,kBAAh6G,EAAy1E7E,EAAE,CAAC8D,gBAA51E;AAAA,UAAwpHrF,EAAE,CAACsF,SAA3pH,EAAqrH7E,IAAI,CAAC8E,aAA1rH,EAAktH9E,IAAI,CAAC4F,OAAvtH;AAAA;AAAA;AAAA;;AACA;AAAA,qDA9zB6GnG,EA8zB7G,mBAA2F2Q,uBAA3F,EAAgI,CAAC;AACrHrL,IAAAA,IAAI,EAAErF,SAD+G;AAErHsF,IAAAA,IAAI,EAAE,CAAC;AACCC,MAAAA,QAAQ,EAAE,oBADX;AAECC,MAAAA,WAAW,EAAE,kCAFd;AAGCC,MAAAA,eAAe,EAAExF,uBAAuB,CAACyF,MAH1C;AAICyJ,MAAAA,IAAI,EAAE;AAAEC,QAAAA,KAAK,EAAE;AAAT;AAJP,KAAD;AAF+G,GAAD,CAAhI,EAQ4B,YAAY;AAAE,WAAO,CAAC;AAAE/J,MAAAA,IAAI,EAAEgL;AAAR,KAAD,CAAP;AAAoD,GAR9F;AAAA;;AAUA,MAAMM,oBAAN,CAA2B;;AAE3BA,oBAAoB,CAAC/L,IAArB;AAAA,mBAAiH+L,oBAAjH;AAAA;;AACAA,oBAAoB,CAACvK,IAArB,kBA30B6GrG,EA20B7G;AAAA,QAAkH4Q;AAAlH;AAQAA,oBAAoB,CAACtK,IAArB,kBAn1B6GtG,EAm1B7G;AAAA,aAAmJ,CAC3IW,oBAAoB,CAAC;AACjB4F,IAAAA,aAAa,EAAE;AACXoK,MAAAA,uBAAuB,EAAE;AACrBnK,QAAAA,SAAS,EAAEmK,uBADU;AAErBlK,QAAAA,MAAM,EAAE,CAAC7F,SAAD,CAFa;AAGrB+F,QAAAA,SAAS,EAAE,CACP;AACIsC,UAAAA,OAAO,EAAEqH,8BADb;AAEIpH,UAAAA,QAAQ,EAAEoH,8BAFd;AAGInH,UAAAA,IAAI,EAAE,CAAC9G,kBAAD,EAAqBtB,cAArB,EAAqCE,oBAArC;AAHV,SADO;AAHU;AADd;AADE,GAAD,CADuH,CAAnJ;AAAA,YAgBiB,CACLlB,YADK,EAEL8C,WAFK,EAGLD,mBAHK,EAILpB,aAJK,EAKLd,UALK,EAMLgB,gBANK,EAOLjB,SAPK,EAQLH,YARK,CAhBjB;AAAA;;AA0BA;AAAA,qDA72B6GN,EA62B7G,mBAA2F4Q,oBAA3F,EAA6H,CAAC;AAClHtL,IAAAA,IAAI,EAAEnF,QAD4G;AAElHoF,IAAAA,IAAI,EAAE,CAAC;AACCmB,MAAAA,OAAO,EAAE,CACL3G,YADK,EAEL8C,WAFK,EAGLD,mBAHK,EAILpB,aAJK,EAKLd,UALK,EAMLgB,gBANK,EAOLjB,SAPK,EAQLH,YARK,CADV;AAWCqG,MAAAA,SAAS,EAAE,CACPhG,oBAAoB,CAAC;AACjB4F,QAAAA,aAAa,EAAE;AACXoK,UAAAA,uBAAuB,EAAE;AACrBnK,YAAAA,SAAS,EAAEmK,uBADU;AAErBlK,YAAAA,MAAM,EAAE,CAAC7F,SAAD,CAFa;AAGrB+F,YAAAA,SAAS,EAAE,CACP;AACIsC,cAAAA,OAAO,EAAEqH,8BADb;AAEIpH,cAAAA,QAAQ,EAAEoH,8BAFd;AAGInH,cAAAA,IAAI,EAAE,CAAC9G,kBAAD,EAAqBtB,cAArB,EAAqCE,oBAArC;AAHV,aADO;AAHU;AADd;AADE,OAAD,CADb,CAXZ;AA4BC2F,MAAAA,YAAY,EAAE,CAAC+J,uBAAD;AA5Bf,KAAD;AAF4G,GAAD,CAA7H;AAAA;;AAkCA,MAAME,6BAAN,CAAoC;AAChC9N,EAAAA,WAAW,CAACM,WAAD,EAAcH,oBAAd,EAAoC;AAC3C,SAAKG,WAAL,GAAmBA,WAAnB;AACA,SAAKH,oBAAL,GAA4BA,oBAA5B;AACA,SAAK4N,KAAL,GAAa,KAAKzN,WAAL,CACR6H,GADQ,GAERpH,IAFQ,CAEH5B,MAAM,CAAE6O,IAAD,IAAUzD,OAAO,CAACyD,IAAD,CAAlB,CAFH,CAAb;AAGA,SAAK9J,KAAL,GAAa,IAAIrF,eAAJ,CAAoB,KAApB,CAAb;AACA,SAAKsF,WAAL,GAAmB,KAAK4J,KAAL,CAAWhN,IAAX,CAAgB9B,GAAG,CAAE+O,IAAD,IAAU,KAAK3J,IAAL,CAAU4J,UAAV,CAAqBD,IAArB,CAAX,CAAnB,EAA2D5O,SAAS,CAAE8O,KAAD,IAAW,KAAKhK,KAAjB,CAApE,EAA6FjF,GAAG,CAAEmF,KAAD,IAAYA,KAAK,KAAK,IAAV,GAAiB,KAAKC,IAAL,CAAUC,OAAV,EAAjB,GAAuC,KAAKD,IAAL,CAAUE,MAAV,EAApD,CAAhG,CAAnB;AACA,SAAKwD,OAAL,GAAe,KAAKzH,WAAL,CAAiB0H,SAAjB,EAAf;AACA,SAAK3D,IAAL,GAAY,IAAI3E,SAAJ,CAAc;AACtByO,MAAAA,UAAU,EAAE,IAAIxO,WAAJ,CAAgB,EAAhB,CADU;AAEtBmH,MAAAA,SAAS,EAAE,IAAInH,WAAJ,CAAgB,EAAhB,CAFW;AAGtBoH,MAAAA,SAAS,EAAE,IAAIpH,WAAJ,CAAgB,EAAhB,EAAoBC,UAAU,CAAC6E,QAA/B,CAHW;AAItBuC,MAAAA,QAAQ,EAAE,IAAIrH,WAAJ,CAAgB,EAAhB,EAAoBC,UAAU,CAAC6E,QAA/B;AAJY,KAAd,CAAZ;AAMH;AACD;AACJ;AACA;;;AACI2J,EAAAA,aAAa,GAAG;AACZ,QAAI,CAAC,KAAK/J,IAAL,CAAUO,KAAf,EAAsB;AAClB,WAAKP,IAAL,CAAUQ,gBAAV;AACA;AACH;;AACD,SAAKX,KAAL,CAAWvC,IAAX,CAAgB,IAAhB;AACA,SAAKrB,WAAL,CAAiBwM,MAAjB,CAAwB,KAAKzI,IAAL,CAAUU,KAAlC,EAAyC/D,SAAzC,CAAmD;AAC/CW,MAAAA,IAAI,EAAE,MAAM,KAAKf,SAAL,EADmC;AAE/CiB,MAAAA,KAAK,EAAGA,KAAD,IAAW,KAAKP,OAAL,CAAaO,KAAb;AAF6B,KAAnD;AAIH;;AACDjB,EAAAA,SAAS,GAAG;AACR,SAAKT,oBAAL,CAA0Be,GAA1B,CAA8B;AAC1B8D,MAAAA,GAAG,EAAE;AADqB,KAA9B,EAEGvH,iBAAiB,CAAC0D,qBAFrB;AAGA,SAAK+C,KAAL,CAAWvC,IAAX,CAAgB,KAAhB;AACA,SAAK0C,IAAL,CAAUY,KAAV;AACH;;AACD3D,EAAAA,OAAO,CAAC6D,MAAD,EAAS;AACZ,SAAKjB,KAAL,CAAWvC,IAAX,CAAgB,KAAhB;AACH;;AAxC+B;;AA0CpCmM,6BAA6B,CAAChM,IAA9B;AAAA,mBAA0HgM,6BAA1H,EAz7B6G7Q,EAy7B7G,UAAyKoC,EAAE,CAACG,iBAA5K,GAz7B6GvC,EAy7B7G,UAA0MO,IAAI,CAACU,oBAA/M;AAAA;;AACA4P,6BAA6B,CAACxI,KAA9B,kBA17B6GrI,EA07B7G;AAAA,SAA8H6Q,6BAA9H;AAAA,WAA8HA,6BAA9H;AAAA;;AACA;AAAA,qDA37B6G7Q,EA27B7G,mBAA2F6Q,6BAA3F,EAAsI,CAAC;AAC3HvL,IAAAA,IAAI,EAAElF;AADqH,GAAD,CAAtI,EAE4B,YAAY;AAAE,WAAO,CAAC;AAAEkF,MAAAA,IAAI,EAAElD,EAAE,CAACG;AAAX,KAAD,EAAiC;AAAE+C,MAAAA,IAAI,EAAE/E,IAAI,CAACU;AAAb,KAAjC,CAAP;AAA+E,GAFzH;AAAA;;AAIA,MAAMmQ,sBAAN,CAA6B;AACzBrO,EAAAA,WAAW,CAACwF,OAAD,EAAU;AACjB,SAAKA,OAAL,GAAeA,OAAf;AACA,SAAKnB,IAAL,GAAY,KAAKmB,OAAL,CAAanB,IAAzB;AACA,SAAKF,WAAL,GAAmB,KAAKqB,OAAL,CAAarB,WAAhC;AACA,SAAK4D,OAAL,GAAe,KAAKvC,OAAL,CAAauC,OAA5B;AACH;;AACDtC,EAAAA,QAAQ,GAAG;AACP,SAAKD,OAAL,CAAa4I,aAAb;AACH;;AATwB;;AAW7BC,sBAAsB,CAACvM,IAAvB;AAAA,mBAAmHuM,sBAAnH,EA18B6GpR,EA08B7G,mBAA2J6Q,6BAA3J;AAAA;;AACAO,sBAAsB,CAACpM,IAAvB,kBA38B6GhF,EA28B7G;AAAA,QAAuGoR,sBAAvG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA38B6GpR,MAAAA,EOnE7G,mFP8gCA;AA38B6GA,MAAAA,EA28B7G;AA38B6GA,MAAAA,EOjE7G,6BP4gCA;AA38B6GA,MAAAA,EOjEvG;AAAA,eAAY,cAAZ;AAAA,QP4gCN;AA38B6GA,MAAAA,EOhE3G,2BP2gCF;AA38B6GA,MAAAA,EO/DzG,6BP0gCJ;AA38B6GA,MAAAA,EO/D7E,UP0gChC;AA38B6GA,MAAAA,EA28B7G;AA38B6GA,MAAAA,EO7DvG,ePwgCN;AA38B6GA,MAAAA,EO5DzG,+BPugCJ;AA38B6GA,MAAAA,EO3DvG,+BPsgCN;AA38B6GA,MAAAA,EO3DtF,UPsgCvB;AA38B6GA,MAAAA,EA28B7G;AA38B6GA,MAAAA,EO3D1C,ePsgCnE;AA38B6GA,MAAAA,EO1DvG,6EPqgCN;AA38B6GA,MAAAA,EA28B7G;AA38B6GA,MAAAA,EOvDzG,ePkgCJ;AA38B6GA,MAAAA,EOtD3G,ePigCF;AA38B6GA,MAAAA,EOrD3G,4BPggCF;AA38B6GA,MAAAA,EOpDzG,8BP+/BJ;AA38B6GA,MAAAA,EOpD7E,WP+/BhC;AA38B6GA,MAAAA,EA28B7G;AA38B6GA,MAAAA,EOlDvG,eP6/BN;AA38B6GA,MAAAA,EOjDzG,0BP4/BJ;AA38B6GA,MAAAA,EA28B7G;AA38B6GA,MAAAA,EOvCzG,mCPk/BJ;AA38B6GA,MAAAA,EOlC3G,eP6+BF;AA38B6GA,MAAAA,EOhC3G,4BP2+BF;AA38B6GA,MAAAA,EO/BzG,8BP0+BJ;AA38B6GA,MAAAA,EO/B7E,WP0+BhC;AA38B6GA,MAAAA,EA28B7G;AA38B6GA,MAAAA,EO7BvG,ePw+BN;AA38B6GA,MAAAA,EO5BzG,0BPu+BJ;AA38B6GA,MAAAA,EA28B7G;AA38B6GA,MAAAA,EOpBzG,mCP+9BJ;AA38B6GA,MAAAA,EOf3G,eP09BF;AA38B6GA,MAAAA,EOb3G,4BPw9BF;AA38B6GA,MAAAA,EOZzG,8BPu9BJ;AA38B6GA,MAAAA,EOZ7E,WPu9BhC;AA38B6GA,MAAAA,EA28B7G;AA38B6GA,MAAAA,EOVvG,ePq9BN;AA38B6GA,MAAAA,EOTzG,0BPo9BJ;AA38B6GA,MAAAA,EODzG,mCP48BJ;AA38B6GA,MAAAA,EOI3G,ePu8BF;AA38B6GA,MAAAA,EOM3G,4BPq8BF;AA38B6GA,MAAAA,EA28B7G;AA38B6GA,MAAAA,EOUzG,WPi8BJ;AA38B6GA,MAAAA,EA28B7G;AA38B6GA,MAAAA,EOW3G,ePg8BF;AA38B6GA,MAAAA,EOa3G,iCP87BF;AA38B6GA,MAAAA,EOczG,WP67BJ;AA38B6GA,MAAAA,EA28B7G;AA38B6GA,MAAAA,EOe3G,eP47BF;AA38B6GA,MAAAA,EOgB7G,eP27BA;AAAA;;AAAA;AA38B6GA,MAAAA,EOnEhF,oBPmEgFA,EOnEhF,qCP8gC7B;AA38B6GA,MAAAA,EOjE/E,aP4gC9B;AA38B6GA,MAAAA,EOjE/E,kCP4gC9B;AA38B6GA,MAAAA,EO/D7E,aP0gChC;AA38B6GA,MAAAA,EO/D7E,mBP+D6EA,EO/D7E,+CP0gChC;AA38B6GA,MAAAA,EO3DtF,aPsgCvB;AA38B6GA,MAAAA,EO3DtF,mBP2DsFA,EO3DtF,+CPsgCvB;AA38B6GA,MAAAA,EO1D7E,aPqgChC;AA38B6GA,MAAAA,EO1D7E,uBP0D6EA,EO1D7E,kCPqgChC;AA38B6GA,MAAAA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","sourcesContent":["import * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Component, ChangeDetectionStrategy, NgModule, Injectable } from '@angular/core';\nimport * as i5 from '@angular/router';\nimport { RouterModule } from '@angular/router';\nimport * as i2$1 from '@spartacus/core';\nimport { GlobalMessageType, UrlModule, I18nModule, provideDefaultConfig, AuthGuard, OAuthFlow, NotAuthGuard, RoutingService, AuthConfigService, GlobalMessageService, HttpErrorModel, AuthService, AuthRedirectService } from '@spartacus/core';\nimport * as i2 from '@spartacus/storefront';\nimport { ICON_TYPE, IconModule, SpinnerModule, CustomFormValidators, FormErrorsModule, sortTitles } from '@spartacus/storefront';\nimport { BehaviorSubject, Subscription, combineLatest } from 'rxjs';\nimport { first, tap, map, filter, switchMap } from 'rxjs/operators';\nimport * as i1 from '@spartacus/user/profile/root';\nimport { UserPasswordFacade, UserEmailFacade, UserProfileFacade } from '@spartacus/user/profile/root';\nimport * as i4 from '@angular/forms';\nimport { FormGroup, FormControl, Validators, ReactiveFormsModule, FormsModule } from '@angular/forms';\n\nclass CloseAccountModalComponent {\n    constructor(modalService, authService, globalMessageService, routingService, translationService, userProfile) {\n        this.modalService = modalService;\n        this.authService = authService;\n        this.globalMessageService = globalMessageService;\n        this.routingService = routingService;\n        this.translationService = translationService;\n        this.userProfile = userProfile;\n        this.iconTypes = ICON_TYPE;\n        this.isLoading$ = new BehaviorSubject(false);\n    }\n    ngOnInit() {\n        this.isLoggedIn$ = this.authService.isUserLoggedIn();\n    }\n    onSuccess() {\n        this.dismissModal();\n        this.translationService\n            .translate('closeAccount.accountClosedSuccessfully')\n            .pipe(first())\n            .subscribe((text) => {\n            this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_CONFIRMATION);\n        });\n        this.routingService.go({ cxRoute: 'home' });\n    }\n    onError() {\n        this.dismissModal();\n        this.translationService\n            .translate('closeAccount.accountClosedFailure')\n            .pipe(first())\n            .subscribe((text) => {\n            this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_ERROR);\n        });\n    }\n    dismissModal(reason) {\n        this.modalService.dismissActiveModal(reason);\n    }\n    closeAccount() {\n        this.isLoading$.next(true);\n        this.userProfile.close().subscribe({\n            next: () => {\n                this.onSuccess();\n                this.isLoading$.next(false);\n            },\n            error: () => {\n                this.onError();\n                this.isLoading$.next(false);\n            },\n        });\n    }\n}\nCloseAccountModalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: CloseAccountModalComponent, deps: [{ token: i2.ModalService }, { token: i2$1.AuthService }, { token: i2$1.GlobalMessageService }, { token: i2$1.RoutingService }, { token: i2$1.TranslationService }, { token: i1.UserProfileFacade }], target: i0.ɵɵFactoryTarget.Component });\nCloseAccountModalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.0.5\", type: CloseAccountModalComponent, selector: \"cx-close-account-modal\", ngImport: i0, template: \"<ng-container *ngIf=\\\"isLoggedIn$ | async\\\">\\n  <div class=\\\"modal-header cx-dialog-header\\\">\\n    <h3 class=\\\"modal-title\\\">\\n      {{ 'closeAccount.confirmAccountClosure' | cxTranslate }}\\n    </h3>\\n    <button\\n      type=\\\"button\\\"\\n      class=\\\"close\\\"\\n      [attr.aria-label]=\\\"'common.close' | cxTranslate\\\"\\n      (click)=\\\"dismissModal()\\\"\\n    >\\n      <span aria-hidden=\\\"true\\\">\\n        <cx-icon [type]=\\\"iconTypes.CLOSE\\\"></cx-icon>\\n      </span>\\n    </button>\\n  </div>\\n\\n  <div *ngIf=\\\"isLoading$ | async; else loaded\\\">\\n    <div class=\\\"cx-spinner\\\">\\n      <cx-spinner> </cx-spinner>\\n    </div>\\n  </div>\\n\\n  <ng-template #loaded>\\n    <div class=\\\"modal-body\\\">\\n      <div class=\\\"cx-row\\\">\\n        <p class=\\\"cx-confirmation\\\">\\n          {{ 'closeAccount.confirmAccountClosureMessage' | cxTranslate }}\\n        </p>\\n      </div>\\n      <div class=\\\"cx-row\\\">\\n        <div class=\\\"cx-btn-group\\\">\\n          <button class=\\\"btn btn-primary\\\" (click)=\\\"closeAccount()\\\">\\n            {{ 'closeAccount.closeMyAccount' | cxTranslate }}\\n          </button>\\n          <button (click)=\\\"dismissModal()\\\" class=\\\"btn btn-block btn-secondary\\\">\\n            {{ 'common.cancel' | cxTranslate }}\\n          </button>\\n        </div>\\n      </div>\\n    </div>\\n  </ng-template>\\n</ng-container>\\n\", components: [{ type: i2.IconComponent, selector: \"cx-icon,[cxIcon]\", inputs: [\"cxIcon\", \"type\"] }, { type: i2.SpinnerComponent, selector: \"cx-spinner\" }], directives: [{ type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], pipes: { \"async\": i3.AsyncPipe, \"cxTranslate\": i2$1.TranslatePipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: CloseAccountModalComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cx-close-account-modal',\n                    templateUrl: './close-account-modal.component.html',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                }]\n        }], ctorParameters: function () { return [{ type: i2.ModalService }, { type: i2$1.AuthService }, { type: i2$1.GlobalMessageService }, { type: i2$1.RoutingService }, { type: i2$1.TranslationService }, { type: i1.UserProfileFacade }]; } });\n\nclass CloseAccountComponent {\n    constructor(modalService) {\n        this.modalService = modalService;\n    }\n    openModal() {\n        this.modal = this.modalService.open(CloseAccountModalComponent, {\n            centered: true,\n        }).componentInstance;\n    }\n}\nCloseAccountComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: CloseAccountComponent, deps: [{ token: i2.ModalService }], target: i0.ɵɵFactoryTarget.Component });\nCloseAccountComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.0.5\", type: CloseAccountComponent, selector: \"cx-close-account\", ngImport: i0, template: \"<div class=\\\"col-lg-8 col-md-9\\\">\\n  <div class=\\\"row cx-btn-group\\\">\\n    <div class=\\\"col-sm-3\\\">\\n      <a\\n        [routerLink]=\\\"{ cxRoute: 'home' } | cxUrl\\\"\\n        class=\\\"btn btn-block btn-secondary\\\"\\n        >{{ 'common.cancel' | cxTranslate }}</a\\n      >\\n    </div>\\n    <div class=\\\"col-sm-6\\\">\\n      <button class=\\\"btn btn-primary\\\" (click)=\\\"openModal()\\\">\\n        {{ 'closeAccount.closeMyAccount' | cxTranslate }}\\n      </button>\\n    </div>\\n  </div>\\n</div>\\n\", directives: [{ type: i5.RouterLinkWithHref, selector: \"a[routerLink],area[routerLink]\", inputs: [\"routerLink\", \"target\", \"queryParams\", \"fragment\", \"queryParamsHandling\", \"preserveFragment\", \"skipLocationChange\", \"replaceUrl\", \"state\", \"relativeTo\"] }], pipes: { \"cxUrl\": i2$1.UrlPipe, \"cxTranslate\": i2$1.TranslatePipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: CloseAccountComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cx-close-account',\n                    templateUrl: './close-account.component.html',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                }]\n        }], ctorParameters: function () { return [{ type: i2.ModalService }]; } });\n\nclass CloseAccountModule {\n}\nCloseAccountModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: CloseAccountModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nCloseAccountModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: CloseAccountModule, declarations: [CloseAccountComponent, CloseAccountModalComponent], imports: [CommonModule,\n        RouterModule,\n        UrlModule,\n        I18nModule,\n        IconModule,\n        SpinnerModule] });\nCloseAccountModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: CloseAccountModule, providers: [\n        provideDefaultConfig({\n            cmsComponents: {\n                CloseAccountComponent: {\n                    component: CloseAccountComponent,\n                    guards: [AuthGuard],\n                },\n            },\n        }),\n    ], imports: [[\n            CommonModule,\n            RouterModule,\n            UrlModule,\n            I18nModule,\n            IconModule,\n            SpinnerModule,\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: CloseAccountModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule,\n                        RouterModule,\n                        UrlModule,\n                        I18nModule,\n                        IconModule,\n                        SpinnerModule,\n                    ],\n                    providers: [\n                        provideDefaultConfig({\n                            cmsComponents: {\n                                CloseAccountComponent: {\n                                    component: CloseAccountComponent,\n                                    guards: [AuthGuard],\n                                },\n                            },\n                        }),\n                    ],\n                    declarations: [CloseAccountComponent, CloseAccountModalComponent],\n                }]\n        }] });\n\nclass ForgotPasswordComponentService {\n    constructor(userPasswordService, routingService, authConfigService, globalMessage) {\n        this.userPasswordService = userPasswordService;\n        this.routingService = routingService;\n        this.authConfigService = authConfigService;\n        this.globalMessage = globalMessage;\n        this.busy$ = new BehaviorSubject(false);\n        this.isUpdating$ = this.busy$.pipe(tap((state) => (state === true ? this.form.disable() : this.form.enable())));\n        this.form = new FormGroup({\n            userEmail: new FormControl('', [\n                Validators.required,\n                CustomFormValidators.emailValidator,\n            ]),\n        });\n    }\n    /**\n     * Sends an email to the user to reset the password.\n     *\n     * When the `ResourceOwnerPasswordFlow` is used, the user is routed\n     * to the login page.\n     */\n    requestEmail() {\n        if (!this.form.valid) {\n            this.form.markAllAsTouched();\n            return;\n        }\n        this.busy$.next(true);\n        this.userPasswordService\n            .requestForgotPasswordEmail(this.form.value.userEmail)\n            .subscribe({\n            next: () => this.onSuccess(),\n            error: (error) => this.onError(error),\n        });\n    }\n    onSuccess() {\n        this.globalMessage.add({ key: 'forgottenPassword.passwordResetEmailSent' }, GlobalMessageType.MSG_TYPE_CONFIRMATION);\n        this.busy$.next(false);\n        this.form.reset();\n        this.redirect();\n    }\n    onError(_error) {\n        this.busy$.next(false);\n    }\n    /**\n     * Redirects the user back to the login page.\n     *\n     * This only happens in case of the `ResourceOwnerPasswordFlow` OAuth flow.\n     */\n    redirect() {\n        if (this.authConfigService.getOAuthFlow() ===\n            OAuthFlow.ResourceOwnerPasswordFlow) {\n            this.routingService.go({ cxRoute: 'login' });\n        }\n    }\n}\nForgotPasswordComponentService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: ForgotPasswordComponentService, deps: [{ token: i1.UserPasswordFacade }, { token: i2$1.RoutingService }, { token: i2$1.AuthConfigService }, { token: i2$1.GlobalMessageService }], target: i0.ɵɵFactoryTarget.Injectable });\nForgotPasswordComponentService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: ForgotPasswordComponentService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: ForgotPasswordComponentService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1.UserPasswordFacade }, { type: i2$1.RoutingService }, { type: i2$1.AuthConfigService }, { type: i2$1.GlobalMessageService }]; } });\n\nclass ForgotPasswordComponent {\n    constructor(service) {\n        this.service = service;\n        this.form = this.service.form;\n        this.isUpdating$ = this.service.isUpdating$;\n    }\n    onSubmit() {\n        this.service.requestEmail();\n    }\n}\nForgotPasswordComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: ForgotPasswordComponent, deps: [{ token: ForgotPasswordComponentService }], target: i0.ɵɵFactoryTarget.Component });\nForgotPasswordComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.0.5\", type: ForgotPasswordComponent, selector: \"cx-forgot-password\", ngImport: i0, template: \"<cx-spinner class=\\\"overlay\\\" *ngIf=\\\"isUpdating$ | async\\\"> </cx-spinner>\\n\\n<form (ngSubmit)=\\\"onSubmit()\\\" [formGroup]=\\\"form\\\">\\n  <label>\\n    <span class=\\\"label-content\\\">{{\\n      'forgottenPassword.emailAddress.label' | cxTranslate\\n    }}</span>\\n    <input\\n      aria-required=\\\"true\\\"\\n      type=\\\"email\\\"\\n      class=\\\"form-control\\\"\\n      placeholder=\\\"{{\\n        'forgottenPassword.emailAddress.placeholder' | cxTranslate\\n      }}\\\"\\n      formControlName=\\\"userEmail\\\"\\n    />\\n    <cx-form-errors\\n      aria-live=\\\"assertive\\\"\\n      aria-atomic=\\\"true\\\"\\n      [control]=\\\"form.get('userEmail')\\\"\\n    ></cx-form-errors>\\n  </label>\\n\\n  <a\\n    class=\\\"btn btn-block btn-secondary\\\"\\n    [routerLink]=\\\"{ cxRoute: 'login' } | cxUrl\\\"\\n    >{{ 'common.cancel' | cxTranslate }}</a\\n  >\\n  <button class=\\\"btn btn-block btn-primary\\\" [disabled]=\\\"form.disabled\\\">\\n    {{ 'common.submit' | cxTranslate }}\\n  </button>\\n</form>\\n\", components: [{ type: i2.SpinnerComponent, selector: \"cx-spinner\" }, { type: i2.FormErrorsComponent, selector: \"cx-form-errors\", inputs: [\"prefix\", \"translationParams\", \"control\"] }], directives: [{ type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i4.ɵNgNoValidate, selector: \"form:not([ngNoForm]):not([ngNativeValidate])\" }, { type: i4.NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\" }, { type: i4.FormGroupDirective, selector: \"[formGroup]\", inputs: [\"formGroup\"], outputs: [\"ngSubmit\"], exportAs: [\"ngForm\"] }, { type: i4.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { type: i4.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i4.FormControlName, selector: \"[formControlName]\", inputs: [\"disabled\", \"formControlName\", \"ngModel\"], outputs: [\"ngModelChange\"] }, { type: i5.RouterLinkWithHref, selector: \"a[routerLink],area[routerLink]\", inputs: [\"routerLink\", \"target\", \"queryParams\", \"fragment\", \"queryParamsHandling\", \"preserveFragment\", \"skipLocationChange\", \"replaceUrl\", \"state\", \"relativeTo\"] }], pipes: { \"async\": i3.AsyncPipe, \"cxTranslate\": i2$1.TranslatePipe, \"cxUrl\": i2$1.UrlPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: ForgotPasswordComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cx-forgot-password',\n                    templateUrl: './forgot-password.component.html',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                }]\n        }], ctorParameters: function () { return [{ type: ForgotPasswordComponentService }]; } });\n\nclass ForgotPasswordModule {\n}\nForgotPasswordModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: ForgotPasswordModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nForgotPasswordModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: ForgotPasswordModule, declarations: [ForgotPasswordComponent], imports: [CommonModule,\n        ReactiveFormsModule,\n        RouterModule,\n        UrlModule,\n        I18nModule,\n        FormErrorsModule,\n        SpinnerModule] });\nForgotPasswordModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: ForgotPasswordModule, providers: [\n        provideDefaultConfig({\n            cmsComponents: {\n                ForgotPasswordComponent: {\n                    component: ForgotPasswordComponent,\n                    guards: [NotAuthGuard],\n                    providers: [\n                        {\n                            provide: ForgotPasswordComponentService,\n                            useClass: ForgotPasswordComponentService,\n                            deps: [\n                                UserPasswordFacade,\n                                RoutingService,\n                                AuthConfigService,\n                                GlobalMessageService,\n                            ],\n                        },\n                    ],\n                },\n            },\n        }),\n    ], imports: [[\n            CommonModule,\n            ReactiveFormsModule,\n            RouterModule,\n            UrlModule,\n            I18nModule,\n            FormErrorsModule,\n            SpinnerModule,\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: ForgotPasswordModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule,\n                        ReactiveFormsModule,\n                        RouterModule,\n                        UrlModule,\n                        I18nModule,\n                        FormErrorsModule,\n                        SpinnerModule,\n                    ],\n                    providers: [\n                        provideDefaultConfig({\n                            cmsComponents: {\n                                ForgotPasswordComponent: {\n                                    component: ForgotPasswordComponent,\n                                    guards: [NotAuthGuard],\n                                    providers: [\n                                        {\n                                            provide: ForgotPasswordComponentService,\n                                            useClass: ForgotPasswordComponentService,\n                                            deps: [\n                                                UserPasswordFacade,\n                                                RoutingService,\n                                                AuthConfigService,\n                                                GlobalMessageService,\n                                            ],\n                                        },\n                                    ],\n                                },\n                            },\n                        }),\n                    ],\n                    declarations: [ForgotPasswordComponent],\n                }]\n        }] });\n\nclass RegisterComponent {\n    constructor(userRegister, globalMessageService, fb, router, anonymousConsentsService, anonymousConsentsConfig, authConfigService) {\n        this.userRegister = userRegister;\n        this.globalMessageService = globalMessageService;\n        this.fb = fb;\n        this.router = router;\n        this.anonymousConsentsService = anonymousConsentsService;\n        this.anonymousConsentsConfig = anonymousConsentsConfig;\n        this.authConfigService = authConfigService;\n        this.isLoading$ = new BehaviorSubject(false);\n        this.subscription = new Subscription();\n        this.registerForm = this.fb.group({\n            titleCode: [''],\n            firstName: ['', Validators.required],\n            lastName: ['', Validators.required],\n            email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n            password: [\n                '',\n                [Validators.required, CustomFormValidators.passwordValidator],\n            ],\n            passwordconf: ['', Validators.required],\n            newsletter: new FormControl({\n                value: false,\n                disabled: this.isConsentRequired(),\n            }),\n            termsandconditions: [false, Validators.requiredTrue],\n        }, {\n            validators: CustomFormValidators.passwordsMustMatch('password', 'passwordconf'),\n        });\n    }\n    ngOnInit() {\n        var _a, _b, _c;\n        this.titles$ = this.userRegister.getTitles().pipe(map((titles) => {\n            return titles.sort(sortTitles);\n        }));\n        // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n        this.subscription.add(this.globalMessageService\n            .get()\n            .pipe(filter((messages) => !!Object.keys(messages).length))\n            .subscribe((globalMessageEntities) => {\n            const messages = globalMessageEntities &&\n                globalMessageEntities[GlobalMessageType.MSG_TYPE_ERROR];\n            if (messages &&\n                messages.some((message) => message === 'This field is required.')) {\n                this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n                this.globalMessageService.add({ key: 'register.titleRequired' }, GlobalMessageType.MSG_TYPE_ERROR);\n            }\n        }));\n        const registerConsent = (_c = (_b = (_a = this.anonymousConsentsConfig) === null || _a === void 0 ? void 0 : _a.anonymousConsents) === null || _b === void 0 ? void 0 : _b.registerConsent) !== null && _c !== void 0 ? _c : '';\n        this.anonymousConsent$ = combineLatest([\n            this.anonymousConsentsService.getConsent(registerConsent),\n            this.anonymousConsentsService.getTemplate(registerConsent),\n        ]).pipe(map(([consent, template]) => {\n            return {\n                consent,\n                template: (template === null || template === void 0 ? void 0 : template.description) ? template.description : '',\n            };\n        }));\n        this.subscription.add(\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        this.registerForm.get('newsletter').valueChanges.subscribe(() => {\n            this.toggleAnonymousConsent();\n        }));\n    }\n    submitForm() {\n        if (this.registerForm.valid) {\n            this.registerUser();\n        }\n        else {\n            this.registerForm.markAllAsTouched();\n        }\n    }\n    registerUser() {\n        this.isLoading$.next(true);\n        this.userRegister\n            .register(this.collectDataFromRegisterForm(this.registerForm.value))\n            .subscribe({\n            next: () => this.onRegisterUserSuccess(),\n            complete: () => this.isLoading$.next(false),\n        });\n    }\n    titleSelected(title) {\n        this.registerForm['controls'].titleCode.setValue(title.code);\n    }\n    collectDataFromRegisterForm(formData) {\n        const { firstName, lastName, email, password, titleCode } = formData;\n        return {\n            firstName,\n            lastName,\n            uid: email.toLowerCase(),\n            password,\n            titleCode,\n        };\n    }\n    isConsentGiven(consent) {\n        return this.anonymousConsentsService.isConsentGiven(consent);\n    }\n    isConsentRequired() {\n        var _a, _b, _c, _d;\n        const requiredConsents = (_b = (_a = this.anonymousConsentsConfig) === null || _a === void 0 ? void 0 : _a.anonymousConsents) === null || _b === void 0 ? void 0 : _b.requiredConsents;\n        const registerConsent = (_d = (_c = this.anonymousConsentsConfig) === null || _c === void 0 ? void 0 : _c.anonymousConsents) === null || _d === void 0 ? void 0 : _d.registerConsent;\n        if (requiredConsents && registerConsent) {\n            return requiredConsents.includes(registerConsent);\n        }\n        return false;\n    }\n    onRegisterUserSuccess() {\n        if (this.authConfigService.getOAuthFlow() ===\n            OAuthFlow.ResourceOwnerPasswordFlow) {\n            this.router.go('login');\n        }\n        this.globalMessageService.add({ key: 'register.postRegisterMessage' }, GlobalMessageType.MSG_TYPE_CONFIRMATION);\n    }\n    toggleAnonymousConsent() {\n        var _a, _b;\n        const registerConsent = (_b = (_a = this.anonymousConsentsConfig) === null || _a === void 0 ? void 0 : _a.anonymousConsents) === null || _b === void 0 ? void 0 : _b.registerConsent;\n        if (registerConsent) {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            if (Boolean(this.registerForm.get('newsletter').value)) {\n                this.anonymousConsentsService.giveConsent(registerConsent);\n            }\n            else {\n                this.anonymousConsentsService.withdrawConsent(registerConsent);\n            }\n        }\n    }\n    ngOnDestroy() {\n        this.subscription.unsubscribe();\n    }\n}\nRegisterComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: RegisterComponent, deps: [{ token: i1.UserRegisterFacade }, { token: i2$1.GlobalMessageService }, { token: i4.FormBuilder }, { token: i2$1.RoutingService }, { token: i2$1.AnonymousConsentsService }, { token: i2$1.AnonymousConsentsConfig }, { token: i2$1.AuthConfigService }], target: i0.ɵɵFactoryTarget.Component });\nRegisterComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.0.5\", type: RegisterComponent, selector: \"cx-register\", ngImport: i0, template: \"<section\\n  class=\\\"cx-page-section container\\\"\\n  *ngIf=\\\"!(isLoading$ | async); else loading\\\"\\n>\\n  <div class=\\\"row justify-content-center\\\">\\n    <div class=\\\"col-md-6\\\">\\n      <div class=\\\"cx-section\\\">\\n        <form (ngSubmit)=\\\"submitForm()\\\" [formGroup]=\\\"registerForm\\\">\\n          <div class=\\\"form-group\\\">\\n            <label>\\n              <span class=\\\"label-content\\\">{{\\n                'register.title' | cxTranslate\\n              }}</span>\\n              <select formControlName=\\\"titleCode\\\" class=\\\"form-control\\\">\\n                <option selected value=\\\"\\\" disabled>\\n                  {{ 'register.selectTitle' | cxTranslate }}\\n                </option>\\n                <option\\n                  *ngFor=\\\"let title of titles$ | async\\\"\\n                  [value]=\\\"title.code\\\"\\n                >\\n                  {{ title.name }}\\n                </option>\\n              </select>\\n            </label>\\n          </div>\\n\\n          <div class=\\\"form-group\\\">\\n            <label>\\n              <span class=\\\"label-content\\\">{{\\n                'register.firstName.label' | cxTranslate\\n              }}</span>\\n              <input\\n                aria-required=\\\"true\\\"\\n                class=\\\"form-control\\\"\\n                type=\\\"text\\\"\\n                name=\\\"firstname\\\"\\n                placeholder=\\\"{{\\n                  'register.firstName.placeholder' | cxTranslate\\n                }}\\\"\\n                formControlName=\\\"firstName\\\"\\n              />\\n              <cx-form-errors\\n                aria-live=\\\"assertive\\\"\\n                aria-atomic=\\\"true\\\"\\n                [control]=\\\"registerForm.get('firstName')\\\"\\n              ></cx-form-errors>\\n            </label>\\n          </div>\\n\\n          <div class=\\\"form-group\\\">\\n            <label>\\n              <span class=\\\"label-content\\\">{{\\n                'register.lastName.label' | cxTranslate\\n              }}</span>\\n              <input\\n                aria-required=\\\"true\\\"\\n                class=\\\"form-control\\\"\\n                type=\\\"text\\\"\\n                name=\\\"lastname\\\"\\n                placeholder=\\\"{{\\n                  'register.lastName.placeholder' | cxTranslate\\n                }}\\\"\\n                formControlName=\\\"lastName\\\"\\n              />\\n              <cx-form-errors\\n                aria-live=\\\"assertive\\\"\\n                aria-atomic=\\\"true\\\"\\n                [control]=\\\"registerForm.get('lastName')\\\"\\n              ></cx-form-errors>\\n            </label>\\n          </div>\\n\\n          <div class=\\\"form-group\\\">\\n            <label>\\n              <span class=\\\"label-content\\\">{{\\n                'register.emailAddress.label' | cxTranslate\\n              }}</span>\\n              <input\\n                aria-required=\\\"true\\\"\\n                class=\\\"form-control\\\"\\n                type=\\\"email\\\"\\n                name=\\\"email\\\"\\n                placeholder=\\\"{{\\n                  'register.emailAddress.placeholder' | cxTranslate\\n                }}\\\"\\n                formControlName=\\\"email\\\"\\n              />\\n              <cx-form-errors\\n                aria-live=\\\"assertive\\\"\\n                aria-atomic=\\\"true\\\"\\n                [control]=\\\"registerForm.get('email')\\\"\\n              ></cx-form-errors>\\n            </label>\\n          </div>\\n\\n          <div class=\\\"form-group\\\">\\n            <label>\\n              <span class=\\\"label-content\\\">{{\\n                'register.password.label' | cxTranslate\\n              }}</span>\\n              <input\\n                aria-required=\\\"true\\\"\\n                class=\\\"form-control\\\"\\n                type=\\\"password\\\"\\n                name=\\\"password\\\"\\n                placeholder=\\\"{{\\n                  'register.password.placeholder' | cxTranslate\\n                }}\\\"\\n                formControlName=\\\"password\\\"\\n              />\\n              <cx-form-errors\\n                aria-live=\\\"assertive\\\"\\n                aria-atomic=\\\"true\\\"\\n                [control]=\\\"registerForm.get('password')\\\"\\n              ></cx-form-errors>\\n            </label>\\n          </div>\\n\\n          <div class=\\\"form-group\\\">\\n            <label>\\n              <span class=\\\"label-content\\\">{{\\n                'register.confirmPassword.label' | cxTranslate\\n              }}</span>\\n              <input\\n                aria-required=\\\"true\\\"\\n                class=\\\"form-control\\\"\\n                type=\\\"password\\\"\\n                name=\\\"confirmpassword\\\"\\n                placeholder=\\\"{{\\n                  'register.confirmPassword.placeholder' | cxTranslate\\n                }}\\\"\\n                formControlName=\\\"passwordconf\\\"\\n              />\\n              <cx-form-errors\\n                aria-live=\\\"assertive\\\"\\n                aria-atomic=\\\"true\\\"\\n                [control]=\\\"registerForm.get('passwordconf')\\\"\\n              ></cx-form-errors>\\n            </label>\\n          </div>\\n\\n          <div class=\\\"form-group\\\">\\n            <div class=\\\"form-check\\\">\\n              <label *ngIf=\\\"anonymousConsent$ | async as anonymousConsent\\\">\\n                <input\\n                  type=\\\"checkbox\\\"\\n                  name=\\\"newsletter\\\"\\n                  class=\\\"form-check-input\\\"\\n                  formControlName=\\\"newsletter\\\"\\n                  [checked]=\\\"isConsentGiven(anonymousConsent.consent)\\\"\\n                />\\n                <span class=\\\"form-check-label\\\">\\n                  {{ anonymousConsent.template }}\\n                </span>\\n              </label>\\n            </div>\\n          </div>\\n\\n          <div class=\\\"form-group\\\">\\n            <div class=\\\"form-check\\\">\\n              <label>\\n                <input\\n                  aria-required=\\\"true\\\"\\n                  type=\\\"checkbox\\\"\\n                  name=\\\"termsandconditions\\\"\\n                  formControlName=\\\"termsandconditions\\\"\\n                />\\n                <span class=\\\"form-check-label\\\">\\n                  {{ 'register.confirmThatRead' | cxTranslate }}\\n                  <a\\n                    [routerLink]=\\\"{ cxRoute: 'termsAndConditions' } | cxUrl\\\"\\n                    target=\\\"_blank\\\"\\n                  >\\n                    {{ 'register.termsAndConditions' | cxTranslate }}\\n                  </a>\\n                </span>\\n                <cx-form-errors\\n                  aria-live=\\\"assertive\\\"\\n                  aria-atomic=\\\"true\\\"\\n                  [control]=\\\"registerForm.get('termsandconditions')\\\"\\n                ></cx-form-errors>\\n              </label>\\n            </div>\\n          </div>\\n          <button type=\\\"submit\\\" class=\\\"btn btn-block btn-primary\\\">\\n            {{ 'register.register' | cxTranslate }}\\n          </button>\\n          <a\\n            class=\\\"cx-login-link btn-link\\\"\\n            [routerLink]=\\\"{ cxRoute: 'login' } | cxUrl\\\"\\n            >{{ 'register.signIn' | cxTranslate }}</a\\n          >\\n        </form>\\n      </div>\\n    </div>\\n  </div>\\n</section>\\n\\n<ng-template #loading>\\n  <div class=\\\"cx-spinner\\\"><cx-spinner></cx-spinner></div>\\n</ng-template>\\n\", components: [{ type: i2.FormErrorsComponent, selector: \"cx-form-errors\", inputs: [\"prefix\", \"translationParams\", \"control\"] }, { type: i2.SpinnerComponent, selector: \"cx-spinner\" }], directives: [{ type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i4.ɵNgNoValidate, selector: \"form:not([ngNoForm]):not([ngNativeValidate])\" }, { type: i4.NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\" }, { type: i4.FormGroupDirective, selector: \"[formGroup]\", inputs: [\"formGroup\"], outputs: [\"ngSubmit\"], exportAs: [\"ngForm\"] }, { type: i4.SelectControlValueAccessor, selector: \"select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]\", inputs: [\"compareWith\"] }, { type: i4.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i4.FormControlName, selector: \"[formControlName]\", inputs: [\"disabled\", \"formControlName\", \"ngModel\"], outputs: [\"ngModelChange\"] }, { type: i4.NgSelectOption, selector: \"option\", inputs: [\"ngValue\", \"value\"] }, { type: i4.ɵNgSelectMultipleOption, selector: \"option\", inputs: [\"ngValue\", \"value\"] }, { type: i3.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i4.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { type: i4.CheckboxControlValueAccessor, selector: \"input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]\" }, { type: i5.RouterLinkWithHref, selector: \"a[routerLink],area[routerLink]\", inputs: [\"routerLink\", \"target\", \"queryParams\", \"fragment\", \"queryParamsHandling\", \"preserveFragment\", \"skipLocationChange\", \"replaceUrl\", \"state\", \"relativeTo\"] }], pipes: { \"async\": i3.AsyncPipe, \"cxTranslate\": i2$1.TranslatePipe, \"cxUrl\": i2$1.UrlPipe } });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: RegisterComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cx-register',\n                    templateUrl: './register.component.html',\n                }]\n        }], ctorParameters: function () { return [{ type: i1.UserRegisterFacade }, { type: i2$1.GlobalMessageService }, { type: i4.FormBuilder }, { type: i2$1.RoutingService }, { type: i2$1.AnonymousConsentsService }, { type: i2$1.AnonymousConsentsConfig }, { type: i2$1.AuthConfigService }]; } });\n\nclass RegisterComponentModule {\n}\nRegisterComponentModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: RegisterComponentModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nRegisterComponentModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: RegisterComponentModule, declarations: [RegisterComponent], imports: [CommonModule,\n        ReactiveFormsModule,\n        RouterModule,\n        UrlModule,\n        I18nModule,\n        SpinnerModule,\n        FormErrorsModule] });\nRegisterComponentModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: RegisterComponentModule, providers: [\n        provideDefaultConfig({\n            cmsComponents: {\n                RegisterCustomerComponent: {\n                    component: RegisterComponent,\n                    guards: [NotAuthGuard],\n                },\n            },\n        }),\n    ], imports: [[\n            CommonModule,\n            ReactiveFormsModule,\n            RouterModule,\n            UrlModule,\n            I18nModule,\n            SpinnerModule,\n            FormErrorsModule,\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: RegisterComponentModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule,\n                        ReactiveFormsModule,\n                        RouterModule,\n                        UrlModule,\n                        I18nModule,\n                        SpinnerModule,\n                        FormErrorsModule,\n                    ],\n                    providers: [\n                        provideDefaultConfig({\n                            cmsComponents: {\n                                RegisterCustomerComponent: {\n                                    component: RegisterComponent,\n                                    guards: [NotAuthGuard],\n                                },\n                            },\n                        }),\n                    ],\n                    declarations: [RegisterComponent],\n                }]\n        }] });\n\nclass ResetPasswordComponentService {\n    constructor(userPasswordService, routingService, globalMessage) {\n        this.userPasswordService = userPasswordService;\n        this.routingService = routingService;\n        this.globalMessage = globalMessage;\n        this.busy$ = new BehaviorSubject(false);\n        this.isUpdating$ = this.busy$.pipe(tap((state) => (state === true ? this.form.disable() : this.form.enable())));\n        this.resetToken$ = this.routingService\n            .getRouterState()\n            .pipe(map((routerState) => routerState.state.queryParams['token']));\n        this.form = new FormGroup({\n            password: new FormControl('', [\n                Validators.required,\n                CustomFormValidators.passwordValidator,\n            ]),\n            passwordConfirm: new FormControl('', Validators.required),\n        }, {\n            validators: CustomFormValidators.passwordsMustMatch('password', 'passwordConfirm'),\n        });\n    }\n    /**\n     * Resets the password by the given token.\n     *\n     * The token has been provided during the request password flow.\n     * The token is not validated on the client.\n     */\n    resetPassword(token) {\n        if (!this.form.valid) {\n            this.form.markAllAsTouched();\n            return;\n        }\n        this.busy$.next(true);\n        const password = this.form.get('password').value;\n        this.userPasswordService.reset(token, password).subscribe({\n            next: () => this.onSuccess(),\n            error: (error) => this.onError(error),\n        });\n    }\n    onSuccess() {\n        this.globalMessage.add({ key: 'forgottenPassword.passwordResetSuccess' }, GlobalMessageType.MSG_TYPE_CONFIRMATION);\n        this.busy$.next(false);\n        this.form.reset();\n        this.redirect();\n    }\n    onError(error) {\n        var _a;\n        this.busy$.next(false);\n        if (error instanceof HttpErrorModel) {\n            ((_a = error.details) !== null && _a !== void 0 ? _a : []).forEach((err) => {\n                if (err.message) {\n                    this.globalMessage.add({ raw: err.message }, GlobalMessageType.MSG_TYPE_ERROR);\n                }\n            });\n        }\n    }\n    /**\n     * Redirects the user to the login page.\n     */\n    redirect() {\n        this.routingService.go({ cxRoute: 'login' });\n    }\n}\nResetPasswordComponentService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: ResetPasswordComponentService, deps: [{ token: i1.UserPasswordFacade }, { token: i2$1.RoutingService }, { token: i2$1.GlobalMessageService }], target: i0.ɵɵFactoryTarget.Injectable });\nResetPasswordComponentService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: ResetPasswordComponentService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: ResetPasswordComponentService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1.UserPasswordFacade }, { type: i2$1.RoutingService }, { type: i2$1.GlobalMessageService }]; } });\n\nclass ResetPasswordComponent {\n    constructor(service) {\n        this.service = service;\n        this.form = this.service.form;\n        this.isUpdating$ = this.service.isUpdating$;\n        this.token$ = this.service.resetToken$;\n    }\n    onSubmit(token) {\n        this.service.resetPassword(token);\n    }\n}\nResetPasswordComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: ResetPasswordComponent, deps: [{ token: ResetPasswordComponentService }], target: i0.ɵɵFactoryTarget.Component });\nResetPasswordComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.0.5\", type: ResetPasswordComponent, selector: \"cx-reset-password\", host: { classAttribute: \"user-form\" }, ngImport: i0, template: \"<cx-spinner class=\\\"overlay\\\" *ngIf=\\\"isUpdating$ | async\\\"> </cx-spinner>\\n\\n<form\\n  *ngIf=\\\"token$ | async as token\\\"\\n  (ngSubmit)=\\\"onSubmit(token)\\\"\\n  [formGroup]=\\\"form\\\"\\n>\\n  <label>\\n    <span class=\\\"label-content\\\">{{\\n      'register.newPassword' | cxTranslate\\n    }}</span>\\n    <input\\n      aria-required=\\\"true\\\"\\n      class=\\\"form-control\\\"\\n      type=\\\"password\\\"\\n      placeholder=\\\"{{ 'register.password.placeholder' | cxTranslate }}\\\"\\n      formControlName=\\\"password\\\"\\n    />\\n    <cx-form-errors\\n      aria-live=\\\"assertive\\\"\\n      aria-atomic=\\\"true\\\"\\n      [control]=\\\"form.get('password')\\\"\\n    ></cx-form-errors>\\n  </label>\\n\\n  <label>\\n    <span class=\\\"label-content\\\">{{\\n      'register.passwordMinRequirements' | cxTranslate\\n    }}</span>\\n    <input\\n      aria-required=\\\"true\\\"\\n      class=\\\"form-control\\\"\\n      type=\\\"password\\\"\\n      placeholder=\\\"{{ 'register.confirmPassword.placeholder' | cxTranslate }}\\\"\\n      formControlName=\\\"passwordConfirm\\\"\\n    />\\n    <cx-form-errors\\n      aria-live=\\\"assertive\\\"\\n      aria-atomic=\\\"true\\\"\\n      [control]=\\\"form.get('passwordConfirm')\\\"\\n    ></cx-form-errors>\\n  </label>\\n\\n  <button class=\\\"btn btn-block btn-primary\\\" [disabled]=\\\"form.disabled\\\">\\n    {{ 'register.resetPassword' | cxTranslate }}\\n  </button>\\n</form>\\n\", components: [{ type: i2.SpinnerComponent, selector: \"cx-spinner\" }, { type: i2.FormErrorsComponent, selector: \"cx-form-errors\", inputs: [\"prefix\", \"translationParams\", \"control\"] }], directives: [{ type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i4.ɵNgNoValidate, selector: \"form:not([ngNoForm]):not([ngNativeValidate])\" }, { type: i4.NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\" }, { type: i4.FormGroupDirective, selector: \"[formGroup]\", inputs: [\"formGroup\"], outputs: [\"ngSubmit\"], exportAs: [\"ngForm\"] }, { type: i4.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { type: i4.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i4.FormControlName, selector: \"[formControlName]\", inputs: [\"disabled\", \"formControlName\", \"ngModel\"], outputs: [\"ngModelChange\"] }], pipes: { \"async\": i3.AsyncPipe, \"cxTranslate\": i2$1.TranslatePipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: ResetPasswordComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cx-reset-password',\n                    templateUrl: './reset-password.component.html',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    host: { class: 'user-form' },\n                }]\n        }], ctorParameters: function () { return [{ type: ResetPasswordComponentService }]; } });\n\nclass ResetPasswordModule {\n}\nResetPasswordModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: ResetPasswordModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nResetPasswordModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: ResetPasswordModule, declarations: [ResetPasswordComponent], imports: [CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        RouterModule,\n        I18nModule,\n        FormErrorsModule,\n        SpinnerModule] });\nResetPasswordModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: ResetPasswordModule, providers: [\n        provideDefaultConfig({\n            cmsComponents: {\n                ResetPasswordComponent: {\n                    component: ResetPasswordComponent,\n                    guards: [NotAuthGuard],\n                    providers: [\n                        {\n                            provide: ResetPasswordComponentService,\n                            useClass: ResetPasswordComponentService,\n                            deps: [UserPasswordFacade, RoutingService, GlobalMessageService],\n                        },\n                    ],\n                },\n            },\n        }),\n    ], imports: [[\n            CommonModule,\n            FormsModule,\n            ReactiveFormsModule,\n            RouterModule,\n            I18nModule,\n            FormErrorsModule,\n            SpinnerModule,\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: ResetPasswordModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule,\n                        FormsModule,\n                        ReactiveFormsModule,\n                        RouterModule,\n                        I18nModule,\n                        FormErrorsModule,\n                        SpinnerModule,\n                    ],\n                    providers: [\n                        provideDefaultConfig({\n                            cmsComponents: {\n                                ResetPasswordComponent: {\n                                    component: ResetPasswordComponent,\n                                    guards: [NotAuthGuard],\n                                    providers: [\n                                        {\n                                            provide: ResetPasswordComponentService,\n                                            useClass: ResetPasswordComponentService,\n                                            deps: [UserPasswordFacade, RoutingService, GlobalMessageService],\n                                        },\n                                    ],\n                                },\n                            },\n                        }),\n                    ],\n                    declarations: [ResetPasswordComponent],\n                }]\n        }] });\n\nclass UpdateEmailComponentService {\n    constructor(userEmail, routingService, globalMessageService, authService, authRedirectService) {\n        this.userEmail = userEmail;\n        this.routingService = routingService;\n        this.globalMessageService = globalMessageService;\n        this.authService = authService;\n        this.authRedirectService = authRedirectService;\n        this.busy$ = new BehaviorSubject(false);\n        this.isUpdating$ = this.busy$.pipe(tap((state) => (state === true ? this.form.disable() : this.form.enable())));\n        this.form = new FormGroup({\n            email: new FormControl('', [\n                Validators.required,\n                CustomFormValidators.emailValidator,\n            ]),\n            confirmEmail: new FormControl('', [Validators.required]),\n            password: new FormControl('', [Validators.required]),\n        }, {\n            validators: CustomFormValidators.emailsMustMatch('email', 'confirmEmail'),\n        });\n    }\n    save() {\n        var _a, _b;\n        if (!this.form.valid) {\n            this.form.markAllAsTouched();\n            return;\n        }\n        this.busy$.next(true);\n        const newEmail = (_a = this.form.get('confirmEmail')) === null || _a === void 0 ? void 0 : _a.value;\n        const password = (_b = this.form.get('password')) === null || _b === void 0 ? void 0 : _b.value;\n        this.userEmail.update(password, newEmail).subscribe({\n            next: () => this.onSuccess(newEmail),\n            error: (error) => this.onError(error),\n        });\n    }\n    /**\n     * Handles successful updating of the user email.\n     */\n    onSuccess(newUid) {\n        this.globalMessageService.add({\n            key: 'updateEmailForm.emailUpdateSuccess',\n            params: { newUid },\n        }, GlobalMessageType.MSG_TYPE_CONFIRMATION);\n        this.busy$.next(false);\n        this.form.reset();\n        // sets the redirect url after login\n        this.authRedirectService.setRedirectUrl(this.routingService.getUrl({ cxRoute: 'home' }));\n        // TODO(#9638): Use logout route when it will support passing redirect url\n        this.authService.coreLogout().then(() => {\n            this.routingService.go({ cxRoute: 'login' }, {\n                state: {\n                    newUid,\n                },\n            });\n        });\n    }\n    onError(_error) {\n        this.busy$.next(false);\n    }\n}\nUpdateEmailComponentService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UpdateEmailComponentService, deps: [{ token: i1.UserEmailFacade }, { token: i2$1.RoutingService }, { token: i2$1.GlobalMessageService }, { token: i2$1.AuthService }, { token: i2$1.AuthRedirectService }], target: i0.ɵɵFactoryTarget.Injectable });\nUpdateEmailComponentService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UpdateEmailComponentService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UpdateEmailComponentService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1.UserEmailFacade }, { type: i2$1.RoutingService }, { type: i2$1.GlobalMessageService }, { type: i2$1.AuthService }, { type: i2$1.AuthRedirectService }]; } });\n\nclass UpdateEmailComponent {\n    constructor(service) {\n        this.service = service;\n        this.form = this.service.form;\n        this.isUpdating$ = this.service.isUpdating$;\n    }\n    onSubmit() {\n        this.service.save();\n    }\n}\nUpdateEmailComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UpdateEmailComponent, deps: [{ token: UpdateEmailComponentService }], target: i0.ɵɵFactoryTarget.Component });\nUpdateEmailComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.0.5\", type: UpdateEmailComponent, selector: \"cx-update-email\", host: { classAttribute: \"user-form\" }, ngImport: i0, template: \"<cx-spinner class=\\\"overlay\\\" *ngIf=\\\"isUpdating$ | async\\\"> </cx-spinner>\\n\\n<form (ngSubmit)=\\\"onSubmit()\\\" [formGroup]=\\\"form\\\">\\n  <label>\\n    <span class=\\\"label-content\\\">{{\\n      'updateEmailForm.newEmailAddress.label' | cxTranslate\\n    }}</span>\\n    <input\\n      aria-required=\\\"true\\\"\\n      type=\\\"email\\\"\\n      name=\\\"email\\\"\\n      formControlName=\\\"email\\\"\\n      placeholder=\\\"{{\\n        'updateEmailForm.newEmailAddress.placeholder' | cxTranslate\\n      }}\\\"\\n      class=\\\"form-control\\\"\\n    />\\n    <cx-form-errors\\n      aria-live=\\\"assertive\\\"\\n      aria-atomic=\\\"true\\\"\\n      [control]=\\\"form.get('email')\\\"\\n    ></cx-form-errors>\\n  </label>\\n\\n  <label>\\n    <span class=\\\"label-content\\\">{{\\n      'updateEmailForm.confirmNewEmailAddress.label' | cxTranslate\\n    }}</span>\\n    <input\\n      aria-required=\\\"true\\\"\\n      type=\\\"email\\\"\\n      name=\\\"confirmEmail\\\"\\n      formControlName=\\\"confirmEmail\\\"\\n      placeholder=\\\"{{\\n        'updateEmailForm.confirmNewEmailAddress.placeholder' | cxTranslate\\n      }}\\\"\\n      class=\\\"form-control\\\"\\n    />\\n    <cx-form-errors\\n      aria-live=\\\"assertive\\\"\\n      aria-atomic=\\\"true\\\"\\n      [control]=\\\"form.get('confirmEmail')\\\"\\n    ></cx-form-errors>\\n  </label>\\n\\n  <label>\\n    <span class=\\\"label-content\\\">{{\\n      'updateEmailForm.password.label' | cxTranslate\\n    }}</span>\\n    <input\\n      aria-required=\\\"true\\\"\\n      type=\\\"password\\\"\\n      name=\\\"password\\\"\\n      formControlName=\\\"password\\\"\\n      placeholder=\\\"{{ 'updateEmailForm.password.placeholder' | cxTranslate }}\\\"\\n      class=\\\"form-control\\\"\\n      autocomplete=\\\"new-password\\\"\\n    />\\n    <cx-form-errors\\n      aria-live=\\\"assertive\\\"\\n      aria-atomic=\\\"true\\\"\\n      [control]=\\\"form.get('password')\\\"\\n    ></cx-form-errors>\\n  </label>\\n\\n  <a\\n    class=\\\"btn btn-block btn-secondary\\\"\\n    [routerLink]=\\\"{ cxRoute: 'home' } | cxUrl\\\"\\n  >\\n    {{ 'common.cancel' | cxTranslate }}\\n  </a>\\n\\n  <button class=\\\"btn btn-block btn-primary\\\" [disabled]=\\\"form.disabled\\\">\\n    {{ 'common.save' | cxTranslate }}\\n  </button>\\n</form>\\n\", components: [{ type: i2.SpinnerComponent, selector: \"cx-spinner\" }, { type: i2.FormErrorsComponent, selector: \"cx-form-errors\", inputs: [\"prefix\", \"translationParams\", \"control\"] }], directives: [{ type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i4.ɵNgNoValidate, selector: \"form:not([ngNoForm]):not([ngNativeValidate])\" }, { type: i4.NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\" }, { type: i4.FormGroupDirective, selector: \"[formGroup]\", inputs: [\"formGroup\"], outputs: [\"ngSubmit\"], exportAs: [\"ngForm\"] }, { type: i4.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { type: i4.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i4.FormControlName, selector: \"[formControlName]\", inputs: [\"disabled\", \"formControlName\", \"ngModel\"], outputs: [\"ngModelChange\"] }, { type: i5.RouterLinkWithHref, selector: \"a[routerLink],area[routerLink]\", inputs: [\"routerLink\", \"target\", \"queryParams\", \"fragment\", \"queryParamsHandling\", \"preserveFragment\", \"skipLocationChange\", \"replaceUrl\", \"state\", \"relativeTo\"] }], pipes: { \"async\": i3.AsyncPipe, \"cxTranslate\": i2$1.TranslatePipe, \"cxUrl\": i2$1.UrlPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UpdateEmailComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cx-update-email',\n                    templateUrl: './update-email.component.html',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    host: { class: 'user-form' },\n                }]\n        }], ctorParameters: function () { return [{ type: UpdateEmailComponentService }]; } });\n\nclass UpdateEmailModule {\n}\nUpdateEmailModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UpdateEmailModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nUpdateEmailModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UpdateEmailModule, declarations: [UpdateEmailComponent], imports: [CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        SpinnerModule,\n        UrlModule,\n        RouterModule,\n        I18nModule,\n        FormErrorsModule] });\nUpdateEmailModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UpdateEmailModule, providers: [\n        provideDefaultConfig({\n            cmsComponents: {\n                UpdateEmailComponent: {\n                    component: UpdateEmailComponent,\n                    guards: [AuthGuard],\n                    providers: [\n                        {\n                            provide: UpdateEmailComponentService,\n                            useClass: UpdateEmailComponentService,\n                            deps: [\n                                UserEmailFacade,\n                                RoutingService,\n                                GlobalMessageService,\n                                AuthService,\n                                AuthRedirectService,\n                            ],\n                        },\n                    ],\n                },\n            },\n        }),\n    ], imports: [[\n            CommonModule,\n            FormsModule,\n            ReactiveFormsModule,\n            SpinnerModule,\n            UrlModule,\n            RouterModule,\n            I18nModule,\n            FormErrorsModule,\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UpdateEmailModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule,\n                        FormsModule,\n                        ReactiveFormsModule,\n                        SpinnerModule,\n                        UrlModule,\n                        RouterModule,\n                        I18nModule,\n                        FormErrorsModule,\n                    ],\n                    providers: [\n                        provideDefaultConfig({\n                            cmsComponents: {\n                                UpdateEmailComponent: {\n                                    component: UpdateEmailComponent,\n                                    guards: [AuthGuard],\n                                    providers: [\n                                        {\n                                            provide: UpdateEmailComponentService,\n                                            useClass: UpdateEmailComponentService,\n                                            deps: [\n                                                UserEmailFacade,\n                                                RoutingService,\n                                                GlobalMessageService,\n                                                AuthService,\n                                                AuthRedirectService,\n                                            ],\n                                        },\n                                    ],\n                                },\n                            },\n                        }),\n                    ],\n                    declarations: [UpdateEmailComponent],\n                }]\n        }] });\n\nclass UpdatePasswordComponentService {\n    constructor(userPasswordService, routingService, globalMessageService) {\n        this.userPasswordService = userPasswordService;\n        this.routingService = routingService;\n        this.globalMessageService = globalMessageService;\n        this.busy$ = new BehaviorSubject(false);\n        this.isUpdating$ = this.busy$.pipe(tap((state) => (state === true ? this.form.disable() : this.form.enable())));\n        this.form = new FormGroup({\n            oldPassword: new FormControl('', Validators.required),\n            newPassword: new FormControl('', [\n                Validators.required,\n                CustomFormValidators.passwordValidator,\n            ]),\n            newPasswordConfirm: new FormControl('', Validators.required),\n        }, {\n            validators: CustomFormValidators.passwordsMustMatch('newPassword', 'newPasswordConfirm'),\n        });\n    }\n    /**\n     * Updates the password for the user.\n     */\n    updatePassword() {\n        var _a, _b;\n        if (!this.form.valid) {\n            this.form.markAllAsTouched();\n            return;\n        }\n        this.busy$.next(true);\n        const oldPassword = (_a = this.form.get('oldPassword')) === null || _a === void 0 ? void 0 : _a.value;\n        const newPassword = (_b = this.form.get('newPassword')) === null || _b === void 0 ? void 0 : _b.value;\n        this.userPasswordService.update(oldPassword, newPassword).subscribe({\n            next: () => this.onSuccess(),\n            error: (error) => this.onError(error),\n        });\n    }\n    onSuccess() {\n        this.globalMessageService.add({ key: 'updatePasswordForm.passwordUpdateSuccess' }, GlobalMessageType.MSG_TYPE_CONFIRMATION);\n        this.busy$.next(false);\n        this.form.reset();\n        this.routingService.go({ cxRoute: 'home' });\n    }\n    onError(_error) {\n        this.busy$.next(false);\n        this.form.reset();\n    }\n}\nUpdatePasswordComponentService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UpdatePasswordComponentService, deps: [{ token: i1.UserPasswordFacade }, { token: i2$1.RoutingService }, { token: i2$1.GlobalMessageService }], target: i0.ɵɵFactoryTarget.Injectable });\nUpdatePasswordComponentService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UpdatePasswordComponentService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UpdatePasswordComponentService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1.UserPasswordFacade }, { type: i2$1.RoutingService }, { type: i2$1.GlobalMessageService }]; } });\n\nclass UpdatePasswordComponent {\n    constructor(service) {\n        this.service = service;\n        this.form = this.service.form;\n        this.isUpdating$ = this.service.isUpdating$;\n    }\n    onSubmit() {\n        this.service.updatePassword();\n    }\n}\nUpdatePasswordComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UpdatePasswordComponent, deps: [{ token: UpdatePasswordComponentService }], target: i0.ɵɵFactoryTarget.Component });\nUpdatePasswordComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.0.5\", type: UpdatePasswordComponent, selector: \"cx-update-password\", host: { classAttribute: \"user-form\" }, ngImport: i0, template: \"<cx-spinner class=\\\"overlay\\\" *ngIf=\\\"isUpdating$ | async\\\"> </cx-spinner>\\n\\n<form (ngSubmit)=\\\"onSubmit()\\\" [formGroup]=\\\"form\\\">\\n  <label>\\n    <span class=\\\"label-content\\\">{{\\n      'updatePasswordForm.oldPassword.label' | cxTranslate\\n    }}</span>\\n    <input\\n      aria-required=\\\"true\\\"\\n      class=\\\"form-control\\\"\\n      type=\\\"password\\\"\\n      name=\\\"oldPassword\\\"\\n      placeholder=\\\"{{\\n        'updatePasswordForm.oldPassword.placeholder' | cxTranslate\\n      }}\\\"\\n      formControlName=\\\"oldPassword\\\"\\n    />\\n    <cx-form-errors\\n      aria-live=\\\"assertive\\\"\\n      aria-atomic=\\\"true\\\"\\n      [control]=\\\"form.get('oldPassword')\\\"\\n    ></cx-form-errors>\\n  </label>\\n\\n  <label>\\n    <span class=\\\"label-content\\\">{{\\n      'updatePasswordForm.newPassword.label' | cxTranslate\\n    }}</span>\\n    <input\\n      aria-required=\\\"true\\\"\\n      class=\\\"form-control\\\"\\n      type=\\\"password\\\"\\n      name=\\\"newPassword\\\"\\n      placeholder=\\\"{{\\n        'updatePasswordForm.newPassword.placeholder' | cxTranslate\\n      }}\\\"\\n      formControlName=\\\"newPassword\\\"\\n    />\\n    <cx-form-errors\\n      aria-live=\\\"assertive\\\"\\n      aria-atomic=\\\"true\\\"\\n      [control]=\\\"form.get('newPassword')\\\"\\n    ></cx-form-errors>\\n  </label>\\n\\n  <label>\\n    <span class=\\\"label-content\\\">{{\\n      'updatePasswordForm.confirmPassword.label' | cxTranslate\\n    }}</span>\\n    <input\\n      aria-required=\\\"true\\\"\\n      class=\\\"form-control\\\"\\n      type=\\\"password\\\"\\n      name=\\\"newPasswordConfirm\\\"\\n      placeholder=\\\"{{\\n        'updatePasswordForm.confirmPassword.placeholder' | cxTranslate\\n      }}\\\"\\n      formControlName=\\\"newPasswordConfirm\\\"\\n    />\\n    <cx-form-errors\\n      aria-live=\\\"assertive\\\"\\n      aria-atomic=\\\"true\\\"\\n      [control]=\\\"form.get('newPasswordConfirm')\\\"\\n    ></cx-form-errors>\\n  </label>\\n\\n  <a\\n    class=\\\"btn btn-block btn-secondary\\\"\\n    [routerLink]=\\\"{ cxRoute: 'home' } | cxUrl\\\"\\n  >\\n    {{ 'common.cancel' | cxTranslate }}\\n  </a>\\n\\n  <button class=\\\"btn btn-block btn-primary\\\" [disabled]=\\\"form.disabled\\\">\\n    {{ 'common.save' | cxTranslate }}\\n  </button>\\n</form>\\n\", components: [{ type: i2.SpinnerComponent, selector: \"cx-spinner\" }, { type: i2.FormErrorsComponent, selector: \"cx-form-errors\", inputs: [\"prefix\", \"translationParams\", \"control\"] }], directives: [{ type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i4.ɵNgNoValidate, selector: \"form:not([ngNoForm]):not([ngNativeValidate])\" }, { type: i4.NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\" }, { type: i4.FormGroupDirective, selector: \"[formGroup]\", inputs: [\"formGroup\"], outputs: [\"ngSubmit\"], exportAs: [\"ngForm\"] }, { type: i4.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { type: i4.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i4.FormControlName, selector: \"[formControlName]\", inputs: [\"disabled\", \"formControlName\", \"ngModel\"], outputs: [\"ngModelChange\"] }, { type: i5.RouterLinkWithHref, selector: \"a[routerLink],area[routerLink]\", inputs: [\"routerLink\", \"target\", \"queryParams\", \"fragment\", \"queryParamsHandling\", \"preserveFragment\", \"skipLocationChange\", \"replaceUrl\", \"state\", \"relativeTo\"] }], pipes: { \"async\": i3.AsyncPipe, \"cxTranslate\": i2$1.TranslatePipe, \"cxUrl\": i2$1.UrlPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UpdatePasswordComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cx-update-password',\n                    templateUrl: './update-password.component.html',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    host: { class: 'user-form' },\n                }]\n        }], ctorParameters: function () { return [{ type: UpdatePasswordComponentService }]; } });\n\nclass UpdatePasswordModule {\n}\nUpdatePasswordModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UpdatePasswordModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nUpdatePasswordModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UpdatePasswordModule, declarations: [UpdatePasswordComponent], imports: [CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        SpinnerModule,\n        I18nModule,\n        FormErrorsModule,\n        UrlModule,\n        RouterModule] });\nUpdatePasswordModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UpdatePasswordModule, providers: [\n        provideDefaultConfig({\n            cmsComponents: {\n                UpdatePasswordComponent: {\n                    component: UpdatePasswordComponent,\n                    guards: [AuthGuard],\n                    providers: [\n                        {\n                            provide: UpdatePasswordComponentService,\n                            useClass: UpdatePasswordComponentService,\n                            deps: [UserPasswordFacade, RoutingService, GlobalMessageService],\n                        },\n                    ],\n                },\n            },\n        }),\n    ], imports: [[\n            CommonModule,\n            FormsModule,\n            ReactiveFormsModule,\n            SpinnerModule,\n            I18nModule,\n            FormErrorsModule,\n            UrlModule,\n            RouterModule,\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UpdatePasswordModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule,\n                        FormsModule,\n                        ReactiveFormsModule,\n                        SpinnerModule,\n                        I18nModule,\n                        FormErrorsModule,\n                        UrlModule,\n                        RouterModule,\n                    ],\n                    providers: [\n                        provideDefaultConfig({\n                            cmsComponents: {\n                                UpdatePasswordComponent: {\n                                    component: UpdatePasswordComponent,\n                                    guards: [AuthGuard],\n                                    providers: [\n                                        {\n                                            provide: UpdatePasswordComponentService,\n                                            useClass: UpdatePasswordComponentService,\n                                            deps: [UserPasswordFacade, RoutingService, GlobalMessageService],\n                                        },\n                                    ],\n                                },\n                            },\n                        }),\n                    ],\n                    declarations: [UpdatePasswordComponent],\n                }]\n        }] });\n\nclass UpdateProfileComponentService {\n    constructor(userProfile, globalMessageService) {\n        this.userProfile = userProfile;\n        this.globalMessageService = globalMessageService;\n        this.user$ = this.userProfile\n            .get()\n            .pipe(filter((user) => Boolean(user)));\n        this.busy$ = new BehaviorSubject(false);\n        this.isUpdating$ = this.user$.pipe(tap((user) => this.form.patchValue(user)), switchMap((_user) => this.busy$), tap((state) => (state === true ? this.form.disable() : this.form.enable())));\n        this.titles$ = this.userProfile.getTitles();\n        this.form = new FormGroup({\n            customerId: new FormControl(''),\n            titleCode: new FormControl(''),\n            firstName: new FormControl('', Validators.required),\n            lastName: new FormControl('', Validators.required),\n        });\n    }\n    /**\n     * Updates the user's details and handles the UI.\n     */\n    updateProfile() {\n        if (!this.form.valid) {\n            this.form.markAllAsTouched();\n            return;\n        }\n        this.busy$.next(true);\n        this.userProfile.update(this.form.value).subscribe({\n            next: () => this.onSuccess(),\n            error: (error) => this.onError(error),\n        });\n    }\n    onSuccess() {\n        this.globalMessageService.add({\n            key: 'updateProfileForm.profileUpdateSuccess',\n        }, GlobalMessageType.MSG_TYPE_CONFIRMATION);\n        this.busy$.next(false);\n        this.form.reset();\n    }\n    onError(_error) {\n        this.busy$.next(false);\n    }\n}\nUpdateProfileComponentService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UpdateProfileComponentService, deps: [{ token: i1.UserProfileFacade }, { token: i2$1.GlobalMessageService }], target: i0.ɵɵFactoryTarget.Injectable });\nUpdateProfileComponentService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UpdateProfileComponentService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UpdateProfileComponentService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1.UserProfileFacade }, { type: i2$1.GlobalMessageService }]; } });\n\nclass UpdateProfileComponent {\n    constructor(service) {\n        this.service = service;\n        this.form = this.service.form;\n        this.isUpdating$ = this.service.isUpdating$;\n        this.titles$ = this.service.titles$;\n    }\n    onSubmit() {\n        this.service.updateProfile();\n    }\n}\nUpdateProfileComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UpdateProfileComponent, deps: [{ token: UpdateProfileComponentService }], target: i0.ɵɵFactoryTarget.Component });\nUpdateProfileComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.0.5\", type: UpdateProfileComponent, selector: \"cx-update-profile\", host: { classAttribute: \"user-form\" }, ngImport: i0, template: \"<cx-spinner class=\\\"overlay\\\" *ngIf=\\\"isUpdating$ | async\\\"> </cx-spinner>\\n\\n<form (ngSubmit)=\\\"onSubmit()\\\" [formGroup]=\\\"form\\\">\\n  <label>\\n    <span class=\\\"label-content\\\">{{\\n      'updateProfileForm.title' | cxTranslate\\n    }}</span>\\n    <select formControlName=\\\"titleCode\\\" class=\\\"form-control\\\">\\n      <option value=\\\"\\\">{{ 'updateProfileForm.none' | cxTranslate }}</option>\\n      <option *ngFor=\\\"let title of titles$ | async\\\" [value]=\\\"title.code\\\">\\n        {{ title.name }}\\n      </option>\\n    </select>\\n  </label>\\n  <label>\\n    <span class=\\\"label-content\\\">{{\\n      'updateProfileForm.firstName.label' | cxTranslate\\n    }}</span>\\n    <input\\n      aria-required=\\\"true\\\"\\n      type=\\\"text\\\"\\n      class=\\\"form-control\\\"\\n      name=\\\"firstName\\\"\\n      placeholder=\\\"{{\\n        'updateProfileForm.firstName.placeholder' | cxTranslate\\n      }}\\\"\\n      formControlName=\\\"firstName\\\"\\n    />\\n    <cx-form-errors\\n      aria-live=\\\"assertive\\\"\\n      aria-atomic=\\\"true\\\"\\n      [control]=\\\"form.get('firstName')\\\"\\n    ></cx-form-errors>\\n  </label>\\n\\n  <label>\\n    <span class=\\\"label-content\\\">{{\\n      'updateProfileForm.lastName.label' | cxTranslate\\n    }}</span>\\n    <input\\n      aria-required=\\\"true\\\"\\n      type=\\\"text\\\"\\n      class=\\\"form-control\\\"\\n      name=\\\"lastName\\\"\\n      placeholder=\\\"{{ 'updateProfileForm.lastName.placeholder' | cxTranslate }}\\\"\\n      formControlName=\\\"lastName\\\"\\n    />\\n    <cx-form-errors\\n      aria-live=\\\"assertive\\\"\\n      aria-atomic=\\\"true\\\"\\n      [control]=\\\"form.get('lastName')\\\"\\n    ></cx-form-errors>\\n  </label>\\n\\n  <label>\\n    <span class=\\\"label-content\\\">{{\\n      'updateProfileForm.customerId' | cxTranslate\\n    }}</span>\\n    <input\\n      aria-required=\\\"true\\\"\\n      type=\\\"text\\\"\\n      class=\\\"form-control\\\"\\n      name=\\\"customerId\\\"\\n      formControlName=\\\"customerId\\\"\\n      readonly\\n    />\\n    <cx-form-errors\\n      aria-live=\\\"assertive\\\"\\n      aria-atomic=\\\"true\\\"\\n      [control]=\\\"form.get('lastName')\\\"\\n    ></cx-form-errors>\\n  </label>\\n\\n  <a\\n    class=\\\"btn btn-block btn-secondary\\\"\\n    [routerLink]=\\\"{ cxRoute: 'home' } | cxUrl\\\"\\n  >\\n    {{ 'common.cancel' | cxTranslate }}\\n  </a>\\n\\n  <button class=\\\"btn btn-block btn-primary\\\" [disabled]=\\\"form.disabled\\\">\\n    {{ 'common.save' | cxTranslate }}\\n  </button>\\n</form>\\n\", components: [{ type: i2.SpinnerComponent, selector: \"cx-spinner\" }, { type: i2.FormErrorsComponent, selector: \"cx-form-errors\", inputs: [\"prefix\", \"translationParams\", \"control\"] }], directives: [{ type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i4.ɵNgNoValidate, selector: \"form:not([ngNoForm]):not([ngNativeValidate])\" }, { type: i4.NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\" }, { type: i4.FormGroupDirective, selector: \"[formGroup]\", inputs: [\"formGroup\"], outputs: [\"ngSubmit\"], exportAs: [\"ngForm\"] }, { type: i4.SelectControlValueAccessor, selector: \"select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]\", inputs: [\"compareWith\"] }, { type: i4.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i4.FormControlName, selector: \"[formControlName]\", inputs: [\"disabled\", \"formControlName\", \"ngModel\"], outputs: [\"ngModelChange\"] }, { type: i4.NgSelectOption, selector: \"option\", inputs: [\"ngValue\", \"value\"] }, { type: i4.ɵNgSelectMultipleOption, selector: \"option\", inputs: [\"ngValue\", \"value\"] }, { type: i3.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i4.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { type: i5.RouterLinkWithHref, selector: \"a[routerLink],area[routerLink]\", inputs: [\"routerLink\", \"target\", \"queryParams\", \"fragment\", \"queryParamsHandling\", \"preserveFragment\", \"skipLocationChange\", \"replaceUrl\", \"state\", \"relativeTo\"] }], pipes: { \"async\": i3.AsyncPipe, \"cxTranslate\": i2$1.TranslatePipe, \"cxUrl\": i2$1.UrlPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UpdateProfileComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cx-update-profile',\n                    templateUrl: './update-profile.component.html',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    host: { class: 'user-form' },\n                }]\n        }], ctorParameters: function () { return [{ type: UpdateProfileComponentService }]; } });\n\nclass UpdateProfileModule {\n}\nUpdateProfileModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UpdateProfileModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nUpdateProfileModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UpdateProfileModule, declarations: [UpdateProfileComponent], imports: [CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        SpinnerModule,\n        I18nModule,\n        FormErrorsModule,\n        RouterModule,\n        UrlModule] });\nUpdateProfileModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UpdateProfileModule, providers: [\n        provideDefaultConfig({\n            cmsComponents: {\n                UpdateProfileComponent: {\n                    component: UpdateProfileComponent,\n                    guards: [AuthGuard],\n                    providers: [\n                        {\n                            provide: UpdateProfileComponentService,\n                            useClass: UpdateProfileComponentService,\n                            deps: [UserProfileFacade, GlobalMessageService],\n                        },\n                    ],\n                },\n            },\n        }),\n    ], imports: [[\n            CommonModule,\n            FormsModule,\n            ReactiveFormsModule,\n            SpinnerModule,\n            I18nModule,\n            FormErrorsModule,\n            RouterModule,\n            UrlModule,\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UpdateProfileModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule,\n                        FormsModule,\n                        ReactiveFormsModule,\n                        SpinnerModule,\n                        I18nModule,\n                        FormErrorsModule,\n                        RouterModule,\n                        UrlModule,\n                    ],\n                    providers: [\n                        provideDefaultConfig({\n                            cmsComponents: {\n                                UpdateProfileComponent: {\n                                    component: UpdateProfileComponent,\n                                    guards: [AuthGuard],\n                                    providers: [\n                                        {\n                                            provide: UpdateProfileComponentService,\n                                            useClass: UpdateProfileComponentService,\n                                            deps: [UserProfileFacade, GlobalMessageService],\n                                        },\n                                    ],\n                                },\n                            },\n                        }),\n                    ],\n                    declarations: [UpdateProfileComponent],\n                }]\n        }] });\n\nclass UserProfileComponentsModule {\n}\nUserProfileComponentsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UserProfileComponentsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nUserProfileComponentsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UserProfileComponentsModule, imports: [RegisterComponentModule,\n        UpdateProfileModule,\n        UpdateEmailModule,\n        UpdatePasswordModule,\n        ForgotPasswordModule,\n        ResetPasswordModule,\n        CloseAccountModule] });\nUserProfileComponentsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UserProfileComponentsModule, imports: [[\n            RegisterComponentModule,\n            UpdateProfileModule,\n            UpdateEmailModule,\n            UpdatePasswordModule,\n            ForgotPasswordModule,\n            ResetPasswordModule,\n            CloseAccountModule,\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UserProfileComponentsModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        RegisterComponentModule,\n                        UpdateProfileModule,\n                        UpdateEmailModule,\n                        UpdatePasswordModule,\n                        ForgotPasswordModule,\n                        ResetPasswordModule,\n                        CloseAccountModule,\n                    ],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CloseAccountComponent, CloseAccountModalComponent, CloseAccountModule, ForgotPasswordComponent, ForgotPasswordComponentService, ForgotPasswordModule, RegisterComponent, RegisterComponentModule, ResetPasswordComponent, ResetPasswordComponentService, ResetPasswordModule, UpdateEmailComponent, UpdateEmailComponentService, UpdateEmailModule, UpdatePasswordComponent, UpdatePasswordComponentService, UpdatePasswordModule, UpdateProfileComponent, UpdateProfileComponentService, UpdateProfileModule, UserProfileComponentsModule };\n//# sourceMappingURL=spartacus-user-profile-components.js.map\n",null,null,null,null,null,null,null,null]},"metadata":{},"sourceType":"module"}