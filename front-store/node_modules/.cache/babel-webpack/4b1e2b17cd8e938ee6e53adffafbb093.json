{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, NgModule } from '@angular/core';\nimport * as i1$1 from '@ngrx/effects';\nimport { ofType, Effect, EffectsModule } from '@ngrx/effects';\nimport { RestoreSavedCartEvent, RestoreSavedCartSuccessEvent, RestoreSavedCartFailEvent, DeleteSavedCartEvent, DeleteSavedCartSuccessEvent, DeleteSavedCartFailEvent, SaveCartSuccessEvent, SaveCartFailEvent, SaveCartEvent, EditSavedCartSuccessEvent, EditSavedCartFailEvent, EditSavedCartEvent, CloneSavedCartEvent, CloneSavedCartSuccessEvent, CloneSavedCartFailEvent, SavedCartFacade } from '@spartacus/cart/saved-cart/root';\nimport * as i2 from '@spartacus/core';\nimport { StateUtils, MULTI_CART_DATA, PROCESS_FEATURE, CartActions, createFrom, normalizeHttpError, GlobalMessageType, getWishlistName, isSelectiveCart, ProcessSelectors } from '@spartacus/core';\nimport { of, queueScheduler, EMPTY, combineLatest } from 'rxjs';\nimport { switchMap, withLatestFrom, map, filter, catchError, observeOn, startWith, tap, pluck, shareReplay, distinctUntilChanged } from 'rxjs/operators';\nimport * as i1 from '@ngrx/store';\nimport { select } from '@ngrx/store';\nimport { __decorate } from 'tslib';\n\nclass SavedCartAdapter {}\n\nclass SavedCartConnector {\n  constructor(adapter) {\n    this.adapter = adapter;\n  }\n\n  get(userId, cartId) {\n    return this.adapter.load(userId, cartId);\n  }\n\n  getList(userId) {\n    return this.adapter.loadList(userId);\n  }\n\n  restoreSavedCart(userId, cartId) {\n    return this.adapter.restoreSavedCart(userId, cartId);\n  }\n\n  saveCart(userId, cartId, saveCartName, saveCartDescription) {\n    return this.adapter.saveCart(userId, cartId, saveCartName, saveCartDescription);\n  }\n\n  cloneSavedCart(userId, cartId, saveCartName) {\n    return this.adapter.cloneSavedCart(userId, cartId, saveCartName);\n  }\n\n}\n\nSavedCartConnector.ɵfac = function SavedCartConnector_Factory(t) {\n  return new (t || SavedCartConnector)(i0.ɵɵinject(SavedCartAdapter));\n};\n\nSavedCartConnector.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: SavedCartConnector,\n  factory: SavedCartConnector.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SavedCartConnector, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: SavedCartAdapter\n    }];\n  }, null);\n})();\n\nconst SAVED_CART_LIST_PROCESS_ID = 'saved-cart-list';\nconst SAVED_CART_RESTORE_CART_PROCESS_ID = 'saved-cart-restore-cart';\nconst SAVED_CART_SAVE_CART_PROCESS_ID = 'saved-cart-save-cart';\nconst SAVED_CART_CLONE_CART_PROCESS_ID = 'saved-cart-clone-cart';\nconst LOAD_SAVED_CART = '[Saved Cart] Load Saved Cart';\nconst LOAD_SAVED_CART_SUCCESS = '[Saved Cart] Load Saved Cart Success';\nconst LOAD_SAVED_CART_FAIL = '[Saved Cart] Load Saved Cart Fail';\nconst LOAD_SAVED_CARTS = '[Saved Cart] Load Saved Carts';\nconst LOAD_SAVED_CARTS_SUCCESS = '[Saved Cart] Load Saved Carts Success';\nconst LOAD_SAVED_CARTS_FAIL = '[Saved Cart] Load Saved Carts Fail';\nconst CLEAR_SAVED_CARTS = '[Saved Cart] Clear Saved Carts';\nconst RESTORE_SAVED_CART = '[Saved Cart] Restore Saved Cart';\nconst RESTORE_SAVED_CART_SUCCESS = '[Saved Cart] Restore Saved Cart Success';\nconst RESTORE_SAVED_CART_FAIL = '[Saved Cart] Restore Saved Cart Fail';\nconst CLEAR_RESTORE_SAVED_CART = '[Saved Cart] Clear Restore Saved Cart';\nconst SAVE_CART = '[Saved Cart] Save Cart';\nconst SAVE_CART_SUCCESS = '[Saved Cart] Save Cart Success';\nconst SAVE_CART_FAIL = '[Saved Cart] Save Cart Fail';\nconst CLEAR_SAVE_CART = '[Saved Cart] Clear Save Cart';\nconst EDIT_SAVED_CART = '[Saved Cart] Edit Saved Cart';\nconst EDIT_SAVED_CART_SUCCESS = '[Saved Cart] Edit Saved Cart Success';\nconst EDIT_SAVED_CART_FAIL = '[Saved Cart] Edit Saved Cart Fail';\nconst CLONE_SAVED_CART = '[Saved Cart] Clone Saved Cart';\nconst CLONE_SAVED_CART_SUCCESS = '[Saved Cart] Clone Saved Cart Success';\nconst CLONE_SAVED_CART_FAIL = '[Saved Cart] Clone Saved Cart Fail';\nconst CLEAR_CLONE_SAVED_CART = '[Saved Cart] Clear Clone Saved Cart';\n\nclass LoadSavedCart extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(MULTI_CART_DATA, payload.cartId);\n    this.payload = payload;\n    this.type = LOAD_SAVED_CART;\n  }\n\n}\n\nclass LoadSavedCartSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(MULTI_CART_DATA, payload.cartId);\n    this.payload = payload;\n    this.type = LOAD_SAVED_CART_SUCCESS;\n  }\n\n}\n\nclass LoadSavedCartFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(MULTI_CART_DATA, payload.cartId, payload === null || payload === void 0 ? void 0 : payload.error);\n    this.payload = payload;\n    this.type = LOAD_SAVED_CART_FAIL;\n  }\n\n}\n\nclass LoadSavedCarts extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(PROCESS_FEATURE, SAVED_CART_LIST_PROCESS_ID);\n    this.payload = payload;\n    this.type = LOAD_SAVED_CARTS;\n  }\n\n}\n\nclass LoadSavedCartsSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(PROCESS_FEATURE, SAVED_CART_LIST_PROCESS_ID);\n    this.payload = payload;\n    this.type = LOAD_SAVED_CARTS_SUCCESS;\n  }\n\n}\n\nclass LoadSavedCartsFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(PROCESS_FEATURE, SAVED_CART_LIST_PROCESS_ID, payload.error);\n    this.payload = payload;\n    this.type = LOAD_SAVED_CARTS_FAIL;\n  }\n\n}\n\nclass ClearSavedCarts extends StateUtils.EntityLoaderResetAction {\n  constructor() {\n    super(PROCESS_FEATURE, SAVED_CART_LIST_PROCESS_ID);\n    this.type = CLEAR_SAVED_CARTS;\n  }\n\n}\n\nclass RestoreSavedCart extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(PROCESS_FEATURE, SAVED_CART_RESTORE_CART_PROCESS_ID);\n    this.payload = payload;\n    this.type = RESTORE_SAVED_CART;\n  }\n\n}\n\nclass RestoreSavedCartSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(PROCESS_FEATURE, SAVED_CART_RESTORE_CART_PROCESS_ID);\n    this.payload = payload;\n    this.type = RESTORE_SAVED_CART_SUCCESS;\n  }\n\n}\n\nclass RestoreSavedCartFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(PROCESS_FEATURE, SAVED_CART_RESTORE_CART_PROCESS_ID, payload.error);\n    this.payload = payload;\n    this.type = RESTORE_SAVED_CART_FAIL;\n  }\n\n}\n\nclass ClearRestoreSavedCart extends StateUtils.EntityLoaderResetAction {\n  constructor() {\n    super(PROCESS_FEATURE, SAVED_CART_RESTORE_CART_PROCESS_ID);\n    this.type = CLEAR_RESTORE_SAVED_CART;\n  }\n\n}\n\nclass SaveCart extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(PROCESS_FEATURE, SAVED_CART_SAVE_CART_PROCESS_ID);\n    this.payload = payload;\n    this.type = SAVE_CART;\n  }\n\n}\n\nclass SaveCartSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(PROCESS_FEATURE, SAVED_CART_SAVE_CART_PROCESS_ID);\n    this.payload = payload;\n    this.type = SAVE_CART_SUCCESS;\n  }\n\n}\n\nclass SaveCartFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(PROCESS_FEATURE, SAVED_CART_SAVE_CART_PROCESS_ID, payload.error);\n    this.payload = payload;\n    this.type = SAVE_CART_FAIL;\n  }\n\n}\n\nclass ClearSaveCart extends StateUtils.EntityLoaderResetAction {\n  constructor() {\n    super(PROCESS_FEATURE, SAVED_CART_SAVE_CART_PROCESS_ID);\n    this.type = CLEAR_SAVE_CART;\n  }\n\n}\n\nclass EditSavedCart extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(PROCESS_FEATURE, SAVED_CART_SAVE_CART_PROCESS_ID);\n    this.payload = payload;\n    this.type = EDIT_SAVED_CART;\n  }\n\n}\n\nclass EditSavedCartSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(PROCESS_FEATURE, SAVED_CART_SAVE_CART_PROCESS_ID);\n    this.payload = payload;\n    this.type = EDIT_SAVED_CART_SUCCESS;\n  }\n\n}\n\nclass EditSavedCartFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(PROCESS_FEATURE, SAVED_CART_SAVE_CART_PROCESS_ID, payload.error);\n    this.payload = payload;\n    this.type = EDIT_SAVED_CART_FAIL;\n  }\n\n}\n\nclass CloneSavedCart extends StateUtils.EntityLoadAction {\n  constructor(payload) {\n    super(PROCESS_FEATURE, SAVED_CART_CLONE_CART_PROCESS_ID);\n    this.payload = payload;\n    this.type = CLONE_SAVED_CART;\n  }\n\n}\n\nclass CloneSavedCartSuccess extends StateUtils.EntitySuccessAction {\n  constructor(payload) {\n    super(PROCESS_FEATURE, SAVED_CART_CLONE_CART_PROCESS_ID);\n    this.payload = payload;\n    this.type = CLONE_SAVED_CART_SUCCESS;\n  }\n\n}\n\nclass CloneSavedCartFail extends StateUtils.EntityFailAction {\n  constructor(payload) {\n    super(PROCESS_FEATURE, SAVED_CART_CLONE_CART_PROCESS_ID, payload.error);\n    this.payload = payload;\n    this.type = CLONE_SAVED_CART_FAIL;\n  }\n\n}\n\nclass ClearCloneSavedCart extends StateUtils.EntityLoaderResetAction {\n  constructor() {\n    super(PROCESS_FEATURE, SAVED_CART_CLONE_CART_PROCESS_ID);\n    this.type = CLEAR_CLONE_SAVED_CART;\n  }\n\n}\n\nvar savedCart_action = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  LOAD_SAVED_CART: LOAD_SAVED_CART,\n  LOAD_SAVED_CART_SUCCESS: LOAD_SAVED_CART_SUCCESS,\n  LOAD_SAVED_CART_FAIL: LOAD_SAVED_CART_FAIL,\n  LOAD_SAVED_CARTS: LOAD_SAVED_CARTS,\n  LOAD_SAVED_CARTS_SUCCESS: LOAD_SAVED_CARTS_SUCCESS,\n  LOAD_SAVED_CARTS_FAIL: LOAD_SAVED_CARTS_FAIL,\n  CLEAR_SAVED_CARTS: CLEAR_SAVED_CARTS,\n  RESTORE_SAVED_CART: RESTORE_SAVED_CART,\n  RESTORE_SAVED_CART_SUCCESS: RESTORE_SAVED_CART_SUCCESS,\n  RESTORE_SAVED_CART_FAIL: RESTORE_SAVED_CART_FAIL,\n  CLEAR_RESTORE_SAVED_CART: CLEAR_RESTORE_SAVED_CART,\n  SAVE_CART: SAVE_CART,\n  SAVE_CART_SUCCESS: SAVE_CART_SUCCESS,\n  SAVE_CART_FAIL: SAVE_CART_FAIL,\n  CLEAR_SAVE_CART: CLEAR_SAVE_CART,\n  EDIT_SAVED_CART: EDIT_SAVED_CART,\n  EDIT_SAVED_CART_SUCCESS: EDIT_SAVED_CART_SUCCESS,\n  EDIT_SAVED_CART_FAIL: EDIT_SAVED_CART_FAIL,\n  CLONE_SAVED_CART: CLONE_SAVED_CART,\n  CLONE_SAVED_CART_SUCCESS: CLONE_SAVED_CART_SUCCESS,\n  CLONE_SAVED_CART_FAIL: CLONE_SAVED_CART_FAIL,\n  CLEAR_CLONE_SAVED_CART: CLEAR_CLONE_SAVED_CART,\n  LoadSavedCart: LoadSavedCart,\n  LoadSavedCartSuccess: LoadSavedCartSuccess,\n  LoadSavedCartFail: LoadSavedCartFail,\n  LoadSavedCarts: LoadSavedCarts,\n  LoadSavedCartsSuccess: LoadSavedCartsSuccess,\n  LoadSavedCartsFail: LoadSavedCartsFail,\n  ClearSavedCarts: ClearSavedCarts,\n  RestoreSavedCart: RestoreSavedCart,\n  RestoreSavedCartSuccess: RestoreSavedCartSuccess,\n  RestoreSavedCartFail: RestoreSavedCartFail,\n  ClearRestoreSavedCart: ClearRestoreSavedCart,\n  SaveCart: SaveCart,\n  SaveCartSuccess: SaveCartSuccess,\n  SaveCartFail: SaveCartFail,\n  ClearSaveCart: ClearSaveCart,\n  EditSavedCart: EditSavedCart,\n  EditSavedCartSuccess: EditSavedCartSuccess,\n  EditSavedCartFail: EditSavedCartFail,\n  CloneSavedCart: CloneSavedCart,\n  CloneSavedCartSuccess: CloneSavedCartSuccess,\n  CloneSavedCartFail: CloneSavedCartFail,\n  ClearCloneSavedCart: ClearCloneSavedCart\n});\n\nclass SavedCartEventBuilder {\n  constructor(actionsSubject, eventService, stateEventService, multiCartService) {\n    this.actionsSubject = actionsSubject;\n    this.eventService = eventService;\n    this.stateEventService = stateEventService;\n    this.multiCartService = multiCartService;\n    this.register();\n  }\n  /**\n   * Registers events for the saved cart\n   */\n\n\n  register() {\n    this.registerRestoreSavedCartEvents();\n    this.registerDeleteSavedCartEvents();\n    this.registerSaveCartEvents();\n    this.registerEditSavedCartEvents();\n    this.registerCloneSavedCartEvents();\n  }\n  /**\n   * Registers restore saved cart events\n   */\n\n\n  registerRestoreSavedCartEvents() {\n    this.buildRestoreSavedCartEvents({\n      action: RESTORE_SAVED_CART,\n      event: RestoreSavedCartEvent\n    });\n    this.buildRestoreSavedCartEvents({\n      action: RESTORE_SAVED_CART_SUCCESS,\n      event: RestoreSavedCartSuccessEvent\n    });\n    this.buildRestoreSavedCartEvents({\n      action: RESTORE_SAVED_CART_FAIL,\n      event: RestoreSavedCartFailEvent\n    });\n  }\n  /**\n   * Registers delete saved cart events\n   */\n\n\n  registerDeleteSavedCartEvents() {\n    this.stateEventService.register({\n      action: CartActions.DELETE_CART,\n      event: DeleteSavedCartEvent,\n      factory: action => createFrom(DeleteSavedCartEvent, Object.assign(Object.assign({}, action.payload), {\n        cartCode: action.payload.cartId\n      }))\n    });\n    this.stateEventService.register({\n      action: CartActions.DELETE_CART_SUCCESS,\n      event: DeleteSavedCartSuccessEvent,\n      factory: action => createFrom(DeleteSavedCartSuccessEvent, Object.assign(Object.assign({}, action.payload), {\n        cartCode: action.payload.cartId\n      }))\n    });\n    this.stateEventService.register({\n      action: CartActions.DELETE_CART_FAIL,\n      event: DeleteSavedCartFailEvent,\n      factory: action => createFrom(DeleteSavedCartFailEvent, Object.assign(Object.assign({}, action.payload), {\n        cartCode: action.payload.cartId\n      }))\n    });\n  }\n  /**\n   * Registers save cart events\n   */\n\n\n  registerSaveCartEvents() {\n    this.buildSaveCartSuccessEvent({\n      action: SAVE_CART_SUCCESS,\n      event: SaveCartSuccessEvent\n    });\n    this.stateEventService.register({\n      action: SAVE_CART_FAIL,\n      event: SaveCartFailEvent,\n      factory: action => createFrom(SaveCartFailEvent, Object.assign(Object.assign({}, action.payload), {\n        cartCode: action.payload.cartId\n      }))\n    });\n    this.stateEventService.register({\n      action: SAVE_CART,\n      event: SaveCartEvent,\n      factory: action => {\n        return createFrom(SaveCartEvent, Object.assign(Object.assign({}, action.payload), {\n          cartCode: action.payload.cartId\n        }));\n      }\n    });\n  }\n  /**\n   * Registers edit saved cart events\n   */\n\n\n  registerEditSavedCartEvents() {\n    this.buildSaveCartSuccessEvent({\n      action: EDIT_SAVED_CART_SUCCESS,\n      event: EditSavedCartSuccessEvent\n    });\n    this.stateEventService.register({\n      action: EDIT_SAVED_CART_FAIL,\n      event: EditSavedCartFailEvent,\n      factory: action => createFrom(EditSavedCartFailEvent, Object.assign(Object.assign({}, action.payload), {\n        cartCode: action.payload.cartId\n      }))\n    });\n    this.stateEventService.register({\n      action: EDIT_SAVED_CART,\n      event: EditSavedCartEvent,\n      factory: action => {\n        return createFrom(EditSavedCartEvent, Object.assign(Object.assign({}, action.payload), {\n          cartCode: action.payload.cartId\n        }));\n      }\n    });\n  }\n  /**\n   * Registers clone saved cart events\n   */\n\n\n  registerCloneSavedCartEvents() {\n    this.buildRestoreSavedCartEvents({\n      action: CLONE_SAVED_CART,\n      event: CloneSavedCartEvent\n    });\n    this.buildRestoreSavedCartEvents({\n      action: CLONE_SAVED_CART_SUCCESS,\n      event: CloneSavedCartSuccessEvent\n    });\n    this.buildRestoreSavedCartEvents({\n      action: CLONE_SAVED_CART_FAIL,\n      event: CloneSavedCartFailEvent\n    });\n  }\n  /**\n   * Builds the restore save cart events from the action and cart\n   *\n   * @param mapping mapping declaration from `action` string type to `event` class type\n   * @param saveTime should the saveTime attribute be added to the event\n   * @returns\n   */\n\n\n  buildRestoreSavedCartEvents(mapping) {\n    const eventStream$ = this.getAction(mapping.action).pipe(switchMap(action => of(action).pipe(withLatestFrom(this.multiCartService.getCart(action.payload.cartId)))), map(([action, cart]) => createFrom(mapping.event, Object.assign(Object.assign(Object.assign({}, action.payload), {\n      cartCode: cart.code,\n      saveCartName: cart.name,\n      saveCartDescription: cart.description\n    }), cart.saveTime && {\n      saveTime: cart.saveTime\n    }))));\n    return this.eventService.register(mapping.event, eventStream$);\n  }\n  /**\n   * Builds save cart event by adding the saveTime from the cart\n   *\n   * @param mapping mapping declaration from `action` string type to `event` class type\n   * @returns events register function\n   */\n\n\n  buildSaveCartSuccessEvent(mapping) {\n    const eventStream$ = this.getAction(mapping.action).pipe(switchMap(action => of(action).pipe(withLatestFrom(this.multiCartService.getCart(action.payload.cartId)))), filter(([, cart]) => Boolean(cart)), map(([action, cart]) => createFrom(mapping.event, Object.assign(Object.assign({}, action.payload), {\n      cartCode: cart.code,\n      saveTime: cart.saveTime\n    }))));\n    return this.eventService.register(mapping.event, eventStream$);\n  }\n  /**\n   * Returns a stream of actions only of a given type(s)\n   *\n   * @param actionType type(s) of actions\n   */\n\n\n  getAction(actionType) {\n    return this.actionsSubject.pipe(ofType(...[].concat(actionType)));\n  }\n\n}\n\nSavedCartEventBuilder.ɵfac = function SavedCartEventBuilder_Factory(t) {\n  return new (t || SavedCartEventBuilder)(i0.ɵɵinject(i1.ActionsSubject), i0.ɵɵinject(i2.EventService), i0.ɵɵinject(i2.StateEventService), i0.ɵɵinject(i2.MultiCartService));\n};\n\nSavedCartEventBuilder.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: SavedCartEventBuilder,\n  factory: SavedCartEventBuilder.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SavedCartEventBuilder, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.ActionsSubject\n    }, {\n      type: i2.EventService\n    }, {\n      type: i2.StateEventService\n    }, {\n      type: i2.MultiCartService\n    }];\n  }, null);\n})();\n\nclass SavedCartEventsModule {\n  constructor(_savedCartEventBuilder) {}\n\n}\n\nSavedCartEventsModule.ɵfac = function SavedCartEventsModule_Factory(t) {\n  return new (t || SavedCartEventsModule)(i0.ɵɵinject(SavedCartEventBuilder));\n};\n\nSavedCartEventsModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: SavedCartEventsModule\n});\nSavedCartEventsModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SavedCartEventsModule, [{\n    type: NgModule,\n    args: [{}]\n  }], function () {\n    return [{\n      type: SavedCartEventBuilder\n    }];\n  }, null);\n})();\n\nclass SavedCartEffects {\n  constructor(actions$, savedCartConnector, activeCartService, globalMessageService) {\n    this.actions$ = actions$;\n    this.savedCartConnector = savedCartConnector;\n    this.activeCartService = activeCartService;\n    this.globalMessageService = globalMessageService;\n    this.loadSavedCart$ = this.actions$.pipe(ofType(LOAD_SAVED_CART), map(action => action.payload), switchMap(({\n      userId,\n      cartId\n    }) => this.savedCartConnector.get(userId, cartId).pipe(switchMap(savedCart => {\n      return [new CartActions.LoadCartSuccess({\n        userId,\n        cartId,\n        cart: savedCart\n      }), new LoadSavedCartSuccess({\n        userId,\n        cartId\n      })];\n    }), catchError(error => of(new LoadSavedCartFail({\n      userId,\n      cartId,\n      error: normalizeHttpError(error)\n    }))))));\n    this.loadSavedCarts$ = this.actions$.pipe(ofType(LOAD_SAVED_CARTS), map(action => action.payload), switchMap(({\n      userId\n    }) => this.savedCartConnector.getList(userId).pipe(switchMap(savedCarts => {\n      return [new CartActions.LoadCartsSuccess(savedCarts), new LoadSavedCartsSuccess({\n        userId\n      })];\n    }), catchError(error => of(new LoadSavedCartsFail({\n      userId,\n      error: normalizeHttpError(error)\n    }))))));\n    this.restoreSavedCart$ = this.actions$.pipe(ofType(RESTORE_SAVED_CART), map(action => action.payload), withLatestFrom(this.activeCartService.getActive()), switchMap(([{\n      userId,\n      cartId\n    }, activeCart]) => {\n      var _a;\n\n      const actions = [];\n\n      if (((_a = activeCart === null || activeCart === void 0 ? void 0 : activeCart.entries) !== null && _a !== void 0 ? _a : []).length > 0) {\n        if (activeCart.code) {\n          /**\n           * Instead of calling the SaveCartAction, we are calling the edit saved cart\n           * because we do not want to clear the state when we swap carts between active and saved cart\n           */\n          actions.push(new EditSavedCart({\n            userId,\n            cartId: activeCart.code,\n            saveCartName: '',\n            saveCartDescription: ''\n          }));\n        }\n      }\n\n      return this.savedCartConnector.restoreSavedCart(userId, cartId).pipe(switchMap(savedCart => {\n        var _a;\n\n        this.globalMessageService.add({\n          key: ((_a = activeCart === null || activeCart === void 0 ? void 0 : activeCart.entries) !== null && _a !== void 0 ? _a : []).length > 0 ? 'savedCartList.swapCartWithActiveCart' : 'savedCartList.swapCartNoActiveCart',\n          params: {\n            cartName: cartId,\n            previousCartName: activeCart.code\n          }\n        }, GlobalMessageType.MSG_TYPE_CONFIRMATION);\n        return [...actions, new CartActions.SetActiveCartId(cartId), new CartActions.LoadCartSuccess({\n          userId,\n          cartId,\n          cart: savedCart\n        }), new RestoreSavedCartSuccess({\n          userId,\n          cartId\n        })];\n      }), catchError(error => of(new RestoreSavedCartFail({\n        userId,\n        cartId,\n        error: normalizeHttpError(error)\n      }))));\n    }));\n    this.saveCart$ = this.actions$.pipe(ofType(SAVE_CART), map(action => action.payload), switchMap(({\n      userId,\n      cartId,\n      saveCartName,\n      saveCartDescription\n    }) => {\n      return this.savedCartConnector.saveCart(userId, cartId, saveCartName, saveCartDescription).pipe(switchMap(savedCart => {\n        return [new CartActions.ClearCartState(), new CartActions.LoadCartSuccess({\n          userId,\n          cartId,\n          cart: savedCart\n        }), new SaveCartSuccess({\n          userId,\n          cartId,\n          saveCartName,\n          saveCartDescription\n        })];\n      }), catchError(error => of(new SaveCartFail({\n        userId,\n        cartId,\n        saveCartName,\n        saveCartDescription,\n        error: normalizeHttpError(error)\n      }))));\n    }));\n    this.editSavedCart$ = this.actions$.pipe(ofType(EDIT_SAVED_CART), map(action => action.payload), switchMap(({\n      userId,\n      cartId,\n      saveCartName,\n      saveCartDescription\n    }) => {\n      return this.savedCartConnector.saveCart(userId, cartId, saveCartName, saveCartDescription).pipe(switchMap(savedCart => {\n        return [new CartActions.LoadCartSuccess({\n          userId,\n          cartId,\n          cart: savedCart\n        }), new EditSavedCartSuccess({\n          userId,\n          cartId,\n          saveCartName,\n          saveCartDescription\n        })];\n      }), catchError(error => of(new EditSavedCartFail({\n        userId,\n        cartId,\n        saveCartName,\n        saveCartDescription,\n        error: normalizeHttpError(error)\n      }))));\n    }));\n    this.cloneSavedCart$ = this.actions$.pipe(ofType(CLONE_SAVED_CART), map(action => action.payload), switchMap(({\n      userId,\n      cartId,\n      saveCartName\n    }) => {\n      return this.savedCartConnector.cloneSavedCart(userId, cartId, saveCartName).pipe(switchMap(_ => {\n        return [new CloneSavedCartSuccess({\n          userId,\n          cartId,\n          saveCartName\n        }), new RestoreSavedCart({\n          userId,\n          cartId\n        }), new LoadSavedCarts({\n          userId\n        })];\n      }), catchError(error => of(new CloneSavedCartFail({\n        userId,\n        cartId,\n        saveCartName,\n        error: normalizeHttpError(error)\n      }))));\n    }));\n  }\n\n}\n\nSavedCartEffects.ɵfac = function SavedCartEffects_Factory(t) {\n  return new (t || SavedCartEffects)(i0.ɵɵinject(i1$1.Actions), i0.ɵɵinject(SavedCartConnector), i0.ɵɵinject(i2.ActiveCartService), i0.ɵɵinject(i2.GlobalMessageService));\n};\n\nSavedCartEffects.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: SavedCartEffects,\n  factory: SavedCartEffects.ɵfac\n});\n\n__decorate([Effect()], SavedCartEffects.prototype, \"loadSavedCart$\", void 0);\n\n__decorate([Effect()], SavedCartEffects.prototype, \"loadSavedCarts$\", void 0);\n\n__decorate([Effect()], SavedCartEffects.prototype, \"restoreSavedCart$\", void 0);\n\n__decorate([Effect()], SavedCartEffects.prototype, \"saveCart$\", void 0);\n\n__decorate([Effect()], SavedCartEffects.prototype, \"editSavedCart$\", void 0);\n\n__decorate([Effect()], SavedCartEffects.prototype, \"cloneSavedCart$\", void 0);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SavedCartEffects, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i1$1.Actions\n    }, {\n      type: SavedCartConnector\n    }, {\n      type: i2.ActiveCartService\n    }, {\n      type: i2.GlobalMessageService\n    }];\n  }, {\n    loadSavedCart$: [],\n    loadSavedCarts$: [],\n    restoreSavedCart$: [],\n    saveCart$: [],\n    editSavedCart$: [],\n    cloneSavedCart$: []\n  });\n})();\n\nconst effects = [SavedCartEffects];\n\nclass SavedCartStoreModule {}\n\nSavedCartStoreModule.ɵfac = function SavedCartStoreModule_Factory(t) {\n  return new (t || SavedCartStoreModule)();\n};\n\nSavedCartStoreModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: SavedCartStoreModule\n});\nSavedCartStoreModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[EffectsModule.forFeature(effects)]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SavedCartStoreModule, [{\n    type: NgModule,\n    args: [{\n      imports: [EffectsModule.forFeature(effects)]\n    }]\n  }], null, null);\n})();\n\nclass SavedCartService {\n  constructor(store, userIdService, userService, multiCartService, eventService) {\n    this.store = store;\n    this.userIdService = userIdService;\n    this.userService = userService;\n    this.multiCartService = multiCartService;\n    this.eventService = eventService;\n  }\n  /**\n   * Loads a single saved cart\n   */\n\n\n  loadSavedCart(cartId) {\n    this.userIdService.takeUserId(true).subscribe(userId => {\n      return this.store.dispatch(new LoadSavedCart({\n        userId,\n        cartId\n      }));\n    }, () => {// TODO: for future releases, refactor this part to thrown errors\n    });\n  }\n  /**\n   * Gets a single saved cart\n   * it won't emit if the delete saved cart event gets triggered to avoid race condition between actions\n   *\n   * @param cartId\n   * @returns observable with cart\n   */\n\n\n  get(cartId) {\n    return this.getSavedCart(cartId).pipe(observeOn(queueScheduler), withLatestFrom(this.eventService.get(DeleteSavedCartEvent).pipe(startWith({}))), filter(([state, _event]) => !!state), tap(([state, event]) => {\n      if (Object.keys(event).length > 0) {\n        return EMPTY;\n      }\n\n      if (!(state.loading || state.success || state.error)) {\n        this.loadSavedCart(cartId);\n      }\n    }), filter(([state]) => state.success || !!state.error), map(([state]) => state.value));\n  }\n  /**\n   * Gets the selected cart state\n   *\n   * @param cartId\n   * @returns observable of selected cart with loader state\n   */\n\n\n  getSavedCart(cartId) {\n    return this.multiCartService.getCartEntity(cartId);\n  }\n  /**\n   * Returns true when there are no operations on that in progress and it is not currently loading\n   *\n   * @param cartId\n   */\n\n\n  isStable(cartId) {\n    return this.multiCartService.isStable(cartId);\n  }\n  /**\n   * Loads a list of saved carts\n   */\n\n\n  loadSavedCarts() {\n    this.userIdService.takeUserId(true).subscribe(userId => {\n      return this.store.dispatch(new LoadSavedCarts({\n        userId\n      }));\n    }, () => {// TODO: for future releases, refactor this part to thrown errors\n    });\n  }\n  /**\n   * Gets a list of saved carts\n   *\n   * @returns observable with list of saved carts\n   */\n\n\n  getList() {\n    return this.getSavedCartList().pipe(withLatestFrom(this.getSavedCartListProcess()), tap(([_, state]) => {\n      if (!(state.loading || state.success || state.error)) {\n        this.loadSavedCarts();\n      }\n    }), pluck(0), shareReplay({\n      bufferSize: 1,\n      refCount: true\n    }));\n  }\n  /**\n   * Gets a list of saved carts from all carts in the state\n   * by filtering through the carts that are not wishlist and not saved cart\n   *\n   * @returns observable with list of saved carts\n   */\n\n\n  getSavedCartList() {\n    return combineLatest([this.multiCartService.getCarts(), this.userService.get()]).pipe(distinctUntilChanged(), map(([carts, user]) => carts.filter(cart => ((user === null || user === void 0 ? void 0 : user.customerId) !== undefined ? (cart === null || cart === void 0 ? void 0 : cart.name) !== getWishlistName(user === null || user === void 0 ? void 0 : user.customerId) : true) && !isSelectiveCart(cart === null || cart === void 0 ? void 0 : cart.code) && (cart === null || cart === void 0 ? void 0 : cart.saveTime))));\n  }\n  /**\n   * Gets the loading flag of getting a list of saved carts\n   *\n   * @returns observable with boolean of the loading state\n   */\n\n\n  getSavedCartListProcessLoading() {\n    return this.store.pipe(select(ProcessSelectors.getProcessLoadingFactory(SAVED_CART_LIST_PROCESS_ID)));\n  }\n  /**\n   * Gets the loading state of getting a list of saved carts\n   *\n   * @returns observable with boolean of the loader state\n   */\n\n\n  getSavedCartListProcess() {\n    return this.store.pipe(select(ProcessSelectors.getProcessStateFactory(SAVED_CART_LIST_PROCESS_ID)));\n  }\n  /**\n   * Clears the process state of performing a saved cart\n   */\n\n\n  clearSavedCarts() {\n    this.store.dispatch(new ClearSavedCarts());\n  }\n  /**\n   * Triggers a restore saved cart\n   *\n   * @param cartId\n   */\n\n\n  restoreSavedCart(cartId) {\n    this.userIdService.takeUserId(true).subscribe(userId => {\n      return this.store.dispatch(new RestoreSavedCart({\n        userId,\n        cartId\n      }));\n    }, () => {// TODO: for future releases, refactor this part to thrown errors\n    });\n  }\n  /**\n   * Gets the loading state of restoring saved cart\n   *\n   * @returns observable with boolean of the loading state\n   */\n\n\n  getRestoreSavedCartProcessLoading() {\n    return this.store.pipe(select(ProcessSelectors.getProcessLoadingFactory(SAVED_CART_RESTORE_CART_PROCESS_ID)));\n  }\n  /**\n   * Gets the success state of restoring saved cart\n   *\n   * @returns observable with boolean of the success state\n   */\n\n\n  getRestoreSavedCartProcessSuccess() {\n    return this.store.pipe(select(ProcessSelectors.getProcessSuccessFactory(SAVED_CART_RESTORE_CART_PROCESS_ID)));\n  }\n  /**\n   * Gets the error state of restoring saved cart\n   *\n   * @returns observable with boolean of the error state\n   */\n\n\n  getRestoreSavedCartProcessError() {\n    return this.store.pipe(select(ProcessSelectors.getProcessErrorFactory(SAVED_CART_RESTORE_CART_PROCESS_ID)));\n  }\n  /**\n   * Clears the process state of performing a restore saved cart\n   */\n\n\n  clearRestoreSavedCart() {\n    this.store.dispatch(new ClearRestoreSavedCart());\n  }\n  /**\n   * Triggers delete saved cart\n   * @param cartId\n   */\n\n\n  deleteSavedCart(cartId) {\n    this.userIdService.takeUserId(true).subscribe(userId => {\n      return this.multiCartService.deleteCart(cartId, userId);\n    }, () => {// TODO: for future releases, refactor this part to thrown errors\n    });\n  }\n  /**\n   * Triggers a saved cart\n   *\n   */\n\n\n  saveCart({\n    cartId,\n    saveCartName,\n    saveCartDescription\n  }) {\n    this.userIdService.takeUserId(true).subscribe(userId => {\n      return this.store.dispatch(new SaveCart({\n        userId,\n        cartId,\n        saveCartName,\n        saveCartDescription\n      }));\n    }, () => {// TODO: for future releases, refactor this part to thrown errors\n    });\n  }\n  /**\n   * Gets the loading state of saving a cart\n   *\n   * @returns observable with boolean of the loading state\n   */\n\n\n  getSaveCartProcessLoading() {\n    return this.store.pipe(select(ProcessSelectors.getProcessLoadingFactory(SAVED_CART_SAVE_CART_PROCESS_ID)));\n  }\n  /**\n   * Gets the success state of saving a cart\n   *\n   * @returns observable with boolean of the success state\n   */\n\n\n  getSaveCartProcessSuccess() {\n    return this.store.pipe(select(ProcessSelectors.getProcessSuccessFactory(SAVED_CART_SAVE_CART_PROCESS_ID)));\n  }\n  /**\n   * Gets the error state of saving a cart\n   *\n   * @returns observable with boolean of the error state\n   */\n\n\n  getSaveCartProcessError() {\n    return this.store.pipe(select(ProcessSelectors.getProcessErrorFactory(SAVED_CART_SAVE_CART_PROCESS_ID)));\n  }\n  /**\n   * Clears the process state of performing a save cart\n   */\n\n\n  clearSaveCart() {\n    this.store.dispatch(new ClearSaveCart());\n  }\n  /**\n   * Triggers an edit saved cart\n   *\n   */\n\n\n  editSavedCart({\n    cartId,\n    saveCartName,\n    saveCartDescription\n  }) {\n    this.userIdService.takeUserId(true).subscribe(userId => {\n      return this.store.dispatch(new EditSavedCart({\n        userId,\n        cartId,\n        saveCartName,\n        saveCartDescription\n      }));\n    }, () => {// TODO: for future releases, refactor this part to thrown errors\n    });\n  }\n  /**\n   * Triggers a clone saved cart\n   *\n   * @param cartId\n   */\n\n\n  cloneSavedCart(cartId, saveCartName) {\n    this.userIdService.takeUserId(true).subscribe(userId => {\n      return this.store.dispatch(new CloneSavedCart({\n        userId,\n        cartId,\n        saveCartName\n      }));\n    }, () => {// TODO: for future releases, refactor this part to thrown errors\n    });\n  }\n  /**\n   * Gets the loading state of cloning a saved cart\n   *\n   * @returns observable with boolean of the loading state\n   */\n\n\n  getCloneSavedCartProcessLoading() {\n    return this.store.pipe(select(ProcessSelectors.getProcessLoadingFactory(SAVED_CART_CLONE_CART_PROCESS_ID)));\n  }\n  /**\n   * Gets the success state of cloning a saved cart\n   *\n   * @returns observable with boolean of the success state\n   */\n\n\n  getCloneSavedCartProcessSuccess() {\n    return this.store.pipe(select(ProcessSelectors.getProcessSuccessFactory(SAVED_CART_CLONE_CART_PROCESS_ID)));\n  }\n  /**\n   * Gets the error state of cloning a saved cart\n   *\n   * @returns observable with boolean of the error state\n   */\n\n\n  getCloneSavedCartProcessError() {\n    return this.store.pipe(select(ProcessSelectors.getProcessErrorFactory(SAVED_CART_CLONE_CART_PROCESS_ID)));\n  }\n  /**\n   * Clears the process state of cloning a saved cart\n   */\n\n\n  clearCloneSavedCart() {\n    this.store.dispatch(new ClearCloneSavedCart());\n  }\n\n}\n\nSavedCartService.ɵfac = function SavedCartService_Factory(t) {\n  return new (t || SavedCartService)(i0.ɵɵinject(i1.Store), i0.ɵɵinject(i2.UserIdService), i0.ɵɵinject(i2.UserService), i0.ɵɵinject(i2.MultiCartService), i0.ɵɵinject(i2.EventService));\n};\n\nSavedCartService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: SavedCartService,\n  factory: SavedCartService.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SavedCartService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i1.Store\n    }, {\n      type: i2.UserIdService\n    }, {\n      type: i2.UserService\n    }, {\n      type: i2.MultiCartService\n    }, {\n      type: i2.EventService\n    }];\n  }, null);\n})();\n\nconst facadeProviders = [SavedCartService, {\n  provide: SavedCartFacade,\n  useExisting: SavedCartService\n}];\n\nclass SavedCartCoreModule {}\n\nSavedCartCoreModule.ɵfac = function SavedCartCoreModule_Factory(t) {\n  return new (t || SavedCartCoreModule)();\n};\n\nSavedCartCoreModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: SavedCartCoreModule\n});\nSavedCartCoreModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [SavedCartConnector, ...facadeProviders],\n  imports: [[SavedCartStoreModule, SavedCartEventsModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SavedCartCoreModule, [{\n    type: NgModule,\n    args: [{\n      imports: [SavedCartStoreModule, SavedCartEventsModule],\n      providers: [SavedCartConnector, ...facadeProviders]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { SAVED_CART_CLONE_CART_PROCESS_ID, SAVED_CART_LIST_PROCESS_ID, SAVED_CART_RESTORE_CART_PROCESS_ID, SAVED_CART_SAVE_CART_PROCESS_ID, savedCart_action as SavedCartActions, SavedCartAdapter, SavedCartConnector, SavedCartCoreModule, SavedCartEventBuilder, SavedCartEventsModule, SavedCartService }; //# sourceMappingURL=spartacus-cart-saved-cart-core.js.map","map":{"version":3,"sources":["D:/spartacus/front-store/node_modules/@spartacus/cart/fesm2015/spartacus-cart-saved-cart-core.js"],"names":["i0","Injectable","NgModule","i1$1","ofType","Effect","EffectsModule","RestoreSavedCartEvent","RestoreSavedCartSuccessEvent","RestoreSavedCartFailEvent","DeleteSavedCartEvent","DeleteSavedCartSuccessEvent","DeleteSavedCartFailEvent","SaveCartSuccessEvent","SaveCartFailEvent","SaveCartEvent","EditSavedCartSuccessEvent","EditSavedCartFailEvent","EditSavedCartEvent","CloneSavedCartEvent","CloneSavedCartSuccessEvent","CloneSavedCartFailEvent","SavedCartFacade","i2","StateUtils","MULTI_CART_DATA","PROCESS_FEATURE","CartActions","createFrom","normalizeHttpError","GlobalMessageType","getWishlistName","isSelectiveCart","ProcessSelectors","of","queueScheduler","EMPTY","combineLatest","switchMap","withLatestFrom","map","filter","catchError","observeOn","startWith","tap","pluck","shareReplay","distinctUntilChanged","i1","select","__decorate","SavedCartAdapter","SavedCartConnector","constructor","adapter","get","userId","cartId","load","getList","loadList","restoreSavedCart","saveCart","saveCartName","saveCartDescription","cloneSavedCart","ɵfac","ɵprov","type","SAVED_CART_LIST_PROCESS_ID","SAVED_CART_RESTORE_CART_PROCESS_ID","SAVED_CART_SAVE_CART_PROCESS_ID","SAVED_CART_CLONE_CART_PROCESS_ID","LOAD_SAVED_CART","LOAD_SAVED_CART_SUCCESS","LOAD_SAVED_CART_FAIL","LOAD_SAVED_CARTS","LOAD_SAVED_CARTS_SUCCESS","LOAD_SAVED_CARTS_FAIL","CLEAR_SAVED_CARTS","RESTORE_SAVED_CART","RESTORE_SAVED_CART_SUCCESS","RESTORE_SAVED_CART_FAIL","CLEAR_RESTORE_SAVED_CART","SAVE_CART","SAVE_CART_SUCCESS","SAVE_CART_FAIL","CLEAR_SAVE_CART","EDIT_SAVED_CART","EDIT_SAVED_CART_SUCCESS","EDIT_SAVED_CART_FAIL","CLONE_SAVED_CART","CLONE_SAVED_CART_SUCCESS","CLONE_SAVED_CART_FAIL","CLEAR_CLONE_SAVED_CART","LoadSavedCart","EntityLoadAction","payload","LoadSavedCartSuccess","EntitySuccessAction","LoadSavedCartFail","EntityFailAction","error","LoadSavedCarts","LoadSavedCartsSuccess","LoadSavedCartsFail","ClearSavedCarts","EntityLoaderResetAction","RestoreSavedCart","RestoreSavedCartSuccess","RestoreSavedCartFail","ClearRestoreSavedCart","SaveCart","SaveCartSuccess","SaveCartFail","ClearSaveCart","EditSavedCart","EditSavedCartSuccess","EditSavedCartFail","CloneSavedCart","CloneSavedCartSuccess","CloneSavedCartFail","ClearCloneSavedCart","savedCart_action","Object","freeze","__proto__","SavedCartEventBuilder","actionsSubject","eventService","stateEventService","multiCartService","register","registerRestoreSavedCartEvents","registerDeleteSavedCartEvents","registerSaveCartEvents","registerEditSavedCartEvents","registerCloneSavedCartEvents","buildRestoreSavedCartEvents","action","event","DELETE_CART","factory","assign","cartCode","DELETE_CART_SUCCESS","DELETE_CART_FAIL","buildSaveCartSuccessEvent","mapping","eventStream$","getAction","pipe","getCart","cart","code","name","description","saveTime","Boolean","actionType","concat","ActionsSubject","EventService","StateEventService","MultiCartService","args","providedIn","SavedCartEventsModule","_savedCartEventBuilder","ɵmod","ɵinj","SavedCartEffects","actions$","savedCartConnector","activeCartService","globalMessageService","loadSavedCart$","savedCart","LoadCartSuccess","loadSavedCarts$","savedCarts","LoadCartsSuccess","restoreSavedCart$","getActive","activeCart","_a","actions","entries","length","push","add","key","params","cartName","previousCartName","MSG_TYPE_CONFIRMATION","SetActiveCartId","saveCart$","ClearCartState","editSavedCart$","cloneSavedCart$","_","Actions","ActiveCartService","GlobalMessageService","prototype","effects","SavedCartStoreModule","forFeature","imports","SavedCartService","store","userIdService","userService","loadSavedCart","takeUserId","subscribe","dispatch","getSavedCart","state","_event","keys","loading","success","value","getCartEntity","isStable","loadSavedCarts","getSavedCartList","getSavedCartListProcess","bufferSize","refCount","getCarts","carts","user","customerId","undefined","getSavedCartListProcessLoading","getProcessLoadingFactory","getProcessStateFactory","clearSavedCarts","getRestoreSavedCartProcessLoading","getRestoreSavedCartProcessSuccess","getProcessSuccessFactory","getRestoreSavedCartProcessError","getProcessErrorFactory","clearRestoreSavedCart","deleteSavedCart","deleteCart","getSaveCartProcessLoading","getSaveCartProcessSuccess","getSaveCartProcessError","clearSaveCart","editSavedCart","getCloneSavedCartProcessLoading","getCloneSavedCartProcessSuccess","getCloneSavedCartProcessError","clearCloneSavedCart","Store","UserIdService","UserService","facadeProviders","provide","useExisting","SavedCartCoreModule","providers","SavedCartActions"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, NgModule } from '@angular/core';\nimport * as i1$1 from '@ngrx/effects';\nimport { ofType, Effect, EffectsModule } from '@ngrx/effects';\nimport { RestoreSavedCartEvent, RestoreSavedCartSuccessEvent, RestoreSavedCartFailEvent, DeleteSavedCartEvent, DeleteSavedCartSuccessEvent, DeleteSavedCartFailEvent, SaveCartSuccessEvent, SaveCartFailEvent, SaveCartEvent, EditSavedCartSuccessEvent, EditSavedCartFailEvent, EditSavedCartEvent, CloneSavedCartEvent, CloneSavedCartSuccessEvent, CloneSavedCartFailEvent, SavedCartFacade } from '@spartacus/cart/saved-cart/root';\nimport * as i2 from '@spartacus/core';\nimport { StateUtils, MULTI_CART_DATA, PROCESS_FEATURE, CartActions, createFrom, normalizeHttpError, GlobalMessageType, getWishlistName, isSelectiveCart, ProcessSelectors } from '@spartacus/core';\nimport { of, queueScheduler, EMPTY, combineLatest } from 'rxjs';\nimport { switchMap, withLatestFrom, map, filter, catchError, observeOn, startWith, tap, pluck, shareReplay, distinctUntilChanged } from 'rxjs/operators';\nimport * as i1 from '@ngrx/store';\nimport { select } from '@ngrx/store';\nimport { __decorate } from 'tslib';\n\nclass SavedCartAdapter {\n}\n\nclass SavedCartConnector {\n    constructor(adapter) {\n        this.adapter = adapter;\n    }\n    get(userId, cartId) {\n        return this.adapter.load(userId, cartId);\n    }\n    getList(userId) {\n        return this.adapter.loadList(userId);\n    }\n    restoreSavedCart(userId, cartId) {\n        return this.adapter.restoreSavedCart(userId, cartId);\n    }\n    saveCart(userId, cartId, saveCartName, saveCartDescription) {\n        return this.adapter.saveCart(userId, cartId, saveCartName, saveCartDescription);\n    }\n    cloneSavedCart(userId, cartId, saveCartName) {\n        return this.adapter.cloneSavedCart(userId, cartId, saveCartName);\n    }\n}\nSavedCartConnector.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: SavedCartConnector, deps: [{ token: SavedCartAdapter }], target: i0.ɵɵFactoryTarget.Injectable });\nSavedCartConnector.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: SavedCartConnector });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: SavedCartConnector, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: SavedCartAdapter }]; } });\n\nconst SAVED_CART_LIST_PROCESS_ID = 'saved-cart-list';\nconst SAVED_CART_RESTORE_CART_PROCESS_ID = 'saved-cart-restore-cart';\nconst SAVED_CART_SAVE_CART_PROCESS_ID = 'saved-cart-save-cart';\nconst SAVED_CART_CLONE_CART_PROCESS_ID = 'saved-cart-clone-cart';\n\nconst LOAD_SAVED_CART = '[Saved Cart] Load Saved Cart';\nconst LOAD_SAVED_CART_SUCCESS = '[Saved Cart] Load Saved Cart Success';\nconst LOAD_SAVED_CART_FAIL = '[Saved Cart] Load Saved Cart Fail';\nconst LOAD_SAVED_CARTS = '[Saved Cart] Load Saved Carts';\nconst LOAD_SAVED_CARTS_SUCCESS = '[Saved Cart] Load Saved Carts Success';\nconst LOAD_SAVED_CARTS_FAIL = '[Saved Cart] Load Saved Carts Fail';\nconst CLEAR_SAVED_CARTS = '[Saved Cart] Clear Saved Carts';\nconst RESTORE_SAVED_CART = '[Saved Cart] Restore Saved Cart';\nconst RESTORE_SAVED_CART_SUCCESS = '[Saved Cart] Restore Saved Cart Success';\nconst RESTORE_SAVED_CART_FAIL = '[Saved Cart] Restore Saved Cart Fail';\nconst CLEAR_RESTORE_SAVED_CART = '[Saved Cart] Clear Restore Saved Cart';\nconst SAVE_CART = '[Saved Cart] Save Cart';\nconst SAVE_CART_SUCCESS = '[Saved Cart] Save Cart Success';\nconst SAVE_CART_FAIL = '[Saved Cart] Save Cart Fail';\nconst CLEAR_SAVE_CART = '[Saved Cart] Clear Save Cart';\nconst EDIT_SAVED_CART = '[Saved Cart] Edit Saved Cart';\nconst EDIT_SAVED_CART_SUCCESS = '[Saved Cart] Edit Saved Cart Success';\nconst EDIT_SAVED_CART_FAIL = '[Saved Cart] Edit Saved Cart Fail';\nconst CLONE_SAVED_CART = '[Saved Cart] Clone Saved Cart';\nconst CLONE_SAVED_CART_SUCCESS = '[Saved Cart] Clone Saved Cart Success';\nconst CLONE_SAVED_CART_FAIL = '[Saved Cart] Clone Saved Cart Fail';\nconst CLEAR_CLONE_SAVED_CART = '[Saved Cart] Clear Clone Saved Cart';\nclass LoadSavedCart extends StateUtils.EntityLoadAction {\n    constructor(payload) {\n        super(MULTI_CART_DATA, payload.cartId);\n        this.payload = payload;\n        this.type = LOAD_SAVED_CART;\n    }\n}\nclass LoadSavedCartSuccess extends StateUtils.EntitySuccessAction {\n    constructor(payload) {\n        super(MULTI_CART_DATA, payload.cartId);\n        this.payload = payload;\n        this.type = LOAD_SAVED_CART_SUCCESS;\n    }\n}\nclass LoadSavedCartFail extends StateUtils.EntityFailAction {\n    constructor(payload) {\n        super(MULTI_CART_DATA, payload.cartId, payload === null || payload === void 0 ? void 0 : payload.error);\n        this.payload = payload;\n        this.type = LOAD_SAVED_CART_FAIL;\n    }\n}\nclass LoadSavedCarts extends StateUtils.EntityLoadAction {\n    constructor(payload) {\n        super(PROCESS_FEATURE, SAVED_CART_LIST_PROCESS_ID);\n        this.payload = payload;\n        this.type = LOAD_SAVED_CARTS;\n    }\n}\nclass LoadSavedCartsSuccess extends StateUtils.EntitySuccessAction {\n    constructor(payload) {\n        super(PROCESS_FEATURE, SAVED_CART_LIST_PROCESS_ID);\n        this.payload = payload;\n        this.type = LOAD_SAVED_CARTS_SUCCESS;\n    }\n}\nclass LoadSavedCartsFail extends StateUtils.EntityFailAction {\n    constructor(payload) {\n        super(PROCESS_FEATURE, SAVED_CART_LIST_PROCESS_ID, payload.error);\n        this.payload = payload;\n        this.type = LOAD_SAVED_CARTS_FAIL;\n    }\n}\nclass ClearSavedCarts extends StateUtils.EntityLoaderResetAction {\n    constructor() {\n        super(PROCESS_FEATURE, SAVED_CART_LIST_PROCESS_ID);\n        this.type = CLEAR_SAVED_CARTS;\n    }\n}\nclass RestoreSavedCart extends StateUtils.EntityLoadAction {\n    constructor(payload) {\n        super(PROCESS_FEATURE, SAVED_CART_RESTORE_CART_PROCESS_ID);\n        this.payload = payload;\n        this.type = RESTORE_SAVED_CART;\n    }\n}\nclass RestoreSavedCartSuccess extends StateUtils.EntitySuccessAction {\n    constructor(payload) {\n        super(PROCESS_FEATURE, SAVED_CART_RESTORE_CART_PROCESS_ID);\n        this.payload = payload;\n        this.type = RESTORE_SAVED_CART_SUCCESS;\n    }\n}\nclass RestoreSavedCartFail extends StateUtils.EntityFailAction {\n    constructor(payload) {\n        super(PROCESS_FEATURE, SAVED_CART_RESTORE_CART_PROCESS_ID, payload.error);\n        this.payload = payload;\n        this.type = RESTORE_SAVED_CART_FAIL;\n    }\n}\nclass ClearRestoreSavedCart extends StateUtils.EntityLoaderResetAction {\n    constructor() {\n        super(PROCESS_FEATURE, SAVED_CART_RESTORE_CART_PROCESS_ID);\n        this.type = CLEAR_RESTORE_SAVED_CART;\n    }\n}\nclass SaveCart extends StateUtils.EntityLoadAction {\n    constructor(payload) {\n        super(PROCESS_FEATURE, SAVED_CART_SAVE_CART_PROCESS_ID);\n        this.payload = payload;\n        this.type = SAVE_CART;\n    }\n}\nclass SaveCartSuccess extends StateUtils.EntitySuccessAction {\n    constructor(payload) {\n        super(PROCESS_FEATURE, SAVED_CART_SAVE_CART_PROCESS_ID);\n        this.payload = payload;\n        this.type = SAVE_CART_SUCCESS;\n    }\n}\nclass SaveCartFail extends StateUtils.EntityFailAction {\n    constructor(payload) {\n        super(PROCESS_FEATURE, SAVED_CART_SAVE_CART_PROCESS_ID, payload.error);\n        this.payload = payload;\n        this.type = SAVE_CART_FAIL;\n    }\n}\nclass ClearSaveCart extends StateUtils.EntityLoaderResetAction {\n    constructor() {\n        super(PROCESS_FEATURE, SAVED_CART_SAVE_CART_PROCESS_ID);\n        this.type = CLEAR_SAVE_CART;\n    }\n}\nclass EditSavedCart extends StateUtils.EntityLoadAction {\n    constructor(payload) {\n        super(PROCESS_FEATURE, SAVED_CART_SAVE_CART_PROCESS_ID);\n        this.payload = payload;\n        this.type = EDIT_SAVED_CART;\n    }\n}\nclass EditSavedCartSuccess extends StateUtils.EntitySuccessAction {\n    constructor(payload) {\n        super(PROCESS_FEATURE, SAVED_CART_SAVE_CART_PROCESS_ID);\n        this.payload = payload;\n        this.type = EDIT_SAVED_CART_SUCCESS;\n    }\n}\nclass EditSavedCartFail extends StateUtils.EntityFailAction {\n    constructor(payload) {\n        super(PROCESS_FEATURE, SAVED_CART_SAVE_CART_PROCESS_ID, payload.error);\n        this.payload = payload;\n        this.type = EDIT_SAVED_CART_FAIL;\n    }\n}\nclass CloneSavedCart extends StateUtils.EntityLoadAction {\n    constructor(payload) {\n        super(PROCESS_FEATURE, SAVED_CART_CLONE_CART_PROCESS_ID);\n        this.payload = payload;\n        this.type = CLONE_SAVED_CART;\n    }\n}\nclass CloneSavedCartSuccess extends StateUtils.EntitySuccessAction {\n    constructor(payload) {\n        super(PROCESS_FEATURE, SAVED_CART_CLONE_CART_PROCESS_ID);\n        this.payload = payload;\n        this.type = CLONE_SAVED_CART_SUCCESS;\n    }\n}\nclass CloneSavedCartFail extends StateUtils.EntityFailAction {\n    constructor(payload) {\n        super(PROCESS_FEATURE, SAVED_CART_CLONE_CART_PROCESS_ID, payload.error);\n        this.payload = payload;\n        this.type = CLONE_SAVED_CART_FAIL;\n    }\n}\nclass ClearCloneSavedCart extends StateUtils.EntityLoaderResetAction {\n    constructor() {\n        super(PROCESS_FEATURE, SAVED_CART_CLONE_CART_PROCESS_ID);\n        this.type = CLEAR_CLONE_SAVED_CART;\n    }\n}\n\nvar savedCart_action = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    LOAD_SAVED_CART: LOAD_SAVED_CART,\n    LOAD_SAVED_CART_SUCCESS: LOAD_SAVED_CART_SUCCESS,\n    LOAD_SAVED_CART_FAIL: LOAD_SAVED_CART_FAIL,\n    LOAD_SAVED_CARTS: LOAD_SAVED_CARTS,\n    LOAD_SAVED_CARTS_SUCCESS: LOAD_SAVED_CARTS_SUCCESS,\n    LOAD_SAVED_CARTS_FAIL: LOAD_SAVED_CARTS_FAIL,\n    CLEAR_SAVED_CARTS: CLEAR_SAVED_CARTS,\n    RESTORE_SAVED_CART: RESTORE_SAVED_CART,\n    RESTORE_SAVED_CART_SUCCESS: RESTORE_SAVED_CART_SUCCESS,\n    RESTORE_SAVED_CART_FAIL: RESTORE_SAVED_CART_FAIL,\n    CLEAR_RESTORE_SAVED_CART: CLEAR_RESTORE_SAVED_CART,\n    SAVE_CART: SAVE_CART,\n    SAVE_CART_SUCCESS: SAVE_CART_SUCCESS,\n    SAVE_CART_FAIL: SAVE_CART_FAIL,\n    CLEAR_SAVE_CART: CLEAR_SAVE_CART,\n    EDIT_SAVED_CART: EDIT_SAVED_CART,\n    EDIT_SAVED_CART_SUCCESS: EDIT_SAVED_CART_SUCCESS,\n    EDIT_SAVED_CART_FAIL: EDIT_SAVED_CART_FAIL,\n    CLONE_SAVED_CART: CLONE_SAVED_CART,\n    CLONE_SAVED_CART_SUCCESS: CLONE_SAVED_CART_SUCCESS,\n    CLONE_SAVED_CART_FAIL: CLONE_SAVED_CART_FAIL,\n    CLEAR_CLONE_SAVED_CART: CLEAR_CLONE_SAVED_CART,\n    LoadSavedCart: LoadSavedCart,\n    LoadSavedCartSuccess: LoadSavedCartSuccess,\n    LoadSavedCartFail: LoadSavedCartFail,\n    LoadSavedCarts: LoadSavedCarts,\n    LoadSavedCartsSuccess: LoadSavedCartsSuccess,\n    LoadSavedCartsFail: LoadSavedCartsFail,\n    ClearSavedCarts: ClearSavedCarts,\n    RestoreSavedCart: RestoreSavedCart,\n    RestoreSavedCartSuccess: RestoreSavedCartSuccess,\n    RestoreSavedCartFail: RestoreSavedCartFail,\n    ClearRestoreSavedCart: ClearRestoreSavedCart,\n    SaveCart: SaveCart,\n    SaveCartSuccess: SaveCartSuccess,\n    SaveCartFail: SaveCartFail,\n    ClearSaveCart: ClearSaveCart,\n    EditSavedCart: EditSavedCart,\n    EditSavedCartSuccess: EditSavedCartSuccess,\n    EditSavedCartFail: EditSavedCartFail,\n    CloneSavedCart: CloneSavedCart,\n    CloneSavedCartSuccess: CloneSavedCartSuccess,\n    CloneSavedCartFail: CloneSavedCartFail,\n    ClearCloneSavedCart: ClearCloneSavedCart\n});\n\nclass SavedCartEventBuilder {\n    constructor(actionsSubject, eventService, stateEventService, multiCartService) {\n        this.actionsSubject = actionsSubject;\n        this.eventService = eventService;\n        this.stateEventService = stateEventService;\n        this.multiCartService = multiCartService;\n        this.register();\n    }\n    /**\n     * Registers events for the saved cart\n     */\n    register() {\n        this.registerRestoreSavedCartEvents();\n        this.registerDeleteSavedCartEvents();\n        this.registerSaveCartEvents();\n        this.registerEditSavedCartEvents();\n        this.registerCloneSavedCartEvents();\n    }\n    /**\n     * Registers restore saved cart events\n     */\n    registerRestoreSavedCartEvents() {\n        this.buildRestoreSavedCartEvents({\n            action: RESTORE_SAVED_CART,\n            event: RestoreSavedCartEvent,\n        });\n        this.buildRestoreSavedCartEvents({\n            action: RESTORE_SAVED_CART_SUCCESS,\n            event: RestoreSavedCartSuccessEvent,\n        });\n        this.buildRestoreSavedCartEvents({\n            action: RESTORE_SAVED_CART_FAIL,\n            event: RestoreSavedCartFailEvent,\n        });\n    }\n    /**\n     * Registers delete saved cart events\n     */\n    registerDeleteSavedCartEvents() {\n        this.stateEventService.register({\n            action: CartActions.DELETE_CART,\n            event: DeleteSavedCartEvent,\n            factory: (action) => createFrom(DeleteSavedCartEvent, Object.assign(Object.assign({}, action.payload), { cartCode: action.payload.cartId })),\n        });\n        this.stateEventService.register({\n            action: CartActions.DELETE_CART_SUCCESS,\n            event: DeleteSavedCartSuccessEvent,\n            factory: (action) => createFrom(DeleteSavedCartSuccessEvent, Object.assign(Object.assign({}, action.payload), { cartCode: action.payload.cartId })),\n        });\n        this.stateEventService.register({\n            action: CartActions.DELETE_CART_FAIL,\n            event: DeleteSavedCartFailEvent,\n            factory: (action) => createFrom(DeleteSavedCartFailEvent, Object.assign(Object.assign({}, action.payload), { cartCode: action.payload.cartId })),\n        });\n    }\n    /**\n     * Registers save cart events\n     */\n    registerSaveCartEvents() {\n        this.buildSaveCartSuccessEvent({\n            action: SAVE_CART_SUCCESS,\n            event: SaveCartSuccessEvent,\n        });\n        this.stateEventService.register({\n            action: SAVE_CART_FAIL,\n            event: SaveCartFailEvent,\n            factory: (action) => createFrom(SaveCartFailEvent, Object.assign(Object.assign({}, action.payload), { cartCode: action.payload.cartId })),\n        });\n        this.stateEventService.register({\n            action: SAVE_CART,\n            event: SaveCartEvent,\n            factory: (action) => {\n                return createFrom(SaveCartEvent, Object.assign(Object.assign({}, action.payload), { cartCode: action.payload.cartId }));\n            },\n        });\n    }\n    /**\n     * Registers edit saved cart events\n     */\n    registerEditSavedCartEvents() {\n        this.buildSaveCartSuccessEvent({\n            action: EDIT_SAVED_CART_SUCCESS,\n            event: EditSavedCartSuccessEvent,\n        });\n        this.stateEventService.register({\n            action: EDIT_SAVED_CART_FAIL,\n            event: EditSavedCartFailEvent,\n            factory: (action) => createFrom(EditSavedCartFailEvent, Object.assign(Object.assign({}, action.payload), { cartCode: action.payload.cartId })),\n        });\n        this.stateEventService.register({\n            action: EDIT_SAVED_CART,\n            event: EditSavedCartEvent,\n            factory: (action) => {\n                return createFrom(EditSavedCartEvent, Object.assign(Object.assign({}, action.payload), { cartCode: action.payload.cartId }));\n            },\n        });\n    }\n    /**\n     * Registers clone saved cart events\n     */\n    registerCloneSavedCartEvents() {\n        this.buildRestoreSavedCartEvents({\n            action: CLONE_SAVED_CART,\n            event: CloneSavedCartEvent,\n        });\n        this.buildRestoreSavedCartEvents({\n            action: CLONE_SAVED_CART_SUCCESS,\n            event: CloneSavedCartSuccessEvent,\n        });\n        this.buildRestoreSavedCartEvents({\n            action: CLONE_SAVED_CART_FAIL,\n            event: CloneSavedCartFailEvent,\n        });\n    }\n    /**\n     * Builds the restore save cart events from the action and cart\n     *\n     * @param mapping mapping declaration from `action` string type to `event` class type\n     * @param saveTime should the saveTime attribute be added to the event\n     * @returns\n     */\n    buildRestoreSavedCartEvents(mapping) {\n        const eventStream$ = this.getAction(mapping.action).pipe(switchMap((action) => of(action).pipe(withLatestFrom(this.multiCartService.getCart(action.payload.cartId)))), map(([action, cart]) => createFrom(mapping.event, Object.assign(Object.assign(Object.assign({}, action.payload), { cartCode: cart.code, saveCartName: cart.name, saveCartDescription: cart.description }), (cart.saveTime && { saveTime: cart.saveTime })))));\n        return this.eventService.register(mapping.event, eventStream$);\n    }\n    /**\n     * Builds save cart event by adding the saveTime from the cart\n     *\n     * @param mapping mapping declaration from `action` string type to `event` class type\n     * @returns events register function\n     */\n    buildSaveCartSuccessEvent(mapping) {\n        const eventStream$ = this.getAction(mapping.action).pipe(switchMap((action) => of(action).pipe(withLatestFrom(this.multiCartService.getCart(action.payload.cartId)))), filter(([, cart]) => Boolean(cart)), map(([action, cart]) => createFrom(mapping.event, Object.assign(Object.assign({}, action.payload), { cartCode: cart.code, saveTime: cart.saveTime }))));\n        return this.eventService.register(mapping.event, eventStream$);\n    }\n    /**\n     * Returns a stream of actions only of a given type(s)\n     *\n     * @param actionType type(s) of actions\n     */\n    getAction(actionType) {\n        return this.actionsSubject.pipe(ofType(...[].concat(actionType)));\n    }\n}\nSavedCartEventBuilder.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: SavedCartEventBuilder, deps: [{ token: i1.ActionsSubject }, { token: i2.EventService }, { token: i2.StateEventService }, { token: i2.MultiCartService }], target: i0.ɵɵFactoryTarget.Injectable });\nSavedCartEventBuilder.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: SavedCartEventBuilder, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: SavedCartEventBuilder, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i1.ActionsSubject }, { type: i2.EventService }, { type: i2.StateEventService }, { type: i2.MultiCartService }]; } });\n\nclass SavedCartEventsModule {\n    constructor(_savedCartEventBuilder) { }\n}\nSavedCartEventsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: SavedCartEventsModule, deps: [{ token: SavedCartEventBuilder }], target: i0.ɵɵFactoryTarget.NgModule });\nSavedCartEventsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: SavedCartEventsModule });\nSavedCartEventsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: SavedCartEventsModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: SavedCartEventsModule, decorators: [{\n            type: NgModule,\n            args: [{}]\n        }], ctorParameters: function () { return [{ type: SavedCartEventBuilder }]; } });\n\nclass SavedCartEffects {\n    constructor(actions$, savedCartConnector, activeCartService, globalMessageService) {\n        this.actions$ = actions$;\n        this.savedCartConnector = savedCartConnector;\n        this.activeCartService = activeCartService;\n        this.globalMessageService = globalMessageService;\n        this.loadSavedCart$ = this.actions$.pipe(ofType(LOAD_SAVED_CART), map((action) => action.payload), switchMap(({ userId, cartId }) => this.savedCartConnector.get(userId, cartId).pipe(switchMap((savedCart) => {\n            return [\n                new CartActions.LoadCartSuccess({\n                    userId,\n                    cartId,\n                    cart: savedCart,\n                }),\n                new LoadSavedCartSuccess({ userId, cartId }),\n            ];\n        }), catchError((error) => of(new LoadSavedCartFail({\n            userId,\n            cartId,\n            error: normalizeHttpError(error),\n        }))))));\n        this.loadSavedCarts$ = this.actions$.pipe(ofType(LOAD_SAVED_CARTS), map((action) => action.payload), switchMap(({ userId }) => this.savedCartConnector.getList(userId).pipe(switchMap((savedCarts) => {\n            return [\n                new CartActions.LoadCartsSuccess(savedCarts),\n                new LoadSavedCartsSuccess({ userId }),\n            ];\n        }), catchError((error) => of(new LoadSavedCartsFail({\n            userId,\n            error: normalizeHttpError(error),\n        }))))));\n        this.restoreSavedCart$ = this.actions$.pipe(ofType(RESTORE_SAVED_CART), map((action) => action.payload), withLatestFrom(this.activeCartService.getActive()), switchMap(([{ userId, cartId }, activeCart]) => {\n            var _a;\n            const actions = [];\n            if (((_a = activeCart === null || activeCart === void 0 ? void 0 : activeCart.entries) !== null && _a !== void 0 ? _a : []).length > 0) {\n                if (activeCart.code) {\n                    /**\n                     * Instead of calling the SaveCartAction, we are calling the edit saved cart\n                     * because we do not want to clear the state when we swap carts between active and saved cart\n                     */\n                    actions.push(new EditSavedCart({\n                        userId,\n                        cartId: activeCart.code,\n                        saveCartName: '',\n                        saveCartDescription: '',\n                    }));\n                }\n            }\n            return this.savedCartConnector.restoreSavedCart(userId, cartId).pipe(switchMap((savedCart) => {\n                var _a;\n                this.globalMessageService.add({\n                    key: ((_a = activeCart === null || activeCart === void 0 ? void 0 : activeCart.entries) !== null && _a !== void 0 ? _a : []).length > 0\n                        ? 'savedCartList.swapCartWithActiveCart'\n                        : 'savedCartList.swapCartNoActiveCart',\n                    params: {\n                        cartName: cartId,\n                        previousCartName: activeCart.code,\n                    },\n                }, GlobalMessageType.MSG_TYPE_CONFIRMATION);\n                return [\n                    ...actions,\n                    new CartActions.SetActiveCartId(cartId),\n                    new CartActions.LoadCartSuccess({\n                        userId,\n                        cartId,\n                        cart: savedCart,\n                    }),\n                    new RestoreSavedCartSuccess({ userId, cartId }),\n                ];\n            }), catchError((error) => of(new RestoreSavedCartFail({\n                userId,\n                cartId,\n                error: normalizeHttpError(error),\n            }))));\n        }));\n        this.saveCart$ = this.actions$.pipe(ofType(SAVE_CART), map((action) => action.payload), switchMap(({ userId, cartId, saveCartName, saveCartDescription }) => {\n            return this.savedCartConnector\n                .saveCart(userId, cartId, saveCartName, saveCartDescription)\n                .pipe(switchMap((savedCart) => {\n                return [\n                    new CartActions.ClearCartState(),\n                    new CartActions.LoadCartSuccess({\n                        userId,\n                        cartId,\n                        cart: savedCart,\n                    }),\n                    new SaveCartSuccess({\n                        userId,\n                        cartId,\n                        saveCartName,\n                        saveCartDescription,\n                    }),\n                ];\n            }), catchError((error) => of(new SaveCartFail({\n                userId,\n                cartId,\n                saveCartName,\n                saveCartDescription,\n                error: normalizeHttpError(error),\n            }))));\n        }));\n        this.editSavedCart$ = this.actions$.pipe(ofType(EDIT_SAVED_CART), map((action) => action.payload), switchMap(({ userId, cartId, saveCartName, saveCartDescription }) => {\n            return this.savedCartConnector\n                .saveCart(userId, cartId, saveCartName, saveCartDescription)\n                .pipe(switchMap((savedCart) => {\n                return [\n                    new CartActions.LoadCartSuccess({\n                        userId,\n                        cartId,\n                        cart: savedCart,\n                    }),\n                    new EditSavedCartSuccess({\n                        userId,\n                        cartId,\n                        saveCartName,\n                        saveCartDescription,\n                    }),\n                ];\n            }), catchError((error) => of(new EditSavedCartFail({\n                userId,\n                cartId,\n                saveCartName,\n                saveCartDescription,\n                error: normalizeHttpError(error),\n            }))));\n        }));\n        this.cloneSavedCart$ = this.actions$.pipe(ofType(CLONE_SAVED_CART), map((action) => action.payload), switchMap(({ userId, cartId, saveCartName }) => {\n            return this.savedCartConnector\n                .cloneSavedCart(userId, cartId, saveCartName)\n                .pipe(switchMap((_) => {\n                return [\n                    new CloneSavedCartSuccess({\n                        userId,\n                        cartId,\n                        saveCartName,\n                    }),\n                    new RestoreSavedCart({\n                        userId,\n                        cartId,\n                    }),\n                    new LoadSavedCarts({ userId }),\n                ];\n            }), catchError((error) => of(new CloneSavedCartFail({\n                userId,\n                cartId,\n                saveCartName,\n                error: normalizeHttpError(error),\n            }))));\n        }));\n    }\n}\nSavedCartEffects.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: SavedCartEffects, deps: [{ token: i1$1.Actions }, { token: SavedCartConnector }, { token: i2.ActiveCartService }, { token: i2.GlobalMessageService }], target: i0.ɵɵFactoryTarget.Injectable });\nSavedCartEffects.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: SavedCartEffects });\n__decorate([\n    Effect()\n], SavedCartEffects.prototype, \"loadSavedCart$\", void 0);\n__decorate([\n    Effect()\n], SavedCartEffects.prototype, \"loadSavedCarts$\", void 0);\n__decorate([\n    Effect()\n], SavedCartEffects.prototype, \"restoreSavedCart$\", void 0);\n__decorate([\n    Effect()\n], SavedCartEffects.prototype, \"saveCart$\", void 0);\n__decorate([\n    Effect()\n], SavedCartEffects.prototype, \"editSavedCart$\", void 0);\n__decorate([\n    Effect()\n], SavedCartEffects.prototype, \"cloneSavedCart$\", void 0);\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: SavedCartEffects, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1$1.Actions }, { type: SavedCartConnector }, { type: i2.ActiveCartService }, { type: i2.GlobalMessageService }]; }, propDecorators: { loadSavedCart$: [], loadSavedCarts$: [], restoreSavedCart$: [], saveCart$: [], editSavedCart$: [], cloneSavedCart$: [] } });\n\nconst effects = [SavedCartEffects];\n\nclass SavedCartStoreModule {\n}\nSavedCartStoreModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: SavedCartStoreModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nSavedCartStoreModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: SavedCartStoreModule, imports: [i1$1.EffectsFeatureModule] });\nSavedCartStoreModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: SavedCartStoreModule, imports: [[EffectsModule.forFeature(effects)]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: SavedCartStoreModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [EffectsModule.forFeature(effects)],\n                }]\n        }] });\n\nclass SavedCartService {\n    constructor(store, userIdService, userService, multiCartService, eventService) {\n        this.store = store;\n        this.userIdService = userIdService;\n        this.userService = userService;\n        this.multiCartService = multiCartService;\n        this.eventService = eventService;\n    }\n    /**\n     * Loads a single saved cart\n     */\n    loadSavedCart(cartId) {\n        this.userIdService.takeUserId(true).subscribe((userId) => {\n            return this.store.dispatch(new LoadSavedCart({ userId, cartId }));\n        }, () => {\n            // TODO: for future releases, refactor this part to thrown errors\n        });\n    }\n    /**\n     * Gets a single saved cart\n     * it won't emit if the delete saved cart event gets triggered to avoid race condition between actions\n     *\n     * @param cartId\n     * @returns observable with cart\n     */\n    get(cartId) {\n        return this.getSavedCart(cartId).pipe(observeOn(queueScheduler), withLatestFrom(this.eventService.get(DeleteSavedCartEvent).pipe(startWith({}))), filter(([state, _event]) => !!state), tap(([state, event]) => {\n            if (Object.keys(event).length > 0) {\n                return EMPTY;\n            }\n            if (!(state.loading || state.success || state.error)) {\n                this.loadSavedCart(cartId);\n            }\n        }), filter(([state]) => state.success || !!state.error), map(([state]) => state.value));\n    }\n    /**\n     * Gets the selected cart state\n     *\n     * @param cartId\n     * @returns observable of selected cart with loader state\n     */\n    getSavedCart(cartId) {\n        return this.multiCartService.getCartEntity(cartId);\n    }\n    /**\n     * Returns true when there are no operations on that in progress and it is not currently loading\n     *\n     * @param cartId\n     */\n    isStable(cartId) {\n        return this.multiCartService.isStable(cartId);\n    }\n    /**\n     * Loads a list of saved carts\n     */\n    loadSavedCarts() {\n        this.userIdService.takeUserId(true).subscribe((userId) => {\n            return this.store.dispatch(new LoadSavedCarts({ userId }));\n        }, () => {\n            // TODO: for future releases, refactor this part to thrown errors\n        });\n    }\n    /**\n     * Gets a list of saved carts\n     *\n     * @returns observable with list of saved carts\n     */\n    getList() {\n        return this.getSavedCartList().pipe(withLatestFrom(this.getSavedCartListProcess()), tap(([_, state]) => {\n            if (!(state.loading || state.success || state.error)) {\n                this.loadSavedCarts();\n            }\n        }), pluck(0), shareReplay({ bufferSize: 1, refCount: true }));\n    }\n    /**\n     * Gets a list of saved carts from all carts in the state\n     * by filtering through the carts that are not wishlist and not saved cart\n     *\n     * @returns observable with list of saved carts\n     */\n    getSavedCartList() {\n        return combineLatest([\n            this.multiCartService.getCarts(),\n            this.userService.get(),\n        ]).pipe(distinctUntilChanged(), map(([carts, user]) => carts.filter((cart) => ((user === null || user === void 0 ? void 0 : user.customerId) !== undefined\n            ? (cart === null || cart === void 0 ? void 0 : cart.name) !== getWishlistName(user === null || user === void 0 ? void 0 : user.customerId)\n            : true) &&\n            !isSelectiveCart(cart === null || cart === void 0 ? void 0 : cart.code) &&\n            (cart === null || cart === void 0 ? void 0 : cart.saveTime))));\n    }\n    /**\n     * Gets the loading flag of getting a list of saved carts\n     *\n     * @returns observable with boolean of the loading state\n     */\n    getSavedCartListProcessLoading() {\n        return this.store.pipe(select(ProcessSelectors.getProcessLoadingFactory(SAVED_CART_LIST_PROCESS_ID)));\n    }\n    /**\n     * Gets the loading state of getting a list of saved carts\n     *\n     * @returns observable with boolean of the loader state\n     */\n    getSavedCartListProcess() {\n        return this.store.pipe(select(ProcessSelectors.getProcessStateFactory(SAVED_CART_LIST_PROCESS_ID)));\n    }\n    /**\n     * Clears the process state of performing a saved cart\n     */\n    clearSavedCarts() {\n        this.store.dispatch(new ClearSavedCarts());\n    }\n    /**\n     * Triggers a restore saved cart\n     *\n     * @param cartId\n     */\n    restoreSavedCart(cartId) {\n        this.userIdService.takeUserId(true).subscribe((userId) => {\n            return this.store.dispatch(new RestoreSavedCart({\n                userId,\n                cartId,\n            }));\n        }, () => {\n            // TODO: for future releases, refactor this part to thrown errors\n        });\n    }\n    /**\n     * Gets the loading state of restoring saved cart\n     *\n     * @returns observable with boolean of the loading state\n     */\n    getRestoreSavedCartProcessLoading() {\n        return this.store.pipe(select(ProcessSelectors.getProcessLoadingFactory(SAVED_CART_RESTORE_CART_PROCESS_ID)));\n    }\n    /**\n     * Gets the success state of restoring saved cart\n     *\n     * @returns observable with boolean of the success state\n     */\n    getRestoreSavedCartProcessSuccess() {\n        return this.store.pipe(select(ProcessSelectors.getProcessSuccessFactory(SAVED_CART_RESTORE_CART_PROCESS_ID)));\n    }\n    /**\n     * Gets the error state of restoring saved cart\n     *\n     * @returns observable with boolean of the error state\n     */\n    getRestoreSavedCartProcessError() {\n        return this.store.pipe(select(ProcessSelectors.getProcessErrorFactory(SAVED_CART_RESTORE_CART_PROCESS_ID)));\n    }\n    /**\n     * Clears the process state of performing a restore saved cart\n     */\n    clearRestoreSavedCart() {\n        this.store.dispatch(new ClearRestoreSavedCart());\n    }\n    /**\n     * Triggers delete saved cart\n     * @param cartId\n     */\n    deleteSavedCart(cartId) {\n        this.userIdService.takeUserId(true).subscribe((userId) => {\n            return this.multiCartService.deleteCart(cartId, userId);\n        }, () => {\n            // TODO: for future releases, refactor this part to thrown errors\n        });\n    }\n    /**\n     * Triggers a saved cart\n     *\n     */\n    saveCart({ cartId, saveCartName, saveCartDescription, }) {\n        this.userIdService.takeUserId(true).subscribe((userId) => {\n            return this.store.dispatch(new SaveCart({\n                userId,\n                cartId,\n                saveCartName,\n                saveCartDescription,\n            }));\n        }, () => {\n            // TODO: for future releases, refactor this part to thrown errors\n        });\n    }\n    /**\n     * Gets the loading state of saving a cart\n     *\n     * @returns observable with boolean of the loading state\n     */\n    getSaveCartProcessLoading() {\n        return this.store.pipe(select(ProcessSelectors.getProcessLoadingFactory(SAVED_CART_SAVE_CART_PROCESS_ID)));\n    }\n    /**\n     * Gets the success state of saving a cart\n     *\n     * @returns observable with boolean of the success state\n     */\n    getSaveCartProcessSuccess() {\n        return this.store.pipe(select(ProcessSelectors.getProcessSuccessFactory(SAVED_CART_SAVE_CART_PROCESS_ID)));\n    }\n    /**\n     * Gets the error state of saving a cart\n     *\n     * @returns observable with boolean of the error state\n     */\n    getSaveCartProcessError() {\n        return this.store.pipe(select(ProcessSelectors.getProcessErrorFactory(SAVED_CART_SAVE_CART_PROCESS_ID)));\n    }\n    /**\n     * Clears the process state of performing a save cart\n     */\n    clearSaveCart() {\n        this.store.dispatch(new ClearSaveCart());\n    }\n    /**\n     * Triggers an edit saved cart\n     *\n     */\n    editSavedCart({ cartId, saveCartName, saveCartDescription, }) {\n        this.userIdService.takeUserId(true).subscribe((userId) => {\n            return this.store.dispatch(new EditSavedCart({\n                userId,\n                cartId,\n                saveCartName,\n                saveCartDescription,\n            }));\n        }, () => {\n            // TODO: for future releases, refactor this part to thrown errors\n        });\n    }\n    /**\n     * Triggers a clone saved cart\n     *\n     * @param cartId\n     */\n    cloneSavedCart(cartId, saveCartName) {\n        this.userIdService.takeUserId(true).subscribe((userId) => {\n            return this.store.dispatch(new CloneSavedCart({ userId, cartId, saveCartName }));\n        }, () => {\n            // TODO: for future releases, refactor this part to thrown errors\n        });\n    }\n    /**\n     * Gets the loading state of cloning a saved cart\n     *\n     * @returns observable with boolean of the loading state\n     */\n    getCloneSavedCartProcessLoading() {\n        return this.store.pipe(select(ProcessSelectors.getProcessLoadingFactory(SAVED_CART_CLONE_CART_PROCESS_ID)));\n    }\n    /**\n     * Gets the success state of cloning a saved cart\n     *\n     * @returns observable with boolean of the success state\n     */\n    getCloneSavedCartProcessSuccess() {\n        return this.store.pipe(select(ProcessSelectors.getProcessSuccessFactory(SAVED_CART_CLONE_CART_PROCESS_ID)));\n    }\n    /**\n     * Gets the error state of cloning a saved cart\n     *\n     * @returns observable with boolean of the error state\n     */\n    getCloneSavedCartProcessError() {\n        return this.store.pipe(select(ProcessSelectors.getProcessErrorFactory(SAVED_CART_CLONE_CART_PROCESS_ID)));\n    }\n    /**\n     * Clears the process state of cloning a saved cart\n     */\n    clearCloneSavedCart() {\n        this.store.dispatch(new ClearCloneSavedCart());\n    }\n}\nSavedCartService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: SavedCartService, deps: [{ token: i1.Store }, { token: i2.UserIdService }, { token: i2.UserService }, { token: i2.MultiCartService }, { token: i2.EventService }], target: i0.ɵɵFactoryTarget.Injectable });\nSavedCartService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: SavedCartService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: SavedCartService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1.Store }, { type: i2.UserIdService }, { type: i2.UserService }, { type: i2.MultiCartService }, { type: i2.EventService }]; } });\n\nconst facadeProviders = [\n    SavedCartService,\n    {\n        provide: SavedCartFacade,\n        useExisting: SavedCartService,\n    },\n];\n\nclass SavedCartCoreModule {\n}\nSavedCartCoreModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: SavedCartCoreModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nSavedCartCoreModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: SavedCartCoreModule, imports: [SavedCartStoreModule, SavedCartEventsModule] });\nSavedCartCoreModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: SavedCartCoreModule, providers: [SavedCartConnector, ...facadeProviders], imports: [[SavedCartStoreModule, SavedCartEventsModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: SavedCartCoreModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [SavedCartStoreModule, SavedCartEventsModule],\n                    providers: [SavedCartConnector, ...facadeProviders],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { SAVED_CART_CLONE_CART_PROCESS_ID, SAVED_CART_LIST_PROCESS_ID, SAVED_CART_RESTORE_CART_PROCESS_ID, SAVED_CART_SAVE_CART_PROCESS_ID, savedCart_action as SavedCartActions, SavedCartAdapter, SavedCartConnector, SavedCartCoreModule, SavedCartEventBuilder, SavedCartEventsModule, SavedCartService };\n//# sourceMappingURL=spartacus-cart-saved-cart-core.js.map\n"]},"metadata":{},"sourceType":"module"}