{"ast":null,"code":"import * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, APP_INITIALIZER, NgModule } from '@angular/core';\nimport * as i3 from '@spartacus/storefront';\nimport { PageComponentModule } from '@spartacus/storefront';\nimport * as i1$1 from '@spartacus/core';\nimport { AuthStorageService, AuthActions, OCC_USER_ID_ANONYMOUS, OCC_USER_ID_CURRENT, AuthHttpHeaderService, InterceptorUtil, USE_CUSTOMER_SUPPORT_AGENT_TOKEN, GlobalMessageType, AuthService } from '@spartacus/core';\nimport { map, take, switchMap } from 'rxjs/operators';\nimport { __awaiter } from 'tslib';\nimport { BehaviorSubject, combineLatest, of, from } from 'rxjs';\nimport * as i3$1 from '@ngrx/store';\nconst ASM_ENABLED_LOCAL_STORAGE_KEY = 'asm_enabled';\n/**\n * The AsmEnablerService is used to enable ASM for those scenario's\n * where it's actually used. This service is added to avoid any polution\n * of the UI and runtime performance for the ordinary production user.\n */\n\nclass AsmEnablerService {\n  constructor(location, winRef, launchDialogService, featureModules) {\n    this.location = location;\n    this.winRef = winRef;\n    this.launchDialogService = launchDialogService;\n    this.featureModules = featureModules;\n  }\n  /**\n   * Loads the ASM UI if needed. The ASM UI will be added based on the\n   * existence of a URL parameter or previous usage given by local storage.\n   */\n\n\n  load() {\n    if (this.isEnabled()) {\n      this.addUi();\n    }\n  }\n  /**\n   * Indicates whether the ASM module is enabled.\n   */\n\n\n  isEnabled() {\n    if (this.isLaunched() && !this.isUsedBefore()) {\n      if (this.winRef.localStorage) {\n        this.winRef.localStorage.setItem(ASM_ENABLED_LOCAL_STORAGE_KEY, 'true');\n      }\n    }\n\n    return this.isLaunched() || this.isUsedBefore();\n  }\n  /**\n   * Indicates whether ASM is launched through the URL,\n   * using the asm flag in the URL.\n   */\n\n\n  isLaunched() {\n    const params = this.location.path().split('?')[1];\n    return !!params && params.split('&').includes('asm=true');\n  }\n  /**\n   * Evaluates local storage where we persist the usage of ASM.\n   */\n\n\n  isUsedBefore() {\n    if (this.winRef.localStorage) {\n      return this.winRef.localStorage.getItem(ASM_ENABLED_LOCAL_STORAGE_KEY) === 'true';\n    } else {\n      return false;\n    }\n  }\n  /**\n   * Adds the ASM UI by using the `cx-storefront` outlet.\n   */\n\n\n  addUi() {\n    this.featureModules.resolveFeature('asm').subscribe(() => this.launchDialogService.launch(\"ASM\"\n    /* ASM */\n    ));\n  }\n\n}\n\nAsmEnablerService.ɵfac = function AsmEnablerService_Factory(t) {\n  return new (t || AsmEnablerService)(i0.ɵɵinject(i1.Location), i0.ɵɵinject(i1$1.WindowRef), i0.ɵɵinject(i3.LaunchDialogService), i0.ɵɵinject(i1$1.FeatureModulesService));\n};\n\nAsmEnablerService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: AsmEnablerService,\n  factory: AsmEnablerService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AsmEnablerService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.Location\n    }, {\n      type: i1$1.WindowRef\n    }, {\n      type: i3.LaunchDialogService\n    }, {\n      type: i1$1.FeatureModulesService\n    }];\n  }, null);\n})();\n/**\n * The ASM loader module takes care of loading the ASM UI\n * only in case there's a reason to do so.\n */\n\n\nclass AsmLoaderModule {}\n\nAsmLoaderModule.ɵfac = function AsmLoaderModule_Factory(t) {\n  return new (t || AsmLoaderModule)();\n};\n\nAsmLoaderModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: AsmLoaderModule\n});\nAsmLoaderModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [{\n    provide: APP_INITIALIZER,\n    useFactory: asmFactory,\n    deps: [AsmEnablerService],\n    multi: true\n  }],\n  imports: [[CommonModule, PageComponentModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AsmLoaderModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, PageComponentModule],\n      providers: [{\n        provide: APP_INITIALIZER,\n        useFactory: asmFactory,\n        deps: [AsmEnablerService],\n        multi: true\n      }]\n    }]\n  }], null, null);\n})();\n/**\n *\n * We do not like to block the UI, which is why we delgate loading of ASM\n * to a real component; the router and state aren't available in an optimized\n * way during the APP_INITIALIZER.\n */\n\n\nfunction asmFactory(asmEnablerService) {\n  const isReady = () => {\n    asmEnablerService.load();\n  };\n\n  return isReady;\n}\n/**\n * Indicates if auth token is for regular user or CS Agent.\n */\n\n\nvar TokenTarget;\n\n(function (TokenTarget) {\n  TokenTarget[\"CSAgent\"] = \"CSAgent\";\n  TokenTarget[\"User\"] = \"User\";\n})(TokenTarget || (TokenTarget = {}));\n/**\n * With AsmAuthStorageService apart from storing the token we also need to store\n * information for which user is the token (regular user or CS Agent).\n *\n * Overrides `AuthStorageService`.\n */\n\n\nclass AsmAuthStorageService extends AuthStorageService {\n  constructor() {\n    super(...arguments);\n    this._tokenTarget$ = new BehaviorSubject(TokenTarget.User);\n  }\n  /**\n   * Get target user for current auth token.\n   *\n   * @return observable with TokenTarget\n   */\n\n\n  getTokenTarget() {\n    return this._tokenTarget$;\n  }\n  /**\n   * Set new token target.\n   *\n   * @param tokenTarget\n   */\n\n\n  setTokenTarget(tokenTarget) {\n    this._tokenTarget$.next(tokenTarget);\n  }\n  /**\n   * Get token for previously user session, when it was interrupted by CS agent login.\n   *\n   * @return previously logged in user token.\n   */\n\n\n  getEmulatedUserToken() {\n    return this.emulatedUserToken;\n  }\n  /**\n   * Save user token on CS agent login.\n   *\n   * @param token\n   */\n\n\n  setEmulatedUserToken(token) {\n    this.emulatedUserToken = token;\n  }\n  /**\n   * Change token target to CS Agent.\n   */\n\n\n  switchTokenTargetToCSAgent() {\n    this._tokenTarget$.next(TokenTarget.CSAgent);\n  }\n  /**\n   * Change token target to user.\n   */\n\n\n  switchTokenTargetToUser() {\n    this._tokenTarget$.next(TokenTarget.User);\n  }\n  /**\n   * When we start emulation from the UI (not by ASM login) we can't restore user session on cs agent logout.\n   * Only available solution is to drop session we could restore, to avoid account hijack.\n   */\n\n\n  clearEmulatedUserToken() {\n    this.emulatedUserToken = undefined;\n  }\n\n}\n\nAsmAuthStorageService.ɵfac = /* @__PURE__ */function () {\n  let ɵAsmAuthStorageService_BaseFactory;\n  return function AsmAuthStorageService_Factory(t) {\n    return (ɵAsmAuthStorageService_BaseFactory || (ɵAsmAuthStorageService_BaseFactory = i0.ɵɵgetInheritedFactory(AsmAuthStorageService)))(t || AsmAuthStorageService);\n  };\n}();\n\nAsmAuthStorageService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: AsmAuthStorageService,\n  factory: AsmAuthStorageService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AsmAuthStorageService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n/**\n * Auth service for CS agent. Useful to login/logout agent, start emulation\n * or get information about the status of emulation.\n */\n\n\nclass CsAgentAuthService {\n  constructor(authService, authStorageService, userIdService, oAuthLibWrapperService, store, userService) {\n    this.authService = authService;\n    this.authStorageService = authStorageService;\n    this.userIdService = userIdService;\n    this.oAuthLibWrapperService = oAuthLibWrapperService;\n    this.store = store;\n    this.userService = userService;\n  }\n  /**\n   * Loads access token for a customer support agent.\n   * @param userId\n   * @param password\n   */\n\n\n  authorizeCustomerSupportAgent(userId, password) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let userToken;\n      this.authStorageService.getToken().subscribe(token => userToken = token).unsubscribe();\n      this.authStorageService.switchTokenTargetToCSAgent();\n\n      try {\n        yield this.oAuthLibWrapperService.authorizeWithPasswordFlow(userId, password); // Start emulation for currently logged in user\n\n        let customerId;\n        this.userService.get().subscribe(user => customerId = user === null || user === void 0 ? void 0 : user.customerId).unsubscribe();\n        this.store.dispatch(new AuthActions.Logout());\n\n        if (customerId !== undefined && userToken !== undefined) {\n          // OCC specific user id handling. Customize when implementing different backend\n          this.userIdService.setUserId(customerId);\n          this.authStorageService.setEmulatedUserToken(userToken);\n          this.store.dispatch(new AuthActions.Login());\n        } else {\n          // When we can't get the customerId just end all current sessions\n          this.userIdService.setUserId(OCC_USER_ID_ANONYMOUS);\n          this.authStorageService.clearEmulatedUserToken();\n        }\n      } catch (_a) {\n        this.authStorageService.switchTokenTargetToUser();\n      }\n    });\n  }\n  /**\n   * Starts an ASM customer emulation session.\n   * A customer emulation session is stopped by calling logout().\n   * @param customerId\n   */\n\n\n  startCustomerEmulationSession(customerId) {\n    this.authStorageService.clearEmulatedUserToken(); // OCC specific user id handling. Customize when implementing different backend\n\n    this.store.dispatch(new AuthActions.Logout());\n    this.userIdService.setUserId(customerId);\n    this.store.dispatch(new AuthActions.Login());\n  }\n  /**\n   * Check if CS agent is currently logged in.\n   *\n   * @returns observable emitting true when CS agent is logged in or false when not.\n   */\n\n\n  isCustomerSupportAgentLoggedIn() {\n    return combineLatest([this.authStorageService.getToken(), this.authStorageService.getTokenTarget()]).pipe(map(([token, tokenTarget]) => Boolean((token === null || token === void 0 ? void 0 : token.access_token) && tokenTarget === TokenTarget.CSAgent)));\n  }\n  /**\n   * Utility function to determine if customer is emulated.\n   *\n   * @returns observable emitting true when there is active emulation session or false when not.\n   */\n\n\n  isCustomerEmulated() {\n    return this.userIdService.isEmulated();\n  }\n  /**\n   * Returns the customer support agent's token loading status\n   */\n\n\n  getCustomerSupportAgentTokenLoading() {\n    // TODO(#8248): Create new loading state outside of store\n    return of(false);\n  }\n  /**\n   * Logout a customer support agent.\n   */\n\n\n  logoutCustomerSupportAgent() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const emulatedToken = this.authStorageService.getEmulatedUserToken();\n      let isCustomerEmulated;\n      this.userIdService.isEmulated().subscribe(emulated => isCustomerEmulated = emulated).unsubscribe();\n      yield this.oAuthLibWrapperService.revokeAndLogout();\n      this.store.dispatch({\n        type: '[Auth] Logout Customer Support Agent'\n      });\n      this.authStorageService.setTokenTarget(TokenTarget.User);\n\n      if (isCustomerEmulated && emulatedToken) {\n        this.store.dispatch(new AuthActions.Logout());\n        this.authStorageService.setToken(emulatedToken);\n        this.userIdService.setUserId(OCC_USER_ID_CURRENT);\n        this.authStorageService.clearEmulatedUserToken();\n        this.store.dispatch(new AuthActions.Login());\n      } else {\n        this.authService.logout();\n      }\n    });\n  }\n\n}\n\nCsAgentAuthService.ɵfac = function CsAgentAuthService_Factory(t) {\n  return new (t || CsAgentAuthService)(i0.ɵɵinject(i1$1.AuthService), i0.ɵɵinject(AsmAuthStorageService), i0.ɵɵinject(i1$1.UserIdService), i0.ɵɵinject(i1$1.OAuthLibWrapperService), i0.ɵɵinject(i3$1.Store), i0.ɵɵinject(i1$1.UserService));\n};\n\nCsAgentAuthService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: CsAgentAuthService,\n  factory: CsAgentAuthService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CsAgentAuthService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1$1.AuthService\n    }, {\n      type: AsmAuthStorageService\n    }, {\n      type: i1$1.UserIdService\n    }, {\n      type: i1$1.OAuthLibWrapperService\n    }, {\n      type: i3$1.Store\n    }, {\n      type: i1$1.UserService\n    }];\n  }, null);\n})();\n/**\n * Overrides `AuthHttpHeaderService` to handle asm calls as well (not only OCC)\n * in cases of normal user session and on customer emulation.\n */\n\n\nclass AsmAuthHttpHeaderService extends AuthHttpHeaderService {\n  constructor(authService, authStorageService, csAgentAuthService, oAuthLibWrapperService, routingService, globalMessageService, occEndpointsService, authRedirectService) {\n    super(authService, authStorageService, oAuthLibWrapperService, routingService, occEndpointsService, globalMessageService, authRedirectService);\n    this.authService = authService;\n    this.authStorageService = authStorageService;\n    this.csAgentAuthService = csAgentAuthService;\n    this.oAuthLibWrapperService = oAuthLibWrapperService;\n    this.routingService = routingService;\n    this.globalMessageService = globalMessageService;\n    this.occEndpointsService = occEndpointsService;\n    this.authRedirectService = authRedirectService;\n  }\n  /**\n   * Checks if the authorization header should be added to the request\n   *\n   *  @override\n   */\n\n\n  shouldAddAuthorizationHeader(request) {\n    return super.shouldAddAuthorizationHeader(request) || this.isCSAgentTokenRequest(request);\n  }\n  /**\n   * @override\n   *\n   * Checks if particular request should be handled by this service.\n   */\n\n\n  shouldCatchError(request) {\n    return super.shouldCatchError(request) || this.isCSAgentTokenRequest(request);\n  }\n  /**\n   * @override\n   *\n   * Adds `Authorization` header to occ and CS agent requests.\n   * For CS agent requests also removes the `cx-use-csagent-token` header (to avoid problems with CORS).\n   */\n\n\n  alterRequest(request, token) {\n    const hasAuthorizationHeader = !!this.getAuthorizationHeader(request);\n    const isCSAgentRequest = this.isCSAgentTokenRequest(request);\n    let req = super.alterRequest(request, token);\n\n    if (!hasAuthorizationHeader && isCSAgentRequest) {\n      req = request.clone({\n        setHeaders: Object.assign({}, this.createAuthorizationHeader(token))\n      });\n      return InterceptorUtil.removeHeader(USE_CUSTOMER_SUPPORT_AGENT_TOKEN, req);\n    }\n\n    return req;\n  }\n\n  isCSAgentTokenRequest(request) {\n    const isRequestWithCSAgentToken = InterceptorUtil.getInterceptorParam(USE_CUSTOMER_SUPPORT_AGENT_TOKEN, request.headers);\n    return Boolean(isRequestWithCSAgentToken);\n  }\n  /**\n   * @override\n   *\n   * On backend errors indicating expired `refresh_token` we need to logout\n   * currently logged in user and CS agent.\n   */\n\n\n  handleExpiredRefreshToken() {\n    this.csAgentAuthService.isCustomerSupportAgentLoggedIn().pipe(take(1)).subscribe(csAgentLoggedIn => {\n      if (csAgentLoggedIn) {\n        this.authService.setLogoutProgress(true);\n        this.csAgentAuthService.logoutCustomerSupportAgent();\n        this.globalMessageService.add({\n          key: 'asm.csagentTokenExpired'\n        }, GlobalMessageType.MSG_TYPE_ERROR);\n      } else {\n        super.handleExpiredRefreshToken();\n      }\n    });\n  }\n\n}\n\nAsmAuthHttpHeaderService.ɵfac = function AsmAuthHttpHeaderService_Factory(t) {\n  return new (t || AsmAuthHttpHeaderService)(i0.ɵɵinject(i1$1.AuthService), i0.ɵɵinject(i1$1.AuthStorageService), i0.ɵɵinject(CsAgentAuthService), i0.ɵɵinject(i1$1.OAuthLibWrapperService), i0.ɵɵinject(i1$1.RoutingService), i0.ɵɵinject(i1$1.GlobalMessageService), i0.ɵɵinject(i1$1.OccEndpointsService), i0.ɵɵinject(i1$1.AuthRedirectService));\n};\n\nAsmAuthHttpHeaderService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: AsmAuthHttpHeaderService,\n  factory: AsmAuthHttpHeaderService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AsmAuthHttpHeaderService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1$1.AuthService\n    }, {\n      type: i1$1.AuthStorageService\n    }, {\n      type: CsAgentAuthService\n    }, {\n      type: i1$1.OAuthLibWrapperService\n    }, {\n      type: i1$1.RoutingService\n    }, {\n      type: i1$1.GlobalMessageService\n    }, {\n      type: i1$1.OccEndpointsService\n    }, {\n      type: i1$1.AuthRedirectService\n    }];\n  }, null);\n})();\n/**\n * Version of AuthService that is working for both user na CS agent.\n * Overrides AuthService when ASM module is enabled.\n */\n\n\nclass AsmAuthService extends AuthService {\n  constructor(store, userIdService, oAuthLibWrapperService, authStorageService, authRedirectService, globalMessageService, routingService) {\n    super(store, userIdService, oAuthLibWrapperService, authStorageService, authRedirectService, routingService);\n    this.store = store;\n    this.userIdService = userIdService;\n    this.oAuthLibWrapperService = oAuthLibWrapperService;\n    this.authStorageService = authStorageService;\n    this.authRedirectService = authRedirectService;\n    this.globalMessageService = globalMessageService;\n    this.routingService = routingService;\n  }\n\n  canUserLogin() {\n    let tokenTarget;\n    let token;\n    this.authStorageService.getToken().subscribe(tok => token = tok).unsubscribe();\n    this.authStorageService.getTokenTarget().subscribe(tokTarget => tokenTarget = tokTarget).unsubscribe();\n    return !(Boolean(token === null || token === void 0 ? void 0 : token.access_token) && tokenTarget === TokenTarget.CSAgent);\n  }\n\n  warnAboutLoggedCSAgent() {\n    this.globalMessageService.add({\n      key: 'asm.auth.agentLoggedInError'\n    }, GlobalMessageType.MSG_TYPE_ERROR);\n  }\n  /**\n   * Loads a new user token with Resource Owner Password Flow when CS agent is not logged in.\n   * @param userId\n   * @param password\n   */\n\n\n  loginWithCredentials(userId, password) {\n    const _super = Object.create(null, {\n      loginWithCredentials: {\n        get: () => super.loginWithCredentials\n      }\n    });\n\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.canUserLogin()) {\n        yield _super.loginWithCredentials.call(this, userId, password);\n      } else {\n        this.warnAboutLoggedCSAgent();\n      }\n    });\n  }\n  /**\n   * Initialize Implicit/Authorization Code flow by redirecting to OAuth server when CS agent is not logged in.\n   */\n\n\n  loginWithRedirect() {\n    if (this.canUserLogin()) {\n      super.loginWithRedirect();\n      return true;\n    } else {\n      this.warnAboutLoggedCSAgent();\n      return false;\n    }\n  }\n  /**\n   * Revokes tokens and clears state for logged user (tokens, userId).\n   * To perform logout it is best to use `logout` method. Use this method with caution.\n   */\n\n\n  coreLogout() {\n    return this.userIdService.isEmulated().pipe(take(1), switchMap(isEmulated => {\n      if (isEmulated) {\n        this.authStorageService.clearEmulatedUserToken();\n        this.userIdService.clearUserId();\n        this.store.dispatch(new AuthActions.Logout());\n        return of(true);\n      } else {\n        return from(super.coreLogout());\n      }\n    })).toPromise();\n  }\n  /**\n   * Returns `true` if user is logged in or being emulated.\n   */\n\n\n  isUserLoggedIn() {\n    return combineLatest([this.authStorageService.getToken(), this.userIdService.isEmulated(), this.authStorageService.getTokenTarget()]).pipe(map(([token, isEmulated, tokenTarget]) => Boolean(token === null || token === void 0 ? void 0 : token.access_token) && (tokenTarget === TokenTarget.User || tokenTarget === TokenTarget.CSAgent && isEmulated)));\n  }\n\n}\n\nAsmAuthService.ɵfac = function AsmAuthService_Factory(t) {\n  return new (t || AsmAuthService)(i0.ɵɵinject(i3$1.Store), i0.ɵɵinject(i1$1.UserIdService), i0.ɵɵinject(i1$1.OAuthLibWrapperService), i0.ɵɵinject(AsmAuthStorageService), i0.ɵɵinject(i1$1.AuthRedirectService), i0.ɵɵinject(i1$1.GlobalMessageService), i0.ɵɵinject(i1$1.RoutingService));\n};\n\nAsmAuthService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: AsmAuthService,\n  factory: AsmAuthService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AsmAuthService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i3$1.Store\n    }, {\n      type: i1$1.UserIdService\n    }, {\n      type: i1$1.OAuthLibWrapperService\n    }, {\n      type: AsmAuthStorageService\n    }, {\n      type: i1$1.AuthRedirectService\n    }, {\n      type: i1$1.GlobalMessageService\n    }, {\n      type: i1$1.RoutingService\n    }];\n  }, null);\n})();\n\nclass AsmRootModule {}\n\nAsmRootModule.ɵfac = function AsmRootModule_Factory(t) {\n  return new (t || AsmRootModule)();\n};\n\nAsmRootModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: AsmRootModule\n});\nAsmRootModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [{\n    provide: AuthStorageService,\n    useExisting: AsmAuthStorageService\n  }, {\n    provide: AuthService,\n    useExisting: AsmAuthService\n  }, {\n    provide: AuthHttpHeaderService,\n    useExisting: AsmAuthHttpHeaderService\n  }],\n  imports: [[AsmLoaderModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AsmRootModule, [{\n    type: NgModule,\n    args: [{\n      imports: [AsmLoaderModule],\n      providers: [{\n        provide: AuthStorageService,\n        useExisting: AsmAuthStorageService\n      }, {\n        provide: AuthService,\n        useExisting: AsmAuthService\n      }, {\n        provide: AuthHttpHeaderService,\n        useExisting: AsmAuthHttpHeaderService\n      }]\n    }]\n  }], null, null);\n})();\n\nconst ASM_FEATURE = 'asm';\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ASM_ENABLED_LOCAL_STORAGE_KEY, ASM_FEATURE, AsmAuthHttpHeaderService, AsmAuthService, AsmAuthStorageService, AsmEnablerService, AsmLoaderModule, AsmRootModule, CsAgentAuthService, TokenTarget, asmFactory }; //# sourceMappingURL=spartacus-asm-root.js.map","map":{"version":3,"sources":["D:/spartacus/front-store/node_modules/@spartacus/asm/fesm2015/spartacus-asm-root.js"],"names":["i1","CommonModule","i0","Injectable","APP_INITIALIZER","NgModule","i3","PageComponentModule","i1$1","AuthStorageService","AuthActions","OCC_USER_ID_ANONYMOUS","OCC_USER_ID_CURRENT","AuthHttpHeaderService","InterceptorUtil","USE_CUSTOMER_SUPPORT_AGENT_TOKEN","GlobalMessageType","AuthService","map","take","switchMap","__awaiter","BehaviorSubject","combineLatest","of","from","i3$1","ASM_ENABLED_LOCAL_STORAGE_KEY","AsmEnablerService","constructor","location","winRef","launchDialogService","featureModules","load","isEnabled","addUi","isLaunched","isUsedBefore","localStorage","setItem","params","path","split","includes","getItem","resolveFeature","subscribe","launch","ɵfac","Location","WindowRef","LaunchDialogService","FeatureModulesService","ɵprov","type","args","providedIn","AsmLoaderModule","ɵmod","ɵinj","provide","useFactory","asmFactory","deps","multi","imports","providers","asmEnablerService","isReady","TokenTarget","AsmAuthStorageService","arguments","_tokenTarget$","User","getTokenTarget","setTokenTarget","tokenTarget","next","getEmulatedUserToken","emulatedUserToken","setEmulatedUserToken","token","switchTokenTargetToCSAgent","CSAgent","switchTokenTargetToUser","clearEmulatedUserToken","undefined","CsAgentAuthService","authService","authStorageService","userIdService","oAuthLibWrapperService","store","userService","authorizeCustomerSupportAgent","userId","password","userToken","getToken","unsubscribe","authorizeWithPasswordFlow","customerId","get","user","dispatch","Logout","setUserId","Login","_a","startCustomerEmulationSession","isCustomerSupportAgentLoggedIn","pipe","Boolean","access_token","isCustomerEmulated","isEmulated","getCustomerSupportAgentTokenLoading","logoutCustomerSupportAgent","emulatedToken","emulated","revokeAndLogout","setToken","logout","UserIdService","OAuthLibWrapperService","Store","UserService","AsmAuthHttpHeaderService","csAgentAuthService","routingService","globalMessageService","occEndpointsService","authRedirectService","shouldAddAuthorizationHeader","request","isCSAgentTokenRequest","shouldCatchError","alterRequest","hasAuthorizationHeader","getAuthorizationHeader","isCSAgentRequest","req","clone","setHeaders","Object","assign","createAuthorizationHeader","removeHeader","isRequestWithCSAgentToken","getInterceptorParam","headers","handleExpiredRefreshToken","csAgentLoggedIn","setLogoutProgress","add","key","MSG_TYPE_ERROR","RoutingService","GlobalMessageService","OccEndpointsService","AuthRedirectService","AsmAuthService","canUserLogin","tok","tokTarget","warnAboutLoggedCSAgent","loginWithCredentials","_super","create","call","loginWithRedirect","coreLogout","clearUserId","toPromise","isUserLoggedIn","AsmRootModule","useExisting","ASM_FEATURE"],"mappings":"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","sourcesContent":["import * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, APP_INITIALIZER, NgModule } from '@angular/core';\nimport * as i3 from '@spartacus/storefront';\nimport { PageComponentModule } from '@spartacus/storefront';\nimport * as i1$1 from '@spartacus/core';\nimport { AuthStorageService, AuthActions, OCC_USER_ID_ANONYMOUS, OCC_USER_ID_CURRENT, AuthHttpHeaderService, InterceptorUtil, USE_CUSTOMER_SUPPORT_AGENT_TOKEN, GlobalMessageType, AuthService } from '@spartacus/core';\nimport { map, take, switchMap } from 'rxjs/operators';\nimport { __awaiter } from 'tslib';\nimport { BehaviorSubject, combineLatest, of, from } from 'rxjs';\nimport * as i3$1 from '@ngrx/store';\n\nconst ASM_ENABLED_LOCAL_STORAGE_KEY = 'asm_enabled';\n\n/**\n * The AsmEnablerService is used to enable ASM for those scenario's\n * where it's actually used. This service is added to avoid any polution\n * of the UI and runtime performance for the ordinary production user.\n */\nclass AsmEnablerService {\n    constructor(location, winRef, launchDialogService, featureModules) {\n        this.location = location;\n        this.winRef = winRef;\n        this.launchDialogService = launchDialogService;\n        this.featureModules = featureModules;\n    }\n    /**\n     * Loads the ASM UI if needed. The ASM UI will be added based on the\n     * existence of a URL parameter or previous usage given by local storage.\n     */\n    load() {\n        if (this.isEnabled()) {\n            this.addUi();\n        }\n    }\n    /**\n     * Indicates whether the ASM module is enabled.\n     */\n    isEnabled() {\n        if (this.isLaunched() && !this.isUsedBefore()) {\n            if (this.winRef.localStorage) {\n                this.winRef.localStorage.setItem(ASM_ENABLED_LOCAL_STORAGE_KEY, 'true');\n            }\n        }\n        return this.isLaunched() || this.isUsedBefore();\n    }\n    /**\n     * Indicates whether ASM is launched through the URL,\n     * using the asm flag in the URL.\n     */\n    isLaunched() {\n        const params = this.location.path().split('?')[1];\n        return !!params && params.split('&').includes('asm=true');\n    }\n    /**\n     * Evaluates local storage where we persist the usage of ASM.\n     */\n    isUsedBefore() {\n        if (this.winRef.localStorage) {\n            return (this.winRef.localStorage.getItem(ASM_ENABLED_LOCAL_STORAGE_KEY) ===\n                'true');\n        }\n        else {\n            return false;\n        }\n    }\n    /**\n     * Adds the ASM UI by using the `cx-storefront` outlet.\n     */\n    addUi() {\n        this.featureModules\n            .resolveFeature('asm')\n            .subscribe(() => this.launchDialogService.launch(\"ASM\" /* ASM */));\n    }\n}\nAsmEnablerService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmEnablerService, deps: [{ token: i1.Location }, { token: i1$1.WindowRef }, { token: i3.LaunchDialogService }, { token: i1$1.FeatureModulesService }], target: i0.ɵɵFactoryTarget.Injectable });\nAsmEnablerService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmEnablerService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmEnablerService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }], ctorParameters: function () { return [{ type: i1.Location }, { type: i1$1.WindowRef }, { type: i3.LaunchDialogService }, { type: i1$1.FeatureModulesService }]; } });\n\n/**\n * The ASM loader module takes care of loading the ASM UI\n * only in case there's a reason to do so.\n */\nclass AsmLoaderModule {\n}\nAsmLoaderModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmLoaderModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nAsmLoaderModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmLoaderModule, imports: [CommonModule, PageComponentModule] });\nAsmLoaderModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmLoaderModule, providers: [\n        {\n            provide: APP_INITIALIZER,\n            useFactory: asmFactory,\n            deps: [AsmEnablerService],\n            multi: true,\n        },\n    ], imports: [[CommonModule, PageComponentModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmLoaderModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, PageComponentModule],\n                    providers: [\n                        {\n                            provide: APP_INITIALIZER,\n                            useFactory: asmFactory,\n                            deps: [AsmEnablerService],\n                            multi: true,\n                        },\n                    ],\n                }]\n        }] });\n/**\n *\n * We do not like to block the UI, which is why we delgate loading of ASM\n * to a real component; the router and state aren't available in an optimized\n * way during the APP_INITIALIZER.\n */\nfunction asmFactory(asmEnablerService) {\n    const isReady = () => {\n        asmEnablerService.load();\n    };\n    return isReady;\n}\n\n/**\n * Indicates if auth token is for regular user or CS Agent.\n */\nvar TokenTarget;\n(function (TokenTarget) {\n    TokenTarget[\"CSAgent\"] = \"CSAgent\";\n    TokenTarget[\"User\"] = \"User\";\n})(TokenTarget || (TokenTarget = {}));\n/**\n * With AsmAuthStorageService apart from storing the token we also need to store\n * information for which user is the token (regular user or CS Agent).\n *\n * Overrides `AuthStorageService`.\n */\nclass AsmAuthStorageService extends AuthStorageService {\n    constructor() {\n        super(...arguments);\n        this._tokenTarget$ = new BehaviorSubject(TokenTarget.User);\n    }\n    /**\n     * Get target user for current auth token.\n     *\n     * @return observable with TokenTarget\n     */\n    getTokenTarget() {\n        return this._tokenTarget$;\n    }\n    /**\n     * Set new token target.\n     *\n     * @param tokenTarget\n     */\n    setTokenTarget(tokenTarget) {\n        this._tokenTarget$.next(tokenTarget);\n    }\n    /**\n     * Get token for previously user session, when it was interrupted by CS agent login.\n     *\n     * @return previously logged in user token.\n     */\n    getEmulatedUserToken() {\n        return this.emulatedUserToken;\n    }\n    /**\n     * Save user token on CS agent login.\n     *\n     * @param token\n     */\n    setEmulatedUserToken(token) {\n        this.emulatedUserToken = token;\n    }\n    /**\n     * Change token target to CS Agent.\n     */\n    switchTokenTargetToCSAgent() {\n        this._tokenTarget$.next(TokenTarget.CSAgent);\n    }\n    /**\n     * Change token target to user.\n     */\n    switchTokenTargetToUser() {\n        this._tokenTarget$.next(TokenTarget.User);\n    }\n    /**\n     * When we start emulation from the UI (not by ASM login) we can't restore user session on cs agent logout.\n     * Only available solution is to drop session we could restore, to avoid account hijack.\n     */\n    clearEmulatedUserToken() {\n        this.emulatedUserToken = undefined;\n    }\n}\nAsmAuthStorageService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmAuthStorageService, deps: null, target: i0.ɵɵFactoryTarget.Injectable });\nAsmAuthStorageService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmAuthStorageService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmAuthStorageService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }] });\n\n/**\n * Auth service for CS agent. Useful to login/logout agent, start emulation\n * or get information about the status of emulation.\n */\nclass CsAgentAuthService {\n    constructor(authService, authStorageService, userIdService, oAuthLibWrapperService, store, userService) {\n        this.authService = authService;\n        this.authStorageService = authStorageService;\n        this.userIdService = userIdService;\n        this.oAuthLibWrapperService = oAuthLibWrapperService;\n        this.store = store;\n        this.userService = userService;\n    }\n    /**\n     * Loads access token for a customer support agent.\n     * @param userId\n     * @param password\n     */\n    authorizeCustomerSupportAgent(userId, password) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let userToken;\n            this.authStorageService\n                .getToken()\n                .subscribe((token) => (userToken = token))\n                .unsubscribe();\n            this.authStorageService.switchTokenTargetToCSAgent();\n            try {\n                yield this.oAuthLibWrapperService.authorizeWithPasswordFlow(userId, password);\n                // Start emulation for currently logged in user\n                let customerId;\n                this.userService\n                    .get()\n                    .subscribe((user) => (customerId = user === null || user === void 0 ? void 0 : user.customerId))\n                    .unsubscribe();\n                this.store.dispatch(new AuthActions.Logout());\n                if (customerId !== undefined && userToken !== undefined) {\n                    // OCC specific user id handling. Customize when implementing different backend\n                    this.userIdService.setUserId(customerId);\n                    this.authStorageService.setEmulatedUserToken(userToken);\n                    this.store.dispatch(new AuthActions.Login());\n                }\n                else {\n                    // When we can't get the customerId just end all current sessions\n                    this.userIdService.setUserId(OCC_USER_ID_ANONYMOUS);\n                    this.authStorageService.clearEmulatedUserToken();\n                }\n            }\n            catch (_a) {\n                this.authStorageService.switchTokenTargetToUser();\n            }\n        });\n    }\n    /**\n     * Starts an ASM customer emulation session.\n     * A customer emulation session is stopped by calling logout().\n     * @param customerId\n     */\n    startCustomerEmulationSession(customerId) {\n        this.authStorageService.clearEmulatedUserToken();\n        // OCC specific user id handling. Customize when implementing different backend\n        this.store.dispatch(new AuthActions.Logout());\n        this.userIdService.setUserId(customerId);\n        this.store.dispatch(new AuthActions.Login());\n    }\n    /**\n     * Check if CS agent is currently logged in.\n     *\n     * @returns observable emitting true when CS agent is logged in or false when not.\n     */\n    isCustomerSupportAgentLoggedIn() {\n        return combineLatest([\n            this.authStorageService.getToken(),\n            this.authStorageService.getTokenTarget(),\n        ]).pipe(map(([token, tokenTarget]) => Boolean((token === null || token === void 0 ? void 0 : token.access_token) && tokenTarget === TokenTarget.CSAgent)));\n    }\n    /**\n     * Utility function to determine if customer is emulated.\n     *\n     * @returns observable emitting true when there is active emulation session or false when not.\n     */\n    isCustomerEmulated() {\n        return this.userIdService.isEmulated();\n    }\n    /**\n     * Returns the customer support agent's token loading status\n     */\n    getCustomerSupportAgentTokenLoading() {\n        // TODO(#8248): Create new loading state outside of store\n        return of(false);\n    }\n    /**\n     * Logout a customer support agent.\n     */\n    logoutCustomerSupportAgent() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const emulatedToken = this.authStorageService.getEmulatedUserToken();\n            let isCustomerEmulated;\n            this.userIdService\n                .isEmulated()\n                .subscribe((emulated) => (isCustomerEmulated = emulated))\n                .unsubscribe();\n            yield this.oAuthLibWrapperService.revokeAndLogout();\n            this.store.dispatch({ type: '[Auth] Logout Customer Support Agent' });\n            this.authStorageService.setTokenTarget(TokenTarget.User);\n            if (isCustomerEmulated && emulatedToken) {\n                this.store.dispatch(new AuthActions.Logout());\n                this.authStorageService.setToken(emulatedToken);\n                this.userIdService.setUserId(OCC_USER_ID_CURRENT);\n                this.authStorageService.clearEmulatedUserToken();\n                this.store.dispatch(new AuthActions.Login());\n            }\n            else {\n                this.authService.logout();\n            }\n        });\n    }\n}\nCsAgentAuthService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: CsAgentAuthService, deps: [{ token: i1$1.AuthService }, { token: AsmAuthStorageService }, { token: i1$1.UserIdService }, { token: i1$1.OAuthLibWrapperService }, { token: i3$1.Store }, { token: i1$1.UserService }], target: i0.ɵɵFactoryTarget.Injectable });\nCsAgentAuthService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: CsAgentAuthService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: CsAgentAuthService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }], ctorParameters: function () { return [{ type: i1$1.AuthService }, { type: AsmAuthStorageService }, { type: i1$1.UserIdService }, { type: i1$1.OAuthLibWrapperService }, { type: i3$1.Store }, { type: i1$1.UserService }]; } });\n\n/**\n * Overrides `AuthHttpHeaderService` to handle asm calls as well (not only OCC)\n * in cases of normal user session and on customer emulation.\n */\nclass AsmAuthHttpHeaderService extends AuthHttpHeaderService {\n    constructor(authService, authStorageService, csAgentAuthService, oAuthLibWrapperService, routingService, globalMessageService, occEndpointsService, authRedirectService) {\n        super(authService, authStorageService, oAuthLibWrapperService, routingService, occEndpointsService, globalMessageService, authRedirectService);\n        this.authService = authService;\n        this.authStorageService = authStorageService;\n        this.csAgentAuthService = csAgentAuthService;\n        this.oAuthLibWrapperService = oAuthLibWrapperService;\n        this.routingService = routingService;\n        this.globalMessageService = globalMessageService;\n        this.occEndpointsService = occEndpointsService;\n        this.authRedirectService = authRedirectService;\n    }\n    /**\n     * Checks if the authorization header should be added to the request\n     *\n     *  @override\n     */\n    shouldAddAuthorizationHeader(request) {\n        return (super.shouldAddAuthorizationHeader(request) ||\n            this.isCSAgentTokenRequest(request));\n    }\n    /**\n     * @override\n     *\n     * Checks if particular request should be handled by this service.\n     */\n    shouldCatchError(request) {\n        return (super.shouldCatchError(request) || this.isCSAgentTokenRequest(request));\n    }\n    /**\n     * @override\n     *\n     * Adds `Authorization` header to occ and CS agent requests.\n     * For CS agent requests also removes the `cx-use-csagent-token` header (to avoid problems with CORS).\n     */\n    alterRequest(request, token) {\n        const hasAuthorizationHeader = !!this.getAuthorizationHeader(request);\n        const isCSAgentRequest = this.isCSAgentTokenRequest(request);\n        let req = super.alterRequest(request, token);\n        if (!hasAuthorizationHeader && isCSAgentRequest) {\n            req = request.clone({\n                setHeaders: Object.assign({}, this.createAuthorizationHeader(token)),\n            });\n            return InterceptorUtil.removeHeader(USE_CUSTOMER_SUPPORT_AGENT_TOKEN, req);\n        }\n        return req;\n    }\n    isCSAgentTokenRequest(request) {\n        const isRequestWithCSAgentToken = InterceptorUtil.getInterceptorParam(USE_CUSTOMER_SUPPORT_AGENT_TOKEN, request.headers);\n        return Boolean(isRequestWithCSAgentToken);\n    }\n    /**\n     * @override\n     *\n     * On backend errors indicating expired `refresh_token` we need to logout\n     * currently logged in user and CS agent.\n     */\n    handleExpiredRefreshToken() {\n        this.csAgentAuthService\n            .isCustomerSupportAgentLoggedIn()\n            .pipe(take(1))\n            .subscribe((csAgentLoggedIn) => {\n            if (csAgentLoggedIn) {\n                this.authService.setLogoutProgress(true);\n                this.csAgentAuthService.logoutCustomerSupportAgent();\n                this.globalMessageService.add({\n                    key: 'asm.csagentTokenExpired',\n                }, GlobalMessageType.MSG_TYPE_ERROR);\n            }\n            else {\n                super.handleExpiredRefreshToken();\n            }\n        });\n    }\n}\nAsmAuthHttpHeaderService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmAuthHttpHeaderService, deps: [{ token: i1$1.AuthService }, { token: i1$1.AuthStorageService }, { token: CsAgentAuthService }, { token: i1$1.OAuthLibWrapperService }, { token: i1$1.RoutingService }, { token: i1$1.GlobalMessageService }, { token: i1$1.OccEndpointsService }, { token: i1$1.AuthRedirectService }], target: i0.ɵɵFactoryTarget.Injectable });\nAsmAuthHttpHeaderService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmAuthHttpHeaderService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmAuthHttpHeaderService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }], ctorParameters: function () { return [{ type: i1$1.AuthService }, { type: i1$1.AuthStorageService }, { type: CsAgentAuthService }, { type: i1$1.OAuthLibWrapperService }, { type: i1$1.RoutingService }, { type: i1$1.GlobalMessageService }, { type: i1$1.OccEndpointsService }, { type: i1$1.AuthRedirectService }]; } });\n\n/**\n * Version of AuthService that is working for both user na CS agent.\n * Overrides AuthService when ASM module is enabled.\n */\nclass AsmAuthService extends AuthService {\n    constructor(store, userIdService, oAuthLibWrapperService, authStorageService, authRedirectService, globalMessageService, routingService) {\n        super(store, userIdService, oAuthLibWrapperService, authStorageService, authRedirectService, routingService);\n        this.store = store;\n        this.userIdService = userIdService;\n        this.oAuthLibWrapperService = oAuthLibWrapperService;\n        this.authStorageService = authStorageService;\n        this.authRedirectService = authRedirectService;\n        this.globalMessageService = globalMessageService;\n        this.routingService = routingService;\n    }\n    canUserLogin() {\n        let tokenTarget;\n        let token;\n        this.authStorageService\n            .getToken()\n            .subscribe((tok) => (token = tok))\n            .unsubscribe();\n        this.authStorageService\n            .getTokenTarget()\n            .subscribe((tokTarget) => (tokenTarget = tokTarget))\n            .unsubscribe();\n        return !(Boolean(token === null || token === void 0 ? void 0 : token.access_token) && tokenTarget === TokenTarget.CSAgent);\n    }\n    warnAboutLoggedCSAgent() {\n        this.globalMessageService.add({\n            key: 'asm.auth.agentLoggedInError',\n        }, GlobalMessageType.MSG_TYPE_ERROR);\n    }\n    /**\n     * Loads a new user token with Resource Owner Password Flow when CS agent is not logged in.\n     * @param userId\n     * @param password\n     */\n    loginWithCredentials(userId, password) {\n        const _super = Object.create(null, {\n            loginWithCredentials: { get: () => super.loginWithCredentials }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.canUserLogin()) {\n                yield _super.loginWithCredentials.call(this, userId, password);\n            }\n            else {\n                this.warnAboutLoggedCSAgent();\n            }\n        });\n    }\n    /**\n     * Initialize Implicit/Authorization Code flow by redirecting to OAuth server when CS agent is not logged in.\n     */\n    loginWithRedirect() {\n        if (this.canUserLogin()) {\n            super.loginWithRedirect();\n            return true;\n        }\n        else {\n            this.warnAboutLoggedCSAgent();\n            return false;\n        }\n    }\n    /**\n     * Revokes tokens and clears state for logged user (tokens, userId).\n     * To perform logout it is best to use `logout` method. Use this method with caution.\n     */\n    coreLogout() {\n        return this.userIdService\n            .isEmulated()\n            .pipe(take(1), switchMap((isEmulated) => {\n            if (isEmulated) {\n                this.authStorageService.clearEmulatedUserToken();\n                this.userIdService.clearUserId();\n                this.store.dispatch(new AuthActions.Logout());\n                return of(true);\n            }\n            else {\n                return from(super.coreLogout());\n            }\n        }))\n            .toPromise();\n    }\n    /**\n     * Returns `true` if user is logged in or being emulated.\n     */\n    isUserLoggedIn() {\n        return combineLatest([\n            this.authStorageService.getToken(),\n            this.userIdService.isEmulated(),\n            this.authStorageService.getTokenTarget(),\n        ]).pipe(map(([token, isEmulated, tokenTarget]) => Boolean(token === null || token === void 0 ? void 0 : token.access_token) &&\n            (tokenTarget === TokenTarget.User ||\n                (tokenTarget === TokenTarget.CSAgent && isEmulated))));\n    }\n}\nAsmAuthService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmAuthService, deps: [{ token: i3$1.Store }, { token: i1$1.UserIdService }, { token: i1$1.OAuthLibWrapperService }, { token: AsmAuthStorageService }, { token: i1$1.AuthRedirectService }, { token: i1$1.GlobalMessageService }, { token: i1$1.RoutingService }], target: i0.ɵɵFactoryTarget.Injectable });\nAsmAuthService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmAuthService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmAuthService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }], ctorParameters: function () { return [{ type: i3$1.Store }, { type: i1$1.UserIdService }, { type: i1$1.OAuthLibWrapperService }, { type: AsmAuthStorageService }, { type: i1$1.AuthRedirectService }, { type: i1$1.GlobalMessageService }, { type: i1$1.RoutingService }]; } });\n\nclass AsmRootModule {\n}\nAsmRootModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmRootModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nAsmRootModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmRootModule, imports: [AsmLoaderModule] });\nAsmRootModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmRootModule, providers: [\n        {\n            provide: AuthStorageService,\n            useExisting: AsmAuthStorageService,\n        },\n        {\n            provide: AuthService,\n            useExisting: AsmAuthService,\n        },\n        {\n            provide: AuthHttpHeaderService,\n            useExisting: AsmAuthHttpHeaderService,\n        },\n    ], imports: [[AsmLoaderModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmRootModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [AsmLoaderModule],\n                    providers: [\n                        {\n                            provide: AuthStorageService,\n                            useExisting: AsmAuthStorageService,\n                        },\n                        {\n                            provide: AuthService,\n                            useExisting: AsmAuthService,\n                        },\n                        {\n                            provide: AuthHttpHeaderService,\n                            useExisting: AsmAuthHttpHeaderService,\n                        },\n                    ],\n                }]\n        }] });\n\nconst ASM_FEATURE = 'asm';\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ASM_ENABLED_LOCAL_STORAGE_KEY, ASM_FEATURE, AsmAuthHttpHeaderService, AsmAuthService, AsmAuthStorageService, AsmEnablerService, AsmLoaderModule, AsmRootModule, CsAgentAuthService, TokenTarget, asmFactory };\n//# sourceMappingURL=spartacus-asm-root.js.map\n"]},"metadata":{},"sourceType":"module"}