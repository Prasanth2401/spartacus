{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, NgModule } from '@angular/core';\nimport * as i2 from '@spartacus/core';\nimport { CommandStrategy, LanguageSetEvent, UserActions } from '@spartacus/core';\nimport { switchMap, take, tap, map } from 'rxjs/operators';\nimport * as i1 from '@spartacus/user/account/root';\nimport { UserAccountChangedEvent } from '@spartacus/user/account/root';\nimport * as i4 from '@ngrx/store';\nimport { UserEmailFacade, UserPasswordFacade, UserProfileFacade, UserRegisterFacade } from '@spartacus/user/profile/root';\nconst USER_PROFILE_NORMALIZER = new InjectionToken('UserProfileNormalizer');\nconst USER_PROFILE_SERIALIZER = new InjectionToken('UserProfileSerializer');\nconst USER_SERIALIZER = new InjectionToken('UserSerializer');\nconst USER_SIGN_UP_SERIALIZER = new InjectionToken('UserSignUpSerializer');\nconst TITLE_NORMALIZER = new InjectionToken('TitleNormalizer');\n\nclass UserProfileAdapter {}\n\nclass UserProfileConnector {\n  constructor(userProfileAdapter) {\n    this.userProfileAdapter = userProfileAdapter;\n  }\n\n  update(username, user) {\n    return this.userProfileAdapter.update(username, user);\n  }\n\n  register(user) {\n    return this.userProfileAdapter.register(user);\n  }\n\n  registerGuest(guid, password) {\n    return this.userProfileAdapter.registerGuest(guid, password);\n  }\n\n  requestForgotPasswordEmail(userEmailAddress) {\n    return this.userProfileAdapter.requestForgotPasswordEmail(userEmailAddress);\n  }\n\n  resetPassword(token, newPassword) {\n    return this.userProfileAdapter.resetPassword(token, newPassword);\n  }\n\n  updateEmail(userId, currentPassword, newUserId) {\n    return this.userProfileAdapter.updateEmail(userId, currentPassword, newUserId);\n  }\n\n  updatePassword(userId, oldPassword, newPassword) {\n    return this.userProfileAdapter.updatePassword(userId, oldPassword, newPassword);\n  }\n\n  remove(userId) {\n    return this.userProfileAdapter.close(userId);\n  }\n\n  getTitles() {\n    return this.userProfileAdapter.loadTitles();\n  }\n\n}\n\nUserProfileConnector.ɵfac = function UserProfileConnector_Factory(t) {\n  return new (t || UserProfileConnector)(i0.ɵɵinject(UserProfileAdapter));\n};\n\nUserProfileConnector.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: UserProfileConnector,\n  factory: UserProfileConnector.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(UserProfileConnector, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: UserProfileAdapter\n    }];\n  }, null);\n})();\n\nclass UserEmailService {\n  constructor(userIdService, userProfileConnector, command) {\n    this.userIdService = userIdService;\n    this.userProfileConnector = userProfileConnector;\n    this.command = command;\n    this.updateCommand = this.command.create(payload => this.userIdService.takeUserId(true).pipe(switchMap(uid => this.userProfileConnector.updateEmail(uid, payload.password, payload.newUid))), {\n      strategy: CommandStrategy.Queue\n    });\n  }\n  /**\n   * Updates the user's email.\n   *\n   * @param password to users password to confirm the users\n   * @param newUid the new proposed email address.\n   */\n\n\n  update(password, newUid) {\n    return this.updateCommand.execute({\n      password,\n      newUid\n    });\n  }\n\n}\n\nUserEmailService.ɵfac = function UserEmailService_Factory(t) {\n  return new (t || UserEmailService)(i0.ɵɵinject(i2.UserIdService), i0.ɵɵinject(UserProfileConnector), i0.ɵɵinject(i2.CommandService));\n};\n\nUserEmailService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: UserEmailService,\n  factory: UserEmailService.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(UserEmailService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i2.UserIdService\n    }, {\n      type: UserProfileConnector\n    }, {\n      type: i2.CommandService\n    }];\n  }, null);\n})();\n\nclass UserPasswordService {\n  constructor(userProfileConnector, userIdService, command) {\n    this.userProfileConnector = userProfileConnector;\n    this.userIdService = userIdService;\n    this.command = command;\n    this.updateCommand = this.command.create(payload => this.userIdService.takeUserId(true).pipe(take(1), switchMap(uid => this.userProfileConnector.updatePassword(uid, payload.oldPassword, payload.newPassword))));\n    this.resetCommand = this.command.create(payload => this.userProfileConnector.resetPassword(payload.token, payload.password));\n    this.requestForgotPasswordEmailCommand = this.command.create(payload => this.userProfileConnector.requestForgotPasswordEmail(payload.email));\n  }\n  /**\n   * Updates the password for the user\n   *\n   * The method returns an observable with `LoaderState` information, including the\n   * actual user data.\n   *\n   * @param oldPassword the current password that will be changed\n   * @param newPassword the new password\n   */\n\n\n  update(oldPassword, newPassword) {\n    return this.updateCommand.execute({\n      oldPassword,\n      newPassword\n    });\n  }\n  /**\n   * Reset new password. Part of the forgot password flow.\n   *\n   * @param token\n   * @param password\n   */\n\n\n  reset(token, password) {\n    return this.resetCommand.execute({\n      token,\n      password\n    });\n  }\n  /*\n   * Request an email to reset a forgotten password.\n   */\n\n\n  requestForgotPasswordEmail(email) {\n    return this.requestForgotPasswordEmailCommand.execute({\n      email\n    });\n  }\n\n}\n\nUserPasswordService.ɵfac = function UserPasswordService_Factory(t) {\n  return new (t || UserPasswordService)(i0.ɵɵinject(UserProfileConnector), i0.ɵɵinject(i2.UserIdService), i0.ɵɵinject(i2.CommandService));\n};\n\nUserPasswordService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: UserPasswordService,\n  factory: UserPasswordService.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(UserPasswordService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: UserProfileConnector\n    }, {\n      type: i2.UserIdService\n    }, {\n      type: i2.CommandService\n    }];\n  }, null);\n})();\n\nclass UserProfileService {\n  constructor(userAccountService, authService, userProfileConnector, eventService, userIdService, query, command) {\n    this.userAccountService = userAccountService;\n    this.authService = authService;\n    this.userProfileConnector = userProfileConnector;\n    this.eventService = eventService;\n    this.userIdService = userIdService;\n    this.query = query;\n    this.command = command;\n    this.updateCommand = this.command.create(payload => this.userIdService.takeUserId(true).pipe(switchMap(uid => this.userProfileConnector.update(uid, payload.details).pipe(tap(() => {\n      this.eventService.dispatch({\n        user: payload.details\n      }, UserAccountChangedEvent);\n    })))), {\n      strategy: CommandStrategy.Queue\n    });\n    this.closeCommand = this.command.create(() => this.userIdService.takeUserId(true).pipe(switchMap(uid => this.userProfileConnector.remove(uid).pipe(tap(() => this.authService.logout())))));\n    this.titleQuery = this.query.create(() => this.userProfileConnector.getTitles(), {\n      reloadOn: [LanguageSetEvent]\n    });\n  }\n\n  get() {\n    return this.userAccountService.get();\n  }\n  /**\n   * Updates the user's details.\n   *\n   * @param details User details to be updated.\n   */\n\n\n  update(details) {\n    return this.updateCommand.execute({\n      details\n    });\n  }\n  /**\n   * Closes the user account.\n   */\n\n\n  close() {\n    return this.closeCommand.execute(undefined);\n  }\n  /**\n   * Returns titles that can be used for the user profiles.\n   */\n\n\n  getTitles() {\n    return this.titleQuery.get().pipe(map(titles => titles !== null && titles !== void 0 ? titles : []));\n  }\n\n}\n\nUserProfileService.ɵfac = function UserProfileService_Factory(t) {\n  return new (t || UserProfileService)(i0.ɵɵinject(i1.UserAccountFacade), i0.ɵɵinject(i2.AuthService), i0.ɵɵinject(UserProfileConnector), i0.ɵɵinject(i2.EventService), i0.ɵɵinject(i2.UserIdService), i0.ɵɵinject(i2.QueryService), i0.ɵɵinject(i2.CommandService));\n};\n\nUserProfileService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: UserProfileService,\n  factory: UserProfileService.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(UserProfileService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i1.UserAccountFacade\n    }, {\n      type: i2.AuthService\n    }, {\n      type: UserProfileConnector\n    }, {\n      type: i2.EventService\n    }, {\n      type: i2.UserIdService\n    }, {\n      type: i2.QueryService\n    }, {\n      type: i2.CommandService\n    }];\n  }, null);\n})();\n\nclass UserRegisterService {\n  constructor(userProfile, userConnector, authService, command, store) {\n    this.userProfile = userProfile;\n    this.userConnector = userConnector;\n    this.authService = authService;\n    this.command = command;\n    this.store = store;\n    this.registerCommand = this.command.create(({\n      user\n    }) => this.userConnector.register(user).pipe(tap(() => {\n      // this is a compatibility mechanism only, to make anonymous consents\n      // management work properly in transitional period (when we move logic\n      // to separate libraries)\n      this.store.dispatch(new UserActions.RegisterUserSuccess());\n    })));\n    this.registerGuestCommand = this.command.create(payload => this.userConnector.registerGuest(payload.guid, payload.password).pipe(tap(user => {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      this.authService.loginWithCredentials(user.uid, payload.password);\n    })));\n  }\n  /**\n   * Register a new user.\n   *\n   * @param submitFormData as UserRegisterFormData\n   */\n\n\n  register(user) {\n    return this.registerCommand.execute({\n      user\n    });\n  }\n  /**\n   * Register a new user from guest.\n   *\n   * @param guid\n   * @param password\n   */\n\n\n  registerGuest(guid, password) {\n    return this.registerGuestCommand.execute({\n      guid,\n      password\n    });\n  }\n  /**\n   * Returns titles that can be used for the user profiles.\n   */\n\n\n  getTitles() {\n    return this.userProfile.getTitles();\n  }\n\n}\n\nUserRegisterService.ɵfac = function UserRegisterService_Factory(t) {\n  return new (t || UserRegisterService)(i0.ɵɵinject(UserProfileService), i0.ɵɵinject(UserProfileConnector), i0.ɵɵinject(i2.AuthService), i0.ɵɵinject(i2.CommandService), i0.ɵɵinject(i4.Store));\n};\n\nUserRegisterService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: UserRegisterService,\n  factory: UserRegisterService.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(UserRegisterService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: UserProfileService\n    }, {\n      type: UserProfileConnector\n    }, {\n      type: i2.AuthService\n    }, {\n      type: i2.CommandService\n    }, {\n      type: i4.Store\n    }];\n  }, null);\n})();\n\nconst facadeProviders = [UserEmailService, UserPasswordService, UserProfileService, UserRegisterService, {\n  provide: UserEmailFacade,\n  useExisting: UserEmailService\n}, {\n  provide: UserPasswordFacade,\n  useExisting: UserPasswordService\n}, {\n  provide: UserProfileFacade,\n  useExisting: UserProfileService\n}, {\n  provide: UserRegisterFacade,\n  useExisting: UserRegisterService\n}];\n\nclass UserProfileCoreModule {}\n\nUserProfileCoreModule.ɵfac = function UserProfileCoreModule_Factory(t) {\n  return new (t || UserProfileCoreModule)();\n};\n\nUserProfileCoreModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: UserProfileCoreModule\n});\nUserProfileCoreModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [UserProfileConnector, ...facadeProviders]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(UserProfileCoreModule, [{\n    type: NgModule,\n    args: [{\n      providers: [UserProfileConnector, ...facadeProviders]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { TITLE_NORMALIZER, USER_PROFILE_NORMALIZER, USER_PROFILE_SERIALIZER, USER_SERIALIZER, USER_SIGN_UP_SERIALIZER, UserEmailService, UserPasswordService, UserProfileAdapter, UserProfileConnector, UserProfileCoreModule, UserProfileService, UserRegisterService }; //# sourceMappingURL=spartacus-user-profile-core.js.map","map":{"version":3,"sources":["D:/spartacus/front-store/node_modules/@spartacus/user/fesm2015/spartacus-user-profile-core.js"],"names":["i0","InjectionToken","Injectable","NgModule","i2","CommandStrategy","LanguageSetEvent","UserActions","switchMap","take","tap","map","i1","UserAccountChangedEvent","i4","UserEmailFacade","UserPasswordFacade","UserProfileFacade","UserRegisterFacade","USER_PROFILE_NORMALIZER","USER_PROFILE_SERIALIZER","USER_SERIALIZER","USER_SIGN_UP_SERIALIZER","TITLE_NORMALIZER","UserProfileAdapter","UserProfileConnector","constructor","userProfileAdapter","update","username","user","register","registerGuest","guid","password","requestForgotPasswordEmail","userEmailAddress","resetPassword","token","newPassword","updateEmail","userId","currentPassword","newUserId","updatePassword","oldPassword","remove","close","getTitles","loadTitles","ɵfac","ɵprov","type","UserEmailService","userIdService","userProfileConnector","command","updateCommand","create","payload","takeUserId","pipe","uid","newUid","strategy","Queue","execute","UserIdService","CommandService","UserPasswordService","resetCommand","requestForgotPasswordEmailCommand","email","reset","UserProfileService","userAccountService","authService","eventService","query","details","dispatch","closeCommand","logout","titleQuery","reloadOn","get","undefined","titles","UserAccountFacade","AuthService","EventService","QueryService","UserRegisterService","userProfile","userConnector","store","registerCommand","RegisterUserSuccess","registerGuestCommand","loginWithCredentials","Store","facadeProviders","provide","useExisting","UserProfileCoreModule","ɵmod","ɵinj","args","providers"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, NgModule } from '@angular/core';\nimport * as i2 from '@spartacus/core';\nimport { CommandStrategy, LanguageSetEvent, UserActions } from '@spartacus/core';\nimport { switchMap, take, tap, map } from 'rxjs/operators';\nimport * as i1 from '@spartacus/user/account/root';\nimport { UserAccountChangedEvent } from '@spartacus/user/account/root';\nimport * as i4 from '@ngrx/store';\nimport { UserEmailFacade, UserPasswordFacade, UserProfileFacade, UserRegisterFacade } from '@spartacus/user/profile/root';\n\nconst USER_PROFILE_NORMALIZER = new InjectionToken('UserProfileNormalizer');\nconst USER_PROFILE_SERIALIZER = new InjectionToken('UserProfileSerializer');\nconst USER_SERIALIZER = new InjectionToken('UserSerializer');\nconst USER_SIGN_UP_SERIALIZER = new InjectionToken('UserSignUpSerializer');\nconst TITLE_NORMALIZER = new InjectionToken('TitleNormalizer');\n\nclass UserProfileAdapter {\n}\n\nclass UserProfileConnector {\n    constructor(userProfileAdapter) {\n        this.userProfileAdapter = userProfileAdapter;\n    }\n    update(username, user) {\n        return this.userProfileAdapter.update(username, user);\n    }\n    register(user) {\n        return this.userProfileAdapter.register(user);\n    }\n    registerGuest(guid, password) {\n        return this.userProfileAdapter.registerGuest(guid, password);\n    }\n    requestForgotPasswordEmail(userEmailAddress) {\n        return this.userProfileAdapter.requestForgotPasswordEmail(userEmailAddress);\n    }\n    resetPassword(token, newPassword) {\n        return this.userProfileAdapter.resetPassword(token, newPassword);\n    }\n    updateEmail(userId, currentPassword, newUserId) {\n        return this.userProfileAdapter.updateEmail(userId, currentPassword, newUserId);\n    }\n    updatePassword(userId, oldPassword, newPassword) {\n        return this.userProfileAdapter.updatePassword(userId, oldPassword, newPassword);\n    }\n    remove(userId) {\n        return this.userProfileAdapter.close(userId);\n    }\n    getTitles() {\n        return this.userProfileAdapter.loadTitles();\n    }\n}\nUserProfileConnector.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UserProfileConnector, deps: [{ token: UserProfileAdapter }], target: i0.ɵɵFactoryTarget.Injectable });\nUserProfileConnector.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UserProfileConnector });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UserProfileConnector, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: UserProfileAdapter }]; } });\n\nclass UserEmailService {\n    constructor(userIdService, userProfileConnector, command) {\n        this.userIdService = userIdService;\n        this.userProfileConnector = userProfileConnector;\n        this.command = command;\n        this.updateCommand = this.command.create((payload) => this.userIdService\n            .takeUserId(true)\n            .pipe(switchMap((uid) => this.userProfileConnector.updateEmail(uid, payload.password, payload.newUid))), {\n            strategy: CommandStrategy.Queue,\n        });\n    }\n    /**\n     * Updates the user's email.\n     *\n     * @param password to users password to confirm the users\n     * @param newUid the new proposed email address.\n     */\n    update(password, newUid) {\n        return this.updateCommand.execute({ password, newUid });\n    }\n}\nUserEmailService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UserEmailService, deps: [{ token: i2.UserIdService }, { token: UserProfileConnector }, { token: i2.CommandService }], target: i0.ɵɵFactoryTarget.Injectable });\nUserEmailService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UserEmailService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UserEmailService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i2.UserIdService }, { type: UserProfileConnector }, { type: i2.CommandService }]; } });\n\nclass UserPasswordService {\n    constructor(userProfileConnector, userIdService, command) {\n        this.userProfileConnector = userProfileConnector;\n        this.userIdService = userIdService;\n        this.command = command;\n        this.updateCommand = this.command.create((payload) => this.userIdService.takeUserId(true).pipe(take(1), switchMap((uid) => this.userProfileConnector.updatePassword(uid, payload.oldPassword, payload.newPassword))));\n        this.resetCommand = this.command.create((payload) => this.userProfileConnector.resetPassword(payload.token, payload.password));\n        this.requestForgotPasswordEmailCommand = this.command.create((payload) => this.userProfileConnector.requestForgotPasswordEmail(payload.email));\n    }\n    /**\n     * Updates the password for the user\n     *\n     * The method returns an observable with `LoaderState` information, including the\n     * actual user data.\n     *\n     * @param oldPassword the current password that will be changed\n     * @param newPassword the new password\n     */\n    update(oldPassword, newPassword) {\n        return this.updateCommand.execute({ oldPassword, newPassword });\n    }\n    /**\n     * Reset new password. Part of the forgot password flow.\n     *\n     * @param token\n     * @param password\n     */\n    reset(token, password) {\n        return this.resetCommand.execute({ token, password });\n    }\n    /*\n     * Request an email to reset a forgotten password.\n     */\n    requestForgotPasswordEmail(email) {\n        return this.requestForgotPasswordEmailCommand.execute({ email });\n    }\n}\nUserPasswordService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UserPasswordService, deps: [{ token: UserProfileConnector }, { token: i2.UserIdService }, { token: i2.CommandService }], target: i0.ɵɵFactoryTarget.Injectable });\nUserPasswordService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UserPasswordService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UserPasswordService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: UserProfileConnector }, { type: i2.UserIdService }, { type: i2.CommandService }]; } });\n\nclass UserProfileService {\n    constructor(userAccountService, authService, userProfileConnector, eventService, userIdService, query, command) {\n        this.userAccountService = userAccountService;\n        this.authService = authService;\n        this.userProfileConnector = userProfileConnector;\n        this.eventService = eventService;\n        this.userIdService = userIdService;\n        this.query = query;\n        this.command = command;\n        this.updateCommand = this.command.create((payload) => this.userIdService.takeUserId(true).pipe(switchMap((uid) => this.userProfileConnector.update(uid, payload.details).pipe(tap(() => {\n            this.eventService.dispatch({ user: payload.details }, UserAccountChangedEvent);\n        })))), {\n            strategy: CommandStrategy.Queue,\n        });\n        this.closeCommand = this.command.create(() => this.userIdService\n            .takeUserId(true)\n            .pipe(switchMap((uid) => this.userProfileConnector\n            .remove(uid)\n            .pipe(tap(() => this.authService.logout())))));\n        this.titleQuery = this.query.create(() => this.userProfileConnector.getTitles(), {\n            reloadOn: [LanguageSetEvent],\n        });\n    }\n    get() {\n        return this.userAccountService.get();\n    }\n    /**\n     * Updates the user's details.\n     *\n     * @param details User details to be updated.\n     */\n    update(details) {\n        return this.updateCommand.execute({ details });\n    }\n    /**\n     * Closes the user account.\n     */\n    close() {\n        return this.closeCommand.execute(undefined);\n    }\n    /**\n     * Returns titles that can be used for the user profiles.\n     */\n    getTitles() {\n        return this.titleQuery.get().pipe(map((titles) => titles !== null && titles !== void 0 ? titles : []));\n    }\n}\nUserProfileService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UserProfileService, deps: [{ token: i1.UserAccountFacade }, { token: i2.AuthService }, { token: UserProfileConnector }, { token: i2.EventService }, { token: i2.UserIdService }, { token: i2.QueryService }, { token: i2.CommandService }], target: i0.ɵɵFactoryTarget.Injectable });\nUserProfileService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UserProfileService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UserProfileService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1.UserAccountFacade }, { type: i2.AuthService }, { type: UserProfileConnector }, { type: i2.EventService }, { type: i2.UserIdService }, { type: i2.QueryService }, { type: i2.CommandService }]; } });\n\nclass UserRegisterService {\n    constructor(userProfile, userConnector, authService, command, store) {\n        this.userProfile = userProfile;\n        this.userConnector = userConnector;\n        this.authService = authService;\n        this.command = command;\n        this.store = store;\n        this.registerCommand = this.command.create(({ user }) => this.userConnector.register(user).pipe(tap(() => {\n            // this is a compatibility mechanism only, to make anonymous consents\n            // management work properly in transitional period (when we move logic\n            // to separate libraries)\n            this.store.dispatch(new UserActions.RegisterUserSuccess());\n        })));\n        this.registerGuestCommand = this.command.create((payload) => this.userConnector.registerGuest(payload.guid, payload.password).pipe(tap((user) => {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            this.authService.loginWithCredentials(user.uid, payload.password);\n        })));\n    }\n    /**\n     * Register a new user.\n     *\n     * @param submitFormData as UserRegisterFormData\n     */\n    register(user) {\n        return this.registerCommand.execute({ user });\n    }\n    /**\n     * Register a new user from guest.\n     *\n     * @param guid\n     * @param password\n     */\n    registerGuest(guid, password) {\n        return this.registerGuestCommand.execute({ guid, password });\n    }\n    /**\n     * Returns titles that can be used for the user profiles.\n     */\n    getTitles() {\n        return this.userProfile.getTitles();\n    }\n}\nUserRegisterService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UserRegisterService, deps: [{ token: UserProfileService }, { token: UserProfileConnector }, { token: i2.AuthService }, { token: i2.CommandService }, { token: i4.Store }], target: i0.ɵɵFactoryTarget.Injectable });\nUserRegisterService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UserRegisterService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UserRegisterService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: UserProfileService }, { type: UserProfileConnector }, { type: i2.AuthService }, { type: i2.CommandService }, { type: i4.Store }]; } });\n\nconst facadeProviders = [\n    UserEmailService,\n    UserPasswordService,\n    UserProfileService,\n    UserRegisterService,\n    {\n        provide: UserEmailFacade,\n        useExisting: UserEmailService,\n    },\n    {\n        provide: UserPasswordFacade,\n        useExisting: UserPasswordService,\n    },\n    {\n        provide: UserProfileFacade,\n        useExisting: UserProfileService,\n    },\n    {\n        provide: UserRegisterFacade,\n        useExisting: UserRegisterService,\n    },\n];\n\nclass UserProfileCoreModule {\n}\nUserProfileCoreModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UserProfileCoreModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nUserProfileCoreModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UserProfileCoreModule });\nUserProfileCoreModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UserProfileCoreModule, providers: [UserProfileConnector, ...facadeProviders] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UserProfileCoreModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [UserProfileConnector, ...facadeProviders],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TITLE_NORMALIZER, USER_PROFILE_NORMALIZER, USER_PROFILE_SERIALIZER, USER_SERIALIZER, USER_SIGN_UP_SERIALIZER, UserEmailService, UserPasswordService, UserProfileAdapter, UserProfileConnector, UserProfileCoreModule, UserProfileService, UserRegisterService };\n//# sourceMappingURL=spartacus-user-profile-core.js.map\n"]},"metadata":{},"sourceType":"module"}