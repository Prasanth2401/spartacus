{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, InjectionToken, NgModule } from '@angular/core';\nimport * as i1$1 from '@spartacus/core';\nimport { StateUtils, normalizeHttpError, StateModule, provideDefaultConfig, MODULE_INITIALIZER, OccConfig, Config } from '@spartacus/core';\nimport * as i1$2 from '@ngrx/store';\nimport { createFeatureSelector, createSelector, select, StoreModule } from '@ngrx/store';\nimport { of, Subscription, combineLatest } from 'rxjs';\nimport { map, switchMap, catchError, filter } from 'rxjs/operators';\nimport { __decorate } from 'tslib';\nimport * as i1 from '@ngrx/effects';\nimport { ofType, Effect, EffectsModule } from '@ngrx/effects';\nimport * as i3 from '@spartacus/asm/root';\nconst defaultAsmConfig = {\n  asm: {\n    agentSessionTimer: {\n      startingDelayInSeconds: 600\n    },\n    customerSearch: {\n      maxResults: 20\n    }\n  }\n};\n\nclass AsmAdapter {}\n\nclass AsmConnector {\n  constructor(asmAdapter) {\n    this.asmAdapter = asmAdapter;\n  }\n\n  customerSearch(options) {\n    return this.asmAdapter.customerSearch(options);\n  }\n\n}\n\nAsmConnector.ɵfac = function AsmConnector_Factory(t) {\n  return new (t || AsmConnector)(i0.ɵɵinject(AsmAdapter));\n};\n\nAsmConnector.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: AsmConnector,\n  factory: AsmConnector.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AsmConnector, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: AsmAdapter\n    }];\n  }, null);\n})();\n\nconst ASM_UI_UPDATE = '[Asm] UI Update';\n\nclass AsmUiUpdate {\n  constructor(payload) {\n    this.payload = payload;\n    this.type = ASM_UI_UPDATE;\n  }\n\n}\n\nconst ASM_FEATURE = 'asm';\nconst CUSTOMER_SEARCH_DATA = '[asm] Customer search data';\nconst CUSTOMER_SEARCH = '[Asm] Customer Search';\nconst CUSTOMER_SEARCH_FAIL = '[Asm] Customer Search Fail';\nconst CUSTOMER_SEARCH_SUCCESS = '[Asm] Customer Search Success';\nconst CUSTOMER_SEARCH_RESET = '[Asm] Customer Search Reset';\n\nclass CustomerSearch extends StateUtils.LoaderLoadAction {\n  constructor(payload) {\n    super(CUSTOMER_SEARCH_DATA);\n    this.payload = payload;\n    this.type = CUSTOMER_SEARCH;\n  }\n\n}\n\nclass CustomerSearchFail extends StateUtils.LoaderFailAction {\n  constructor(payload) {\n    super(CUSTOMER_SEARCH_DATA);\n    this.payload = payload;\n    this.type = CUSTOMER_SEARCH_FAIL;\n  }\n\n}\n\nclass CustomerSearchSuccess extends StateUtils.LoaderSuccessAction {\n  constructor(payload) {\n    super(CUSTOMER_SEARCH_DATA);\n    this.payload = payload;\n    this.type = CUSTOMER_SEARCH_SUCCESS;\n  }\n\n}\n\nclass CustomerSearchReset extends StateUtils.LoaderResetAction {\n  constructor() {\n    super(CUSTOMER_SEARCH_DATA);\n    this.type = CUSTOMER_SEARCH_RESET;\n  }\n\n}\n\nconst LOGOUT_CUSTOMER_SUPPORT_AGENT = '[Auth] Logout Customer Support Agent';\n/**\n * Action dispatched after customer support agent logout. Used to clear store data (ui, search results)\n */\n\nclass LogoutCustomerSupportAgent {\n  constructor() {\n    this.type = LOGOUT_CUSTOMER_SUPPORT_AGENT;\n  }\n\n}\n\nvar customerGroup_actions = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ASM_UI_UPDATE: ASM_UI_UPDATE,\n  AsmUiUpdate: AsmUiUpdate,\n  CUSTOMER_SEARCH: CUSTOMER_SEARCH,\n  CUSTOMER_SEARCH_FAIL: CUSTOMER_SEARCH_FAIL,\n  CUSTOMER_SEARCH_SUCCESS: CUSTOMER_SEARCH_SUCCESS,\n  CUSTOMER_SEARCH_RESET: CUSTOMER_SEARCH_RESET,\n  CustomerSearch: CustomerSearch,\n  CustomerSearchFail: CustomerSearchFail,\n  CustomerSearchSuccess: CustomerSearchSuccess,\n  CustomerSearchReset: CustomerSearchReset,\n  LOGOUT_CUSTOMER_SUPPORT_AGENT: LOGOUT_CUSTOMER_SUPPORT_AGENT,\n  LogoutCustomerSupportAgent: LogoutCustomerSupportAgent\n});\n\nclass CustomerEffects {\n  constructor(actions$, asmConnector) {\n    this.actions$ = actions$;\n    this.asmConnector = asmConnector;\n    this.customerSearch$ = this.actions$.pipe(ofType(CUSTOMER_SEARCH), map(action => action.payload), switchMap(options => this.asmConnector.customerSearch(options).pipe(map(customerSearchResults => {\n      return new CustomerSearchSuccess(customerSearchResults);\n    }), catchError(error => of(new CustomerSearchFail(normalizeHttpError(error)))))));\n  }\n\n}\n\nCustomerEffects.ɵfac = function CustomerEffects_Factory(t) {\n  return new (t || CustomerEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(AsmConnector));\n};\n\nCustomerEffects.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: CustomerEffects,\n  factory: CustomerEffects.ɵfac\n});\n\n__decorate([Effect()], CustomerEffects.prototype, \"customerSearch$\", void 0);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CustomerEffects, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i1.Actions\n    }, {\n      type: AsmConnector\n    }];\n  }, {\n    customerSearch$: []\n  });\n})();\n\nconst effects = [CustomerEffects];\nconst initialState = {\n  collapsed: false\n};\n\nfunction reducer(state = initialState, action) {\n  switch (action.type) {\n    case ASM_UI_UPDATE:\n      {\n        return Object.assign(Object.assign({}, state), action.payload);\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n}\n\nfunction getReducers() {\n  return {\n    customerSearchResult: StateUtils.loaderReducer(CUSTOMER_SEARCH_DATA),\n    asmUi: reducer\n  };\n}\n\nconst reducerToken = new InjectionToken('AsmReducers');\nconst reducerProvider = {\n  provide: reducerToken,\n  useFactory: getReducers\n};\n\nfunction clearCustomerSupportAgentAsmState(reducer) {\n  return function (state, action) {\n    if (action.type === LOGOUT_CUSTOMER_SUPPORT_AGENT) {\n      state = Object.assign(Object.assign({}, state), {\n        customerSearchResult: {}\n      });\n    }\n\n    return reducer(state, action);\n  };\n}\n\nconst metaReducers = [clearCustomerSupportAgentAsmState];\nconst getAsmState = createFeatureSelector(ASM_FEATURE);\nconst getAsmUi = createSelector(getAsmState, state => state.asmUi);\nconst getCustomerSearchResultsLoaderState = createSelector(getAsmState, state => state.customerSearchResult);\nconst getCustomerSearchResults = createSelector(getCustomerSearchResultsLoaderState, state => StateUtils.loaderValueSelector(state));\nconst getCustomerSearchResultsLoading = createSelector(getCustomerSearchResultsLoaderState, state => StateUtils.loaderLoadingSelector(state));\nvar asmGroup_selectors = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  getAsmUi: getAsmUi,\n  getCustomerSearchResultsLoaderState: getCustomerSearchResultsLoaderState,\n  getCustomerSearchResults: getCustomerSearchResults,\n  getCustomerSearchResultsLoading: getCustomerSearchResultsLoading,\n  getAsmState: getAsmState\n});\n/**\n * Responsible for storing ASM state in the browser storage.\n * Uses `StatePersistenceService` mechanism.\n */\n\nclass AsmStatePersistenceService {\n  constructor(statePersistenceService, store, authStorageService) {\n    this.statePersistenceService = statePersistenceService;\n    this.store = store;\n    this.authStorageService = authStorageService;\n    this.subscription = new Subscription();\n    /**\n     * Identifier used for storage key.\n     */\n\n    this.key = 'asm';\n  }\n  /**\n   * Initializes the synchronization between state and browser storage.\n   */\n\n\n  initSync() {\n    this.subscription.add(this.statePersistenceService.syncWithStorage({\n      key: this.key,\n      state$: this.getAsmState(),\n      onRead: state => this.onRead(state)\n    }));\n  }\n  /**\n   * Gets and transforms state from different sources into the form that should\n   * be saved in storage.\n   */\n\n\n  getAsmState() {\n    return combineLatest([this.store.pipe( // Since getAsmState() may be called while the module is lazy loded\n    // The asm state slice may not exist yet in the first store emissions.\n    filter(store => !!store.asm), select(getAsmUi)), of(this.authStorageService.getEmulatedUserToken()), this.authStorageService.getTokenTarget()]).pipe(map(([ui, emulatedUserToken, tokenTarget]) => {\n      let emulatedToken = emulatedUserToken;\n\n      if (emulatedToken) {\n        emulatedToken = Object.assign({}, emulatedUserToken); // To minimize risk of user account hijacking we don't persist emulated user refresh_token\n\n        delete emulatedToken.refresh_token;\n      }\n\n      return {\n        ui,\n        emulatedUserToken: emulatedToken,\n        tokenTarget\n      };\n    }));\n  }\n  /**\n   * Function called on each browser storage read.\n   * Used to update state from browser -> state.\n   */\n\n\n  onRead(state) {\n    if (state) {\n      if (state.ui) {\n        this.store.dispatch(new AsmUiUpdate(state.ui));\n      }\n\n      if (state.emulatedUserToken) {\n        this.authStorageService.setEmulatedUserToken(state.emulatedUserToken);\n      }\n\n      if (state.tokenTarget) {\n        this.authStorageService.setTokenTarget(state.tokenTarget);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n\n}\n\nAsmStatePersistenceService.ɵfac = function AsmStatePersistenceService_Factory(t) {\n  return new (t || AsmStatePersistenceService)(i0.ɵɵinject(i1$1.StatePersistenceService), i0.ɵɵinject(i1$2.Store), i0.ɵɵinject(i3.AsmAuthStorageService));\n};\n\nAsmStatePersistenceService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: AsmStatePersistenceService,\n  factory: AsmStatePersistenceService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AsmStatePersistenceService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1$1.StatePersistenceService\n    }, {\n      type: i1$2.Store\n    }, {\n      type: i3.AsmAuthStorageService\n    }];\n  }, null);\n})();\n\nclass AsmStoreModule {}\n\nAsmStoreModule.ɵfac = function AsmStoreModule_Factory(t) {\n  return new (t || AsmStoreModule)();\n};\n\nAsmStoreModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: AsmStoreModule\n});\nAsmStoreModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [reducerProvider],\n  imports: [[CommonModule, StateModule, StoreModule.forFeature(ASM_FEATURE, reducerToken, {\n    metaReducers\n  }), EffectsModule.forFeature(effects)]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AsmStoreModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, StateModule, StoreModule.forFeature(ASM_FEATURE, reducerToken, {\n        metaReducers\n      }), EffectsModule.forFeature(effects)],\n      providers: [reducerProvider]\n    }]\n  }], null, null);\n})();\n\nfunction asmStatePersistenceFactory(asmStatePersistenceService) {\n  const result = () => asmStatePersistenceService.initSync();\n\n  return result;\n}\n\nclass AsmCoreModule {}\n\nAsmCoreModule.ɵfac = function AsmCoreModule_Factory(t) {\n  return new (t || AsmCoreModule)();\n};\n\nAsmCoreModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: AsmCoreModule\n});\nAsmCoreModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [provideDefaultConfig(defaultAsmConfig), AsmConnector, {\n    provide: MODULE_INITIALIZER,\n    useFactory: asmStatePersistenceFactory,\n    deps: [AsmStatePersistenceService],\n    multi: true\n  }],\n  imports: [[CommonModule, AsmStoreModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AsmCoreModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, AsmStoreModule],\n      providers: [provideDefaultConfig(defaultAsmConfig), AsmConnector, {\n        provide: MODULE_INITIALIZER,\n        useFactory: asmStatePersistenceFactory,\n        deps: [AsmStatePersistenceService],\n        multi: true\n      }]\n    }]\n  }], null, null);\n})();\n\nclass AsmConfig extends OccConfig {}\n\nAsmConfig.ɵfac = /* @__PURE__ */function () {\n  let ɵAsmConfig_BaseFactory;\n  return function AsmConfig_Factory(t) {\n    return (ɵAsmConfig_BaseFactory || (ɵAsmConfig_BaseFactory = i0.ɵɵgetInheritedFactory(AsmConfig)))(t || AsmConfig);\n  };\n}();\n\nAsmConfig.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: AsmConfig,\n  factory: function AsmConfig_Factory(t) {\n    let r = null;\n\n    if (t) {\n      r = new (t || AsmConfig)();\n    } else {\n      r = i0.ɵɵinject(Config);\n    }\n\n    return r;\n  },\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AsmConfig, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root',\n      useExisting: Config\n    }]\n  }], null, null);\n})();\n\nconst CUSTOMER_SEARCH_PAGE_NORMALIZER = new InjectionToken('CustomerSearchPageNormalizer');\n\nclass AsmService {\n  constructor(store) {\n    this.store = store;\n  }\n  /**\n   * Search for customers\n   * @param options\n   */\n\n\n  customerSearch(options) {\n    this.store.dispatch(new CustomerSearch(options));\n  }\n  /**\n   * Reset the customer search result data to the initial state.\n   */\n\n\n  customerSearchReset() {\n    this.store.dispatch(new CustomerSearchReset());\n  }\n  /**\n   * Returns the customer search result data.\n   */\n\n\n  getCustomerSearchResults() {\n    return this.store.pipe(select(getCustomerSearchResults));\n  }\n  /**\n   * Returns the customer search result loading status.\n   */\n\n\n  getCustomerSearchResultsLoading() {\n    return this.store.pipe(select(getCustomerSearchResultsLoading));\n  }\n  /**\n   * Updates the state of the ASM UI\n   */\n\n\n  updateAsmUiState(asmUi) {\n    this.store.dispatch(new AsmUiUpdate(asmUi));\n  }\n  /**\n   * Get the state of the ASM UI\n   */\n\n\n  getAsmUiState() {\n    return this.store.pipe(select(getAsmUi));\n  }\n\n}\n\nAsmService.ɵfac = function AsmService_Factory(t) {\n  return new (t || AsmService)(i0.ɵɵinject(i1$2.Store));\n};\n\nAsmService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: AsmService,\n  factory: AsmService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AsmService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1$2.Store\n    }];\n  }, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { ASM_FEATURE, customerGroup_actions as AsmActions, AsmAdapter, AsmConfig, AsmConnector, AsmCoreModule, asmGroup_selectors as AsmSelectors, AsmService, AsmStatePersistenceService, CUSTOMER_SEARCH_DATA, CUSTOMER_SEARCH_PAGE_NORMALIZER, asmStatePersistenceFactory }; //# sourceMappingURL=spartacus-asm-core.js.map","map":{"version":3,"sources":["D:/spartacus/front-store/node_modules/@spartacus/asm/fesm2015/spartacus-asm-core.js"],"names":["CommonModule","i0","Injectable","InjectionToken","NgModule","i1$1","StateUtils","normalizeHttpError","StateModule","provideDefaultConfig","MODULE_INITIALIZER","OccConfig","Config","i1$2","createFeatureSelector","createSelector","select","StoreModule","of","Subscription","combineLatest","map","switchMap","catchError","filter","__decorate","i1","ofType","Effect","EffectsModule","i3","defaultAsmConfig","asm","agentSessionTimer","startingDelayInSeconds","customerSearch","maxResults","AsmAdapter","AsmConnector","constructor","asmAdapter","options","ɵfac","ɵprov","type","args","providedIn","ASM_UI_UPDATE","AsmUiUpdate","payload","ASM_FEATURE","CUSTOMER_SEARCH_DATA","CUSTOMER_SEARCH","CUSTOMER_SEARCH_FAIL","CUSTOMER_SEARCH_SUCCESS","CUSTOMER_SEARCH_RESET","CustomerSearch","LoaderLoadAction","CustomerSearchFail","LoaderFailAction","CustomerSearchSuccess","LoaderSuccessAction","CustomerSearchReset","LoaderResetAction","LOGOUT_CUSTOMER_SUPPORT_AGENT","LogoutCustomerSupportAgent","customerGroup_actions","Object","freeze","__proto__","CustomerEffects","actions$","asmConnector","customerSearch$","pipe","action","customerSearchResults","error","Actions","prototype","effects","initialState","collapsed","reducer","state","assign","getReducers","customerSearchResult","loaderReducer","asmUi","reducerToken","reducerProvider","provide","useFactory","clearCustomerSupportAgentAsmState","metaReducers","getAsmState","getAsmUi","getCustomerSearchResultsLoaderState","getCustomerSearchResults","loaderValueSelector","getCustomerSearchResultsLoading","loaderLoadingSelector","asmGroup_selectors","AsmStatePersistenceService","statePersistenceService","store","authStorageService","subscription","key","initSync","add","syncWithStorage","state$","onRead","getEmulatedUserToken","getTokenTarget","ui","emulatedUserToken","tokenTarget","emulatedToken","refresh_token","dispatch","setEmulatedUserToken","setTokenTarget","ngOnDestroy","unsubscribe","StatePersistenceService","Store","AsmAuthStorageService","AsmStoreModule","ɵmod","ɵinj","forFeature","imports","providers","asmStatePersistenceFactory","asmStatePersistenceService","result","AsmCoreModule","deps","multi","AsmConfig","useExisting","CUSTOMER_SEARCH_PAGE_NORMALIZER","AsmService","customerSearchReset","updateAsmUiState","getAsmUiState","AsmActions","AsmSelectors"],"mappings":"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","sourcesContent":["import { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, InjectionToken, NgModule } from '@angular/core';\nimport * as i1$1 from '@spartacus/core';\nimport { StateUtils, normalizeHttpError, StateModule, provideDefaultConfig, MODULE_INITIALIZER, OccConfig, Config } from '@spartacus/core';\nimport * as i1$2 from '@ngrx/store';\nimport { createFeatureSelector, createSelector, select, StoreModule } from '@ngrx/store';\nimport { of, Subscription, combineLatest } from 'rxjs';\nimport { map, switchMap, catchError, filter } from 'rxjs/operators';\nimport { __decorate } from 'tslib';\nimport * as i1 from '@ngrx/effects';\nimport { ofType, Effect, EffectsModule } from '@ngrx/effects';\nimport * as i3 from '@spartacus/asm/root';\n\nconst defaultAsmConfig = {\n    asm: {\n        agentSessionTimer: {\n            startingDelayInSeconds: 600,\n        },\n        customerSearch: {\n            maxResults: 20,\n        },\n    },\n};\n\nclass AsmAdapter {\n}\n\nclass AsmConnector {\n    constructor(asmAdapter) {\n        this.asmAdapter = asmAdapter;\n    }\n    customerSearch(options) {\n        return this.asmAdapter.customerSearch(options);\n    }\n}\nAsmConnector.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmConnector, deps: [{ token: AsmAdapter }], target: i0.ɵɵFactoryTarget.Injectable });\nAsmConnector.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmConnector, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmConnector, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }], ctorParameters: function () { return [{ type: AsmAdapter }]; } });\n\nconst ASM_UI_UPDATE = '[Asm] UI Update';\nclass AsmUiUpdate {\n    constructor(payload) {\n        this.payload = payload;\n        this.type = ASM_UI_UPDATE;\n    }\n}\n\nconst ASM_FEATURE = 'asm';\nconst CUSTOMER_SEARCH_DATA = '[asm] Customer search data';\n\nconst CUSTOMER_SEARCH = '[Asm] Customer Search';\nconst CUSTOMER_SEARCH_FAIL = '[Asm] Customer Search Fail';\nconst CUSTOMER_SEARCH_SUCCESS = '[Asm] Customer Search Success';\nconst CUSTOMER_SEARCH_RESET = '[Asm] Customer Search Reset';\nclass CustomerSearch extends StateUtils.LoaderLoadAction {\n    constructor(payload) {\n        super(CUSTOMER_SEARCH_DATA);\n        this.payload = payload;\n        this.type = CUSTOMER_SEARCH;\n    }\n}\nclass CustomerSearchFail extends StateUtils.LoaderFailAction {\n    constructor(payload) {\n        super(CUSTOMER_SEARCH_DATA);\n        this.payload = payload;\n        this.type = CUSTOMER_SEARCH_FAIL;\n    }\n}\nclass CustomerSearchSuccess extends StateUtils.LoaderSuccessAction {\n    constructor(payload) {\n        super(CUSTOMER_SEARCH_DATA);\n        this.payload = payload;\n        this.type = CUSTOMER_SEARCH_SUCCESS;\n    }\n}\nclass CustomerSearchReset extends StateUtils.LoaderResetAction {\n    constructor() {\n        super(CUSTOMER_SEARCH_DATA);\n        this.type = CUSTOMER_SEARCH_RESET;\n    }\n}\n\nconst LOGOUT_CUSTOMER_SUPPORT_AGENT = '[Auth] Logout Customer Support Agent';\n/**\n * Action dispatched after customer support agent logout. Used to clear store data (ui, search results)\n */\nclass LogoutCustomerSupportAgent {\n    constructor() {\n        this.type = LOGOUT_CUSTOMER_SUPPORT_AGENT;\n    }\n}\n\nvar customerGroup_actions = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ASM_UI_UPDATE: ASM_UI_UPDATE,\n    AsmUiUpdate: AsmUiUpdate,\n    CUSTOMER_SEARCH: CUSTOMER_SEARCH,\n    CUSTOMER_SEARCH_FAIL: CUSTOMER_SEARCH_FAIL,\n    CUSTOMER_SEARCH_SUCCESS: CUSTOMER_SEARCH_SUCCESS,\n    CUSTOMER_SEARCH_RESET: CUSTOMER_SEARCH_RESET,\n    CustomerSearch: CustomerSearch,\n    CustomerSearchFail: CustomerSearchFail,\n    CustomerSearchSuccess: CustomerSearchSuccess,\n    CustomerSearchReset: CustomerSearchReset,\n    LOGOUT_CUSTOMER_SUPPORT_AGENT: LOGOUT_CUSTOMER_SUPPORT_AGENT,\n    LogoutCustomerSupportAgent: LogoutCustomerSupportAgent\n});\n\nclass CustomerEffects {\n    constructor(actions$, asmConnector) {\n        this.actions$ = actions$;\n        this.asmConnector = asmConnector;\n        this.customerSearch$ = this.actions$.pipe(ofType(CUSTOMER_SEARCH), map((action) => action.payload), switchMap((options) => this.asmConnector.customerSearch(options).pipe(map((customerSearchResults) => {\n            return new CustomerSearchSuccess(customerSearchResults);\n        }), catchError((error) => of(new CustomerSearchFail(normalizeHttpError(error)))))));\n    }\n}\nCustomerEffects.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: CustomerEffects, deps: [{ token: i1.Actions }, { token: AsmConnector }], target: i0.ɵɵFactoryTarget.Injectable });\nCustomerEffects.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: CustomerEffects });\n__decorate([\n    Effect()\n], CustomerEffects.prototype, \"customerSearch$\", void 0);\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: CustomerEffects, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1.Actions }, { type: AsmConnector }]; }, propDecorators: { customerSearch$: [] } });\n\nconst effects = [CustomerEffects];\n\nconst initialState = { collapsed: false };\nfunction reducer(state = initialState, action) {\n    switch (action.type) {\n        case ASM_UI_UPDATE: {\n            return Object.assign(Object.assign({}, state), action.payload);\n        }\n        default: {\n            return state;\n        }\n    }\n}\n\nfunction getReducers() {\n    return {\n        customerSearchResult: StateUtils.loaderReducer(CUSTOMER_SEARCH_DATA),\n        asmUi: reducer,\n    };\n}\nconst reducerToken = new InjectionToken('AsmReducers');\nconst reducerProvider = {\n    provide: reducerToken,\n    useFactory: getReducers,\n};\nfunction clearCustomerSupportAgentAsmState(reducer) {\n    return function (state, action) {\n        if (action.type === LOGOUT_CUSTOMER_SUPPORT_AGENT) {\n            state = Object.assign(Object.assign({}, state), { customerSearchResult: {} });\n        }\n        return reducer(state, action);\n    };\n}\nconst metaReducers = [\n    clearCustomerSupportAgentAsmState,\n];\n\nconst getAsmState = createFeatureSelector(ASM_FEATURE);\n\nconst getAsmUi = createSelector(getAsmState, (state) => state.asmUi);\n\nconst getCustomerSearchResultsLoaderState = createSelector(getAsmState, (state) => state.customerSearchResult);\nconst getCustomerSearchResults = createSelector(getCustomerSearchResultsLoaderState, (state) => StateUtils.loaderValueSelector(state));\nconst getCustomerSearchResultsLoading = createSelector(getCustomerSearchResultsLoaderState, (state) => StateUtils.loaderLoadingSelector(state));\n\nvar asmGroup_selectors = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    getAsmUi: getAsmUi,\n    getCustomerSearchResultsLoaderState: getCustomerSearchResultsLoaderState,\n    getCustomerSearchResults: getCustomerSearchResults,\n    getCustomerSearchResultsLoading: getCustomerSearchResultsLoading,\n    getAsmState: getAsmState\n});\n\n/**\n * Responsible for storing ASM state in the browser storage.\n * Uses `StatePersistenceService` mechanism.\n */\nclass AsmStatePersistenceService {\n    constructor(statePersistenceService, store, authStorageService) {\n        this.statePersistenceService = statePersistenceService;\n        this.store = store;\n        this.authStorageService = authStorageService;\n        this.subscription = new Subscription();\n        /**\n         * Identifier used for storage key.\n         */\n        this.key = 'asm';\n    }\n    /**\n     * Initializes the synchronization between state and browser storage.\n     */\n    initSync() {\n        this.subscription.add(this.statePersistenceService.syncWithStorage({\n            key: this.key,\n            state$: this.getAsmState(),\n            onRead: (state) => this.onRead(state),\n        }));\n    }\n    /**\n     * Gets and transforms state from different sources into the form that should\n     * be saved in storage.\n     */\n    getAsmState() {\n        return combineLatest([\n            this.store.pipe(\n            // Since getAsmState() may be called while the module is lazy loded\n            // The asm state slice may not exist yet in the first store emissions.\n            filter((store) => !!store.asm), select(getAsmUi)),\n            of(this.authStorageService.getEmulatedUserToken()),\n            this.authStorageService.getTokenTarget(),\n        ]).pipe(map(([ui, emulatedUserToken, tokenTarget]) => {\n            let emulatedToken = emulatedUserToken;\n            if (emulatedToken) {\n                emulatedToken = Object.assign({}, emulatedUserToken);\n                // To minimize risk of user account hijacking we don't persist emulated user refresh_token\n                delete emulatedToken.refresh_token;\n            }\n            return {\n                ui,\n                emulatedUserToken: emulatedToken,\n                tokenTarget,\n            };\n        }));\n    }\n    /**\n     * Function called on each browser storage read.\n     * Used to update state from browser -> state.\n     */\n    onRead(state) {\n        if (state) {\n            if (state.ui) {\n                this.store.dispatch(new AsmUiUpdate(state.ui));\n            }\n            if (state.emulatedUserToken) {\n                this.authStorageService.setEmulatedUserToken(state.emulatedUserToken);\n            }\n            if (state.tokenTarget) {\n                this.authStorageService.setTokenTarget(state.tokenTarget);\n            }\n        }\n    }\n    ngOnDestroy() {\n        this.subscription.unsubscribe();\n    }\n}\nAsmStatePersistenceService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmStatePersistenceService, deps: [{ token: i1$1.StatePersistenceService }, { token: i1$2.Store }, { token: i3.AsmAuthStorageService }], target: i0.ɵɵFactoryTarget.Injectable });\nAsmStatePersistenceService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmStatePersistenceService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmStatePersistenceService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }], ctorParameters: function () { return [{ type: i1$1.StatePersistenceService }, { type: i1$2.Store }, { type: i3.AsmAuthStorageService }]; } });\n\nclass AsmStoreModule {\n}\nAsmStoreModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmStoreModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nAsmStoreModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmStoreModule, imports: [CommonModule,\n        StateModule, i1$2.StoreFeatureModule, i1.EffectsFeatureModule] });\nAsmStoreModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmStoreModule, providers: [reducerProvider], imports: [[\n            CommonModule,\n            StateModule,\n            StoreModule.forFeature(ASM_FEATURE, reducerToken, { metaReducers }),\n            EffectsModule.forFeature(effects),\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmStoreModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule,\n                        StateModule,\n                        StoreModule.forFeature(ASM_FEATURE, reducerToken, { metaReducers }),\n                        EffectsModule.forFeature(effects),\n                    ],\n                    providers: [reducerProvider],\n                }]\n        }] });\n\nfunction asmStatePersistenceFactory(asmStatePersistenceService) {\n    const result = () => asmStatePersistenceService.initSync();\n    return result;\n}\nclass AsmCoreModule {\n}\nAsmCoreModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmCoreModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nAsmCoreModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmCoreModule, imports: [CommonModule, AsmStoreModule] });\nAsmCoreModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmCoreModule, providers: [\n        provideDefaultConfig(defaultAsmConfig),\n        AsmConnector,\n        {\n            provide: MODULE_INITIALIZER,\n            useFactory: asmStatePersistenceFactory,\n            deps: [AsmStatePersistenceService],\n            multi: true,\n        },\n    ], imports: [[CommonModule, AsmStoreModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmCoreModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, AsmStoreModule],\n                    providers: [\n                        provideDefaultConfig(defaultAsmConfig),\n                        AsmConnector,\n                        {\n                            provide: MODULE_INITIALIZER,\n                            useFactory: asmStatePersistenceFactory,\n                            deps: [AsmStatePersistenceService],\n                            multi: true,\n                        },\n                    ],\n                }]\n        }] });\n\nclass AsmConfig extends OccConfig {\n}\nAsmConfig.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmConfig, deps: null, target: i0.ɵɵFactoryTarget.Injectable });\nAsmConfig.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmConfig, providedIn: 'root', useExisting: Config });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmConfig, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                    useExisting: Config,\n                }]\n        }] });\n\nconst CUSTOMER_SEARCH_PAGE_NORMALIZER = new InjectionToken('CustomerSearchPageNormalizer');\n\nclass AsmService {\n    constructor(store) {\n        this.store = store;\n    }\n    /**\n     * Search for customers\n     * @param options\n     */\n    customerSearch(options) {\n        this.store.dispatch(new CustomerSearch(options));\n    }\n    /**\n     * Reset the customer search result data to the initial state.\n     */\n    customerSearchReset() {\n        this.store.dispatch(new CustomerSearchReset());\n    }\n    /**\n     * Returns the customer search result data.\n     */\n    getCustomerSearchResults() {\n        return this.store.pipe(select(getCustomerSearchResults));\n    }\n    /**\n     * Returns the customer search result loading status.\n     */\n    getCustomerSearchResultsLoading() {\n        return this.store.pipe(select(getCustomerSearchResultsLoading));\n    }\n    /**\n     * Updates the state of the ASM UI\n     */\n    updateAsmUiState(asmUi) {\n        this.store.dispatch(new AsmUiUpdate(asmUi));\n    }\n    /**\n     * Get the state of the ASM UI\n     */\n    getAsmUiState() {\n        return this.store.pipe(select(getAsmUi));\n    }\n}\nAsmService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmService, deps: [{ token: i1$2.Store }], target: i0.ɵɵFactoryTarget.Injectable });\nAsmService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }], ctorParameters: function () { return [{ type: i1$2.Store }]; } });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ASM_FEATURE, customerGroup_actions as AsmActions, AsmAdapter, AsmConfig, AsmConnector, AsmCoreModule, asmGroup_selectors as AsmSelectors, AsmService, AsmStatePersistenceService, CUSTOMER_SEARCH_DATA, CUSTOMER_SEARCH_PAGE_NORMALIZER, asmStatePersistenceFactory };\n//# sourceMappingURL=spartacus-asm-core.js.map\n"]},"metadata":{},"sourceType":"module"}