{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, NgModule } from '@angular/core';\nimport { UserAccountChangedEvent, UserAccountFacade } from '@spartacus/user/account/root';\nimport * as i2 from '@spartacus/core';\nimport { LoginEvent, LogoutEvent } from '@spartacus/core';\nimport { switchMap } from 'rxjs/operators';\nconst USER_ACCOUNT_NORMALIZER = new InjectionToken('UserAccountNormalizer');\nconst USER_ACCOUNT_SERIALIZER = new InjectionToken('UserAccountSerializer');\n\nclass UserAccountAdapter {}\n\nclass UserAccountConnector {\n  constructor(adapter) {\n    this.adapter = adapter;\n  }\n\n  get(userId) {\n    return this.adapter.load(userId);\n  }\n\n}\n\nUserAccountConnector.ɵfac = function UserAccountConnector_Factory(t) {\n  return new (t || UserAccountConnector)(i0.ɵɵinject(UserAccountAdapter));\n};\n\nUserAccountConnector.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: UserAccountConnector,\n  factory: UserAccountConnector.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(UserAccountConnector, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: UserAccountAdapter\n    }];\n  }, null);\n})();\n\nclass UserAccountService {\n  constructor(userAccountConnector, userIdService, query) {\n    this.userAccountConnector = userAccountConnector;\n    this.userIdService = userIdService;\n    this.query = query;\n    this.userQuery = this.query.create(() => this.userIdService.takeUserId(true).pipe(switchMap(userId => this.userAccountConnector.get(userId))), {\n      reloadOn: [UserAccountChangedEvent],\n      resetOn: [LoginEvent, LogoutEvent]\n    });\n  }\n  /**\n   * Returns the current user.\n   */\n\n\n  get() {\n    return this.userQuery.get();\n  }\n\n}\n\nUserAccountService.ɵfac = function UserAccountService_Factory(t) {\n  return new (t || UserAccountService)(i0.ɵɵinject(UserAccountConnector), i0.ɵɵinject(i2.UserIdService), i0.ɵɵinject(i2.QueryService));\n};\n\nUserAccountService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: UserAccountService,\n  factory: UserAccountService.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(UserAccountService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: UserAccountConnector\n    }, {\n      type: i2.UserIdService\n    }, {\n      type: i2.QueryService\n    }];\n  }, null);\n})();\n\nconst facadeProviders = [UserAccountService, {\n  provide: UserAccountFacade,\n  useExisting: UserAccountService\n}];\n\nclass UserAccountCoreModule {}\n\nUserAccountCoreModule.ɵfac = function UserAccountCoreModule_Factory(t) {\n  return new (t || UserAccountCoreModule)();\n};\n\nUserAccountCoreModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: UserAccountCoreModule\n});\nUserAccountCoreModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [UserAccountConnector, ...facadeProviders]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(UserAccountCoreModule, [{\n    type: NgModule,\n    args: [{\n      providers: [UserAccountConnector, ...facadeProviders]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { USER_ACCOUNT_NORMALIZER, USER_ACCOUNT_SERIALIZER, UserAccountAdapter, UserAccountConnector, UserAccountCoreModule, UserAccountService }; //# sourceMappingURL=spartacus-user-account-core.js.map","map":{"version":3,"sources":["D:/spartacus/front-store/node_modules/@spartacus/user/fesm2015/spartacus-user-account-core.js"],"names":["i0","InjectionToken","Injectable","NgModule","UserAccountChangedEvent","UserAccountFacade","i2","LoginEvent","LogoutEvent","switchMap","USER_ACCOUNT_NORMALIZER","USER_ACCOUNT_SERIALIZER","UserAccountAdapter","UserAccountConnector","constructor","adapter","get","userId","load","ɵfac","ɵprov","type","UserAccountService","userAccountConnector","userIdService","query","userQuery","create","takeUserId","pipe","reloadOn","resetOn","UserIdService","QueryService","facadeProviders","provide","useExisting","UserAccountCoreModule","ɵmod","ɵinj","args","providers"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, NgModule } from '@angular/core';\nimport { UserAccountChangedEvent, UserAccountFacade } from '@spartacus/user/account/root';\nimport * as i2 from '@spartacus/core';\nimport { LoginEvent, LogoutEvent } from '@spartacus/core';\nimport { switchMap } from 'rxjs/operators';\n\nconst USER_ACCOUNT_NORMALIZER = new InjectionToken('UserAccountNormalizer');\nconst USER_ACCOUNT_SERIALIZER = new InjectionToken('UserAccountSerializer');\n\nclass UserAccountAdapter {\n}\n\nclass UserAccountConnector {\n    constructor(adapter) {\n        this.adapter = adapter;\n    }\n    get(userId) {\n        return this.adapter.load(userId);\n    }\n}\nUserAccountConnector.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UserAccountConnector, deps: [{ token: UserAccountAdapter }], target: i0.ɵɵFactoryTarget.Injectable });\nUserAccountConnector.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UserAccountConnector });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UserAccountConnector, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: UserAccountAdapter }]; } });\n\nclass UserAccountService {\n    constructor(userAccountConnector, userIdService, query) {\n        this.userAccountConnector = userAccountConnector;\n        this.userIdService = userIdService;\n        this.query = query;\n        this.userQuery = this.query.create(() => this.userIdService\n            .takeUserId(true)\n            .pipe(switchMap((userId) => this.userAccountConnector.get(userId))), {\n            reloadOn: [UserAccountChangedEvent],\n            resetOn: [LoginEvent, LogoutEvent],\n        });\n    }\n    /**\n     * Returns the current user.\n     */\n    get() {\n        return this.userQuery.get();\n    }\n}\nUserAccountService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UserAccountService, deps: [{ token: UserAccountConnector }, { token: i2.UserIdService }, { token: i2.QueryService }], target: i0.ɵɵFactoryTarget.Injectable });\nUserAccountService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UserAccountService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UserAccountService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: UserAccountConnector }, { type: i2.UserIdService }, { type: i2.QueryService }]; } });\n\nconst facadeProviders = [\n    UserAccountService,\n    {\n        provide: UserAccountFacade,\n        useExisting: UserAccountService,\n    },\n];\n\nclass UserAccountCoreModule {\n}\nUserAccountCoreModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UserAccountCoreModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nUserAccountCoreModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UserAccountCoreModule });\nUserAccountCoreModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UserAccountCoreModule, providers: [UserAccountConnector, ...facadeProviders] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UserAccountCoreModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [UserAccountConnector, ...facadeProviders],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { USER_ACCOUNT_NORMALIZER, USER_ACCOUNT_SERIALIZER, UserAccountAdapter, UserAccountConnector, UserAccountCoreModule, UserAccountService };\n//# sourceMappingURL=spartacus-user-account-core.js.map\n"]},"metadata":{},"sourceType":"module"}