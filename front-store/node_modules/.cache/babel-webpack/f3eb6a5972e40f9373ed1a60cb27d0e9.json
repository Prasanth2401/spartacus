{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, NgModule } from '@angular/core';\nimport * as i1$1 from '@spartacus/cart/quick-order/root';\nimport { defaultQuickOrderConfig, QuickOrderFacade } from '@spartacus/cart/quick-order/root';\nimport * as i1 from '@spartacus/core';\nimport { CartAddEntrySuccessEvent, CartAddEntryFailEvent, HttpErrorModel, BASE_SITE_CONTEXT_ID, StorageSyncType } from '@spartacus/core';\nimport { Subject, BehaviorSubject, of, timer, Subscription } from 'rxjs';\nimport { map, take, first, switchMap, filter, tap } from 'rxjs/operators';\n\nclass QuickOrderService {\n  constructor(activeCartService, productAdapter, // TODO(#14059): Remove this service\n  eventService, productSearchConnector //TODO(#14059): Make it required\n  ) {\n    this.activeCartService = activeCartService;\n    this.productAdapter = productAdapter;\n    this.eventService = eventService;\n    this.productSearchConnector = productSearchConnector;\n    this.productAdded$ = new Subject();\n    this.entries$ = new BehaviorSubject([]);\n    this.softDeletedEntries$ = new BehaviorSubject({});\n    this.nonPurchasableProductError$ = new BehaviorSubject(null);\n    this.hardDeleteTimeout = 5000;\n    this.quickOrderListLimit = 0;\n    this.clearDeleteTimeouts = {};\n  }\n\n  ngOnDestroy() {\n    this.clearDeletedEntries();\n  }\n  /**\n   * Get entries\n   */\n\n\n  getEntries() {\n    return this.entries$;\n  }\n  /**\n   * @deprecated since 4.2 - use searchProducts instead\n   * Search product using SKU\n   */\n\n\n  search(productCode) {\n    return this.productAdapter.load(productCode);\n  }\n  /**\n   * Search products using query\n   */\n\n\n  searchProducts(query, maxProducts) {\n    var _a, _b; // TODO(#14059): Remove condition\n\n\n    if (this.productSearchConnector) {\n      const searchConfig = {\n        pageSize: maxProducts || ((_b = (_a = defaultQuickOrderConfig.quickOrder) === null || _a === void 0 ? void 0 : _a.searchForm) === null || _b === void 0 ? void 0 : _b.maxProducts)\n      };\n      return this.productSearchConnector.search(query, searchConfig).pipe(map(searchPage => searchPage.products || []));\n    } else {\n      return of([]);\n    }\n  }\n  /**\n   * Clear a list of added entries\n   */\n\n\n  clearList() {\n    this.entries$.next([]);\n  }\n  /**\n   * Get information about the possibility to add the next product\n   */\n\n\n  canAdd(code) {\n    if (code) {\n      return of(this.isProductOnTheList(code) || !this.isLimitExceeded());\n    } else {\n      return of(!this.isLimitExceeded());\n    }\n  }\n  /**\n   * Set quick order list limit property\n   */\n\n\n  setListLimit(limit) {\n    this.quickOrderListLimit = limit;\n  }\n  /**\n   * Load a list of entries\n   */\n\n\n  loadEntries(entries = []) {\n    this.entries$.next(entries);\n  }\n  /**\n   * Load a list of entries\n   */\n\n\n  updateEntryQuantity(entryIndex, quantity) {\n    const entries = this.entries$.getValue() || [];\n    entries[entryIndex].quantity = quantity;\n    this.entries$.next(entries);\n  }\n  /**\n   * Delete single entry from the list\n   */\n\n\n  softDeleteEntry(index) {\n    this.entries$.pipe(take(1)).subscribe(entries => {\n      const entriesList = entries;\n      this.addSoftEntryDeletion(entriesList[index], true);\n      entriesList.splice(index, 1);\n      this.entries$.next(entriesList);\n    });\n  }\n  /**\n   * @deprecated since 4.2 - use softDeleteEntry instead\n   */\n\n\n  removeEntry(index) {\n    this.softDeleteEntry(index);\n  }\n  /**\n   * Add product to the quick order list\n   */\n\n\n  addProduct(product, quantity = 1) {\n    const entry = this.generateOrderEntry(product, quantity);\n    this.addEntry(entry);\n  }\n  /**\n   * Return product added subject\n   */\n\n\n  getProductAdded() {\n    return this.productAdded$;\n  }\n  /**\n   * Set product added subject\n   */\n\n\n  setProductAdded(productCode) {\n    this.productAdded$.next(productCode);\n  }\n  /**\n   * Adding to cart all products from the list\n   */\n\n\n  addToCart() {\n    let entries = [];\n    const events = [];\n    const subscription = this.eventService.get(CartAddEntrySuccessEvent).subscribe(cartEvent => {\n      if (cartEvent.quantityAdded === 0 || !!cartEvent.quantityAdded && cartEvent.quantityAdded < cartEvent.quantity) {\n        events.push(this.createQuickOrderResultEvent(cartEvent));\n      }\n    });\n    subscription.add(this.eventService.get(CartAddEntryFailEvent).subscribe(cartEvent => {\n      events.push(this.createQuickOrderResultEvent(cartEvent));\n    }));\n    return this.getEntries().pipe(first(), switchMap(elements => {\n      entries = elements;\n      this.activeCartService.addEntries(elements);\n      this.clearList();\n      return this.activeCartService.isStable();\n    }), filter(isStable => isStable), map(() => [entries, events]), tap(() => subscription.unsubscribe()));\n  }\n  /**\n   * Return soft deleted entries\n   */\n\n\n  getSoftDeletedEntries() {\n    return this.softDeletedEntries$;\n  }\n  /**\n   * Restore soft deleted entry\n   */\n\n\n  restoreSoftDeletedEntry(productCode) {\n    const entry = this.getSoftDeletedEntry(productCode);\n    this.addEntry(entry);\n    this.hardDeleteEntry(productCode);\n  }\n  /**\n   * Clear deleted entry from the list\n   */\n\n\n  hardDeleteEntry(productCode) {\n    const entry = this.getSoftDeletedEntry(productCode);\n    const deletedEntries = this.softDeletedEntries$.getValue();\n\n    if (entry) {\n      delete deletedEntries[productCode];\n      this.softDeletedEntries$.next(deletedEntries);\n    }\n\n    this.clearDeleteTimeout(productCode);\n  }\n  /**\n   * Clear all deleted entries and timeout subscriptions\n   */\n\n\n  clearDeletedEntries() {\n    Object.values(this.clearDeleteTimeouts).forEach(subscription => subscription.unsubscribe());\n    this.softDeletedEntries$.next({});\n    this.clearDeleteTimeouts = {};\n  }\n  /**\n   *  Return non purchasable product error\n   */\n\n\n  getNonPurchasableProductError() {\n    return this.nonPurchasableProductError$;\n  }\n  /**\n   * Set error that selected product is not purchasable\n   */\n\n\n  setNonPurchasableProductError(product) {\n    this.nonPurchasableProductError$.next(product);\n  }\n  /**\n   * Clear not purchasable product error\n   */\n\n\n  clearNonPurchasableProductError() {\n    this.nonPurchasableProductError$.next(null);\n  }\n  /**\n   * Add soft deleted entry to the cached list\n   */\n\n\n  addSoftEntryDeletion(entry, clearTimeout = true) {\n    var _a;\n\n    const deletedEntries = this.softDeletedEntries$.getValue();\n    const productCode = (_a = entry === null || entry === void 0 ? void 0 : entry.product) === null || _a === void 0 ? void 0 : _a.code;\n\n    if (productCode) {\n      deletedEntries[productCode] = entry;\n      this.softDeletedEntries$.next(deletedEntries);\n\n      if (clearTimeout) {\n        const subscription = timer(this.hardDeleteTimeout).subscribe(() => {\n          this.hardDeleteEntry(productCode);\n        });\n        this.clearDeleteTimeouts[productCode] = subscription;\n      }\n    }\n  }\n  /**\n   * Get soft deletion entry\n   */\n\n\n  getSoftDeletedEntry(productCode) {\n    const deletedEntries = this.softDeletedEntries$.getValue();\n    return deletedEntries[productCode];\n  }\n  /**\n   * Generate Order Entry from Product\n   */\n\n\n  generateOrderEntry(product, quantity) {\n    return {\n      basePrice: product.price,\n      product,\n      quantity,\n      totalPrice: product.price\n    };\n  }\n  /**\n   * Add single entry to the list\n   */\n\n\n  addEntry(entry) {\n    var _a, _b, _c, _d, _e;\n\n    if (((_a = entry === null || entry === void 0 ? void 0 : entry.product) === null || _a === void 0 ? void 0 : _a.code) && !this.isProductOnTheList(entry.product.code) && this.isLimitExceeded()) {\n      return;\n    }\n\n    const entries = this.entries$.getValue() || [];\n    const entryStockLevel = (_c = (_b = entry.product) === null || _b === void 0 ? void 0 : _b.stock) === null || _c === void 0 ? void 0 : _c.stockLevel;\n\n    if (entryStockLevel && entry.quantity && entry.quantity > entryStockLevel) {\n      entry.quantity = entryStockLevel;\n    }\n\n    if (((_d = entry.product) === null || _d === void 0 ? void 0 : _d.code) && this.isProductOnTheList(entry.product.code)) {\n      const entryIndex = entries.findIndex(item => {\n        var _a, _b;\n\n        return ((_a = item.product) === null || _a === void 0 ? void 0 : _a.code) === ((_b = entry.product) === null || _b === void 0 ? void 0 : _b.code);\n      });\n      let quantity = entries[entryIndex].quantity;\n\n      if (quantity && entry.quantity) {\n        entries[entryIndex].quantity = quantity + (entry === null || entry === void 0 ? void 0 : entry.quantity);\n        let newQuantity = entries[entryIndex].quantity;\n\n        if (newQuantity && entryStockLevel && newQuantity > entryStockLevel) {\n          entries[entryIndex].quantity = entryStockLevel;\n        }\n\n        this.entries$.next([...entries]);\n      }\n    } else {\n      this.entries$.next([...entries, ...[entry]]);\n    }\n\n    this.productAdded$.next((_e = entry.product) === null || _e === void 0 ? void 0 : _e.code);\n  }\n  /**\n   * Verify if product is already on the list\n   */\n\n\n  isProductOnTheList(productCode) {\n    const entries = this.entries$.getValue() || [];\n    return !!entries.find(item => {\n      var _a;\n\n      return ((_a = item.product) === null || _a === void 0 ? void 0 : _a.code) === productCode;\n    });\n  }\n\n  isLimitExceeded() {\n    const entries = this.entries$.getValue() || [];\n    return entries.length >= this.quickOrderListLimit;\n  }\n\n  createQuickOrderResultEvent(cartEvent) {\n    var _a, _b, _c;\n\n    const evt = {\n      productCode: cartEvent.productCode,\n      quantity: cartEvent.quantity\n    };\n\n    if ('entry' in cartEvent) {\n      evt.entry = cartEvent.entry;\n    }\n\n    if ('quantityAdded' in cartEvent) {\n      evt.quantityAdded = cartEvent.quantityAdded;\n    }\n\n    if ('error' in cartEvent && cartEvent.error instanceof HttpErrorModel) {\n      evt.error = cartEvent.error;\n    }\n\n    if ((_b = (_a = evt.error) === null || _a === void 0 ? void 0 : _a.details) === null || _b === void 0 ? void 0 : _b.length) {\n      const isOutOfStock = (_c = evt.error) === null || _c === void 0 ? void 0 : _c.details.some(e => e.type === 'InsufficientStockError');\n      evt.quantityAdded = isOutOfStock ? 0 : evt.quantity;\n    }\n\n    return evt;\n  }\n\n  clearDeleteTimeout(productCode) {\n    const clearMessageTimout = this.clearDeleteTimeouts[productCode];\n\n    if (clearMessageTimout) {\n      clearMessageTimout.unsubscribe();\n      delete this.clearDeleteTimeouts[productCode];\n    }\n  }\n\n}\n\nQuickOrderService.ɵfac = function QuickOrderService_Factory(t) {\n  return new (t || QuickOrderService)(i0.ɵɵinject(i1.ActiveCartService), i0.ɵɵinject(i1.ProductAdapter), i0.ɵɵinject(i1.EventService), i0.ɵɵinject(i1.ProductSearchConnector));\n};\n\nQuickOrderService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: QuickOrderService,\n  factory: QuickOrderService.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(QuickOrderService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i1.ActiveCartService\n    }, {\n      type: i1.ProductAdapter\n    }, {\n      type: i1.EventService\n    }, {\n      type: i1.ProductSearchConnector\n    }];\n  }, null);\n})();\n\nconst facadeProviders = [QuickOrderService, {\n  provide: QuickOrderFacade,\n  useExisting: QuickOrderService\n}];\n\nclass QuickOrderStatePersistenceService {\n  constructor(quickOrderService, siteContextParamsService, statePersistenceService) {\n    this.quickOrderService = quickOrderService;\n    this.siteContextParamsService = siteContextParamsService;\n    this.statePersistenceService = statePersistenceService;\n    this.subscription = new Subscription();\n    /**\n     * Identifier used for storage key.\n     */\n\n    this.key = 'quick-order';\n  }\n  /**\n   * Initializes the synchronization between state and browser storage.\n   */\n\n\n  initSync() {\n    this.subscription.add(this.statePersistenceService.syncWithStorage({\n      key: this.key,\n      state$: this.quickOrderService.getEntries(),\n      context$: this.siteContextParamsService.getValues([BASE_SITE_CONTEXT_ID]),\n      storageType: StorageSyncType.SESSION_STORAGE,\n      onRead: state => this.onRead(state)\n    }));\n  }\n\n  onRead(state) {\n    if (state) {\n      this.quickOrderService.loadEntries(state);\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n\n}\n\nQuickOrderStatePersistenceService.ɵfac = function QuickOrderStatePersistenceService_Factory(t) {\n  return new (t || QuickOrderStatePersistenceService)(i0.ɵɵinject(i1$1.QuickOrderFacade), i0.ɵɵinject(i1.SiteContextParamsService), i0.ɵɵinject(i1.StatePersistenceService));\n};\n\nQuickOrderStatePersistenceService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: QuickOrderStatePersistenceService,\n  factory: QuickOrderStatePersistenceService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(QuickOrderStatePersistenceService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1$1.QuickOrderFacade\n    }, {\n      type: i1.SiteContextParamsService\n    }, {\n      type: i1.StatePersistenceService\n    }];\n  }, null);\n})();\n\nclass QuickOrderCoreModule {\n  static forRoot() {\n    return {\n      ngModule: QuickOrderCoreModule\n    };\n  }\n\n}\n\nQuickOrderCoreModule.ɵfac = function QuickOrderCoreModule_Factory(t) {\n  return new (t || QuickOrderCoreModule)();\n};\n\nQuickOrderCoreModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: QuickOrderCoreModule\n});\nQuickOrderCoreModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [...facadeProviders, QuickOrderStatePersistenceService]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(QuickOrderCoreModule, [{\n    type: NgModule,\n    args: [{\n      providers: [...facadeProviders, QuickOrderStatePersistenceService]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { QuickOrderCoreModule, QuickOrderService, QuickOrderStatePersistenceService }; //# sourceMappingURL=spartacus-cart-quick-order-core.js.map","map":{"version":3,"sources":["D:/spartacus/front-store/node_modules/@spartacus/cart/fesm2015/spartacus-cart-quick-order-core.js"],"names":["i0","Injectable","NgModule","i1$1","defaultQuickOrderConfig","QuickOrderFacade","i1","CartAddEntrySuccessEvent","CartAddEntryFailEvent","HttpErrorModel","BASE_SITE_CONTEXT_ID","StorageSyncType","Subject","BehaviorSubject","of","timer","Subscription","map","take","first","switchMap","filter","tap","QuickOrderService","constructor","activeCartService","productAdapter","eventService","productSearchConnector","productAdded$","entries$","softDeletedEntries$","nonPurchasableProductError$","hardDeleteTimeout","quickOrderListLimit","clearDeleteTimeouts","ngOnDestroy","clearDeletedEntries","getEntries","search","productCode","load","searchProducts","query","maxProducts","_a","_b","searchConfig","pageSize","quickOrder","searchForm","pipe","searchPage","products","clearList","next","canAdd","code","isProductOnTheList","isLimitExceeded","setListLimit","limit","loadEntries","entries","updateEntryQuantity","entryIndex","quantity","getValue","softDeleteEntry","index","subscribe","entriesList","addSoftEntryDeletion","splice","removeEntry","addProduct","product","entry","generateOrderEntry","addEntry","getProductAdded","setProductAdded","addToCart","events","subscription","get","cartEvent","quantityAdded","push","createQuickOrderResultEvent","add","elements","addEntries","isStable","unsubscribe","getSoftDeletedEntries","restoreSoftDeletedEntry","getSoftDeletedEntry","hardDeleteEntry","deletedEntries","clearDeleteTimeout","Object","values","forEach","getNonPurchasableProductError","setNonPurchasableProductError","clearNonPurchasableProductError","clearTimeout","basePrice","price","totalPrice","_c","_d","_e","entryStockLevel","stock","stockLevel","findIndex","item","newQuantity","find","length","evt","error","details","isOutOfStock","some","e","type","clearMessageTimout","ɵfac","ActiveCartService","ProductAdapter","EventService","ProductSearchConnector","ɵprov","facadeProviders","provide","useExisting","QuickOrderStatePersistenceService","quickOrderService","siteContextParamsService","statePersistenceService","key","initSync","syncWithStorage","state$","context$","getValues","storageType","SESSION_STORAGE","onRead","state","SiteContextParamsService","StatePersistenceService","args","providedIn","QuickOrderCoreModule","forRoot","ngModule","ɵmod","ɵinj","providers"],"mappings":"AAAA,OAAO,KAAKA,EAAZ,MAAoB,eAApB;AACA,SAASC,UAAT,EAAqBC,QAArB,QAAqC,eAArC;AACA,OAAO,KAAKC,IAAZ,MAAsB,kCAAtB;AACA,SAASC,uBAAT,EAAkCC,gBAAlC,QAA0D,kCAA1D;AACA,OAAO,KAAKC,EAAZ,MAAoB,iBAApB;AACA,SAASC,wBAAT,EAAmCC,qBAAnC,EAA0DC,cAA1D,EAA0EC,oBAA1E,EAAgGC,eAAhG,QAAuH,iBAAvH;AACA,SAASC,OAAT,EAAkBC,eAAlB,EAAmCC,EAAnC,EAAuCC,KAAvC,EAA8CC,YAA9C,QAAkE,MAAlE;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,KAApB,EAA2BC,SAA3B,EAAsCC,MAAtC,EAA8CC,GAA9C,QAAyD,gBAAzD;;AAEA,MAAMC,iBAAN,CAAwB;AACpBC,EAAAA,WAAW,CAACC,iBAAD,EAAoBC,cAApB,EAAoC;AAC/CC,EAAAA,YADW,EACGC,sBADH,CAC0B;AAD1B,IAET;AACE,SAAKH,iBAAL,GAAyBA,iBAAzB;AACA,SAAKC,cAAL,GAAsBA,cAAtB;AACA,SAAKC,YAAL,GAAoBA,YAApB;AACA,SAAKC,sBAAL,GAA8BA,sBAA9B;AACA,SAAKC,aAAL,GAAqB,IAAIjB,OAAJ,EAArB;AACA,SAAKkB,QAAL,GAAgB,IAAIjB,eAAJ,CAAoB,EAApB,CAAhB;AACA,SAAKkB,mBAAL,GAA2B,IAAIlB,eAAJ,CAAoB,EAApB,CAA3B;AACA,SAAKmB,2BAAL,GAAmC,IAAInB,eAAJ,CAAoB,IAApB,CAAnC;AACA,SAAKoB,iBAAL,GAAyB,IAAzB;AACA,SAAKC,mBAAL,GAA2B,CAA3B;AACA,SAAKC,mBAAL,GAA2B,EAA3B;AACH;;AACDC,EAAAA,WAAW,GAAG;AACV,SAAKC,mBAAL;AACH;AACD;AACJ;AACA;;;AACIC,EAAAA,UAAU,GAAG;AACT,WAAO,KAAKR,QAAZ;AACH;AACD;AACJ;AACA;AACA;;;AACIS,EAAAA,MAAM,CAACC,WAAD,EAAc;AAChB,WAAO,KAAKd,cAAL,CAAoBe,IAApB,CAAyBD,WAAzB,CAAP;AACH;AACD;AACJ;AACA;;;AACIE,EAAAA,cAAc,CAACC,KAAD,EAAQC,WAAR,EAAqB;AAC/B,QAAIC,EAAJ,EAAQC,EAAR,CAD+B,CAE/B;;;AACA,QAAI,KAAKlB,sBAAT,EAAiC;AAC7B,YAAMmB,YAAY,GAAG;AACjBC,QAAAA,QAAQ,EAAEJ,WAAW,KAChB,CAACE,EAAE,GAAG,CAACD,EAAE,GAAGzC,uBAAuB,CAAC6C,UAA9B,MAA8C,IAA9C,IAAsDJ,EAAE,KAAK,KAAK,CAAlE,GAAsE,KAAK,CAA3E,GAA+EA,EAAE,CAACK,UAAxF,MAAwG,IAAxG,IAAgHJ,EAAE,KAAK,KAAK,CAA5H,GAAgI,KAAK,CAArI,GAAyIA,EAAE,CAACF,WAD5H;AADJ,OAArB;AAIA,aAAO,KAAKhB,sBAAL,CACFW,MADE,CACKI,KADL,EACYI,YADZ,EAEFI,IAFE,CAEGlC,GAAG,CAAEmC,UAAD,IAAgBA,UAAU,CAACC,QAAX,IAAuB,EAAxC,CAFN,CAAP;AAGH,KARD,MASK;AACD,aAAOvC,EAAE,CAAC,EAAD,CAAT;AACH;AACJ;AACD;AACJ;AACA;;;AACIwC,EAAAA,SAAS,GAAG;AACR,SAAKxB,QAAL,CAAcyB,IAAd,CAAmB,EAAnB;AACH;AACD;AACJ;AACA;;;AACIC,EAAAA,MAAM,CAACC,IAAD,EAAO;AACT,QAAIA,IAAJ,EAAU;AACN,aAAO3C,EAAE,CAAC,KAAK4C,kBAAL,CAAwBD,IAAxB,KAAiC,CAAC,KAAKE,eAAL,EAAnC,CAAT;AACH,KAFD,MAGK;AACD,aAAO7C,EAAE,CAAC,CAAC,KAAK6C,eAAL,EAAF,CAAT;AACH;AACJ;AACD;AACJ;AACA;;;AACIC,EAAAA,YAAY,CAACC,KAAD,EAAQ;AAChB,SAAK3B,mBAAL,GAA2B2B,KAA3B;AACH;AACD;AACJ;AACA;;;AACIC,EAAAA,WAAW,CAACC,OAAO,GAAG,EAAX,EAAe;AACtB,SAAKjC,QAAL,CAAcyB,IAAd,CAAmBQ,OAAnB;AACH;AACD;AACJ;AACA;;;AACIC,EAAAA,mBAAmB,CAACC,UAAD,EAAaC,QAAb,EAAuB;AACtC,UAAMH,OAAO,GAAG,KAAKjC,QAAL,CAAcqC,QAAd,MAA4B,EAA5C;AACAJ,IAAAA,OAAO,CAACE,UAAD,CAAP,CAAoBC,QAApB,GAA+BA,QAA/B;AACA,SAAKpC,QAAL,CAAcyB,IAAd,CAAmBQ,OAAnB;AACH;AACD;AACJ;AACA;;;AACIK,EAAAA,eAAe,CAACC,KAAD,EAAQ;AACnB,SAAKvC,QAAL,CAAcqB,IAAd,CAAmBjC,IAAI,CAAC,CAAD,CAAvB,EAA4BoD,SAA5B,CAAuCP,OAAD,IAAa;AAC/C,YAAMQ,WAAW,GAAGR,OAApB;AACA,WAAKS,oBAAL,CAA0BD,WAAW,CAACF,KAAD,CAArC,EAA8C,IAA9C;AACAE,MAAAA,WAAW,CAACE,MAAZ,CAAmBJ,KAAnB,EAA0B,CAA1B;AACA,WAAKvC,QAAL,CAAcyB,IAAd,CAAmBgB,WAAnB;AACH,KALD;AAMH;AACD;AACJ;AACA;;;AACIG,EAAAA,WAAW,CAACL,KAAD,EAAQ;AACf,SAAKD,eAAL,CAAqBC,KAArB;AACH;AACD;AACJ;AACA;;;AACIM,EAAAA,UAAU,CAACC,OAAD,EAAUV,QAAQ,GAAG,CAArB,EAAwB;AAC9B,UAAMW,KAAK,GAAG,KAAKC,kBAAL,CAAwBF,OAAxB,EAAiCV,QAAjC,CAAd;AACA,SAAKa,QAAL,CAAcF,KAAd;AACH;AACD;AACJ;AACA;;;AACIG,EAAAA,eAAe,GAAG;AACd,WAAO,KAAKnD,aAAZ;AACH;AACD;AACJ;AACA;;;AACIoD,EAAAA,eAAe,CAACzC,WAAD,EAAc;AACzB,SAAKX,aAAL,CAAmB0B,IAAnB,CAAwBf,WAAxB;AACH;AACD;AACJ;AACA;;;AACI0C,EAAAA,SAAS,GAAG;AACR,QAAInB,OAAO,GAAG,EAAd;AACA,UAAMoB,MAAM,GAAG,EAAf;AACA,UAAMC,YAAY,GAAG,KAAKzD,YAAL,CAChB0D,GADgB,CACZ9E,wBADY,EAEhB+D,SAFgB,CAELgB,SAAD,IAAe;AAC1B,UAAIA,SAAS,CAACC,aAAV,KAA4B,CAA5B,IACC,CAAC,CAACD,SAAS,CAACC,aAAZ,IACGD,SAAS,CAACC,aAAV,GAA0BD,SAAS,CAACpB,QAF5C,EAEuD;AACnDiB,QAAAA,MAAM,CAACK,IAAP,CAAY,KAAKC,2BAAL,CAAiCH,SAAjC,CAAZ;AACH;AACJ,KARoB,CAArB;AASAF,IAAAA,YAAY,CAACM,GAAb,CAAiB,KAAK/D,YAAL,CACZ0D,GADY,CACR7E,qBADQ,EAEZ8D,SAFY,CAEDgB,SAAD,IAAe;AAC1BH,MAAAA,MAAM,CAACK,IAAP,CAAY,KAAKC,2BAAL,CAAiCH,SAAjC,CAAZ;AACH,KAJgB,CAAjB;AAKA,WAAO,KAAKhD,UAAL,GAAkBa,IAAlB,CAAuBhC,KAAK,EAA5B,EAAgCC,SAAS,CAAEuE,QAAD,IAAc;AAC3D5B,MAAAA,OAAO,GAAG4B,QAAV;AACA,WAAKlE,iBAAL,CAAuBmE,UAAvB,CAAkCD,QAAlC;AACA,WAAKrC,SAAL;AACA,aAAO,KAAK7B,iBAAL,CAAuBoE,QAAvB,EAAP;AACH,KAL+C,CAAzC,EAKHxE,MAAM,CAAEwE,QAAD,IAAcA,QAAf,CALH,EAK6B5E,GAAG,CAAC,MAAM,CAAC8C,OAAD,EAAUoB,MAAV,CAAP,CALhC,EAK2D7D,GAAG,CAAC,MAAM8D,YAAY,CAACU,WAAb,EAAP,CAL9D,CAAP;AAMH;AACD;AACJ;AACA;;;AACIC,EAAAA,qBAAqB,GAAG;AACpB,WAAO,KAAKhE,mBAAZ;AACH;AACD;AACJ;AACA;;;AACIiE,EAAAA,uBAAuB,CAACxD,WAAD,EAAc;AACjC,UAAMqC,KAAK,GAAG,KAAKoB,mBAAL,CAAyBzD,WAAzB,CAAd;AACA,SAAKuC,QAAL,CAAcF,KAAd;AACA,SAAKqB,eAAL,CAAqB1D,WAArB;AACH;AACD;AACJ;AACA;;;AACI0D,EAAAA,eAAe,CAAC1D,WAAD,EAAc;AACzB,UAAMqC,KAAK,GAAG,KAAKoB,mBAAL,CAAyBzD,WAAzB,CAAd;AACA,UAAM2D,cAAc,GAAG,KAAKpE,mBAAL,CAAyBoC,QAAzB,EAAvB;;AACA,QAAIU,KAAJ,EAAW;AACP,aAAOsB,cAAc,CAAC3D,WAAD,CAArB;AACA,WAAKT,mBAAL,CAAyBwB,IAAzB,CAA8B4C,cAA9B;AACH;;AACD,SAAKC,kBAAL,CAAwB5D,WAAxB;AACH;AACD;AACJ;AACA;;;AACIH,EAAAA,mBAAmB,GAAG;AAClBgE,IAAAA,MAAM,CAACC,MAAP,CAAc,KAAKnE,mBAAnB,EAAwCoE,OAAxC,CAAiDnB,YAAD,IAAkBA,YAAY,CAACU,WAAb,EAAlE;AACA,SAAK/D,mBAAL,CAAyBwB,IAAzB,CAA8B,EAA9B;AACA,SAAKpB,mBAAL,GAA2B,EAA3B;AACH;AACD;AACJ;AACA;;;AACIqE,EAAAA,6BAA6B,GAAG;AAC5B,WAAO,KAAKxE,2BAAZ;AACH;AACD;AACJ;AACA;;;AACIyE,EAAAA,6BAA6B,CAAC7B,OAAD,EAAU;AACnC,SAAK5C,2BAAL,CAAiCuB,IAAjC,CAAsCqB,OAAtC;AACH;AACD;AACJ;AACA;;;AACI8B,EAAAA,+BAA+B,GAAG;AAC9B,SAAK1E,2BAAL,CAAiCuB,IAAjC,CAAsC,IAAtC;AACH;AACD;AACJ;AACA;;;AACIiB,EAAAA,oBAAoB,CAACK,KAAD,EAAQ8B,YAAY,GAAG,IAAvB,EAA6B;AAC7C,QAAI9D,EAAJ;;AACA,UAAMsD,cAAc,GAAG,KAAKpE,mBAAL,CAAyBoC,QAAzB,EAAvB;AACA,UAAM3B,WAAW,GAAG,CAACK,EAAE,GAAGgC,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAK,KAAK,CAAjC,GAAqC,KAAK,CAA1C,GAA8CA,KAAK,CAACD,OAA1D,MAAuE,IAAvE,IAA+E/B,EAAE,KAAK,KAAK,CAA3F,GAA+F,KAAK,CAApG,GAAwGA,EAAE,CAACY,IAA/H;;AACA,QAAIjB,WAAJ,EAAiB;AACb2D,MAAAA,cAAc,CAAC3D,WAAD,CAAd,GAA8BqC,KAA9B;AACA,WAAK9C,mBAAL,CAAyBwB,IAAzB,CAA8B4C,cAA9B;;AACA,UAAIQ,YAAJ,EAAkB;AACd,cAAMvB,YAAY,GAAGrE,KAAK,CAAC,KAAKkB,iBAAN,CAAL,CAA8BqC,SAA9B,CAAwC,MAAM;AAC/D,eAAK4B,eAAL,CAAqB1D,WAArB;AACH,SAFoB,CAArB;AAGA,aAAKL,mBAAL,CAAyBK,WAAzB,IAAwC4C,YAAxC;AACH;AACJ;AACJ;AACD;AACJ;AACA;;;AACIa,EAAAA,mBAAmB,CAACzD,WAAD,EAAc;AAC7B,UAAM2D,cAAc,GAAG,KAAKpE,mBAAL,CAAyBoC,QAAzB,EAAvB;AACA,WAAOgC,cAAc,CAAC3D,WAAD,CAArB;AACH;AACD;AACJ;AACA;;;AACIsC,EAAAA,kBAAkB,CAACF,OAAD,EAAUV,QAAV,EAAoB;AAClC,WAAO;AACH0C,MAAAA,SAAS,EAAEhC,OAAO,CAACiC,KADhB;AAEHjC,MAAAA,OAFG;AAGHV,MAAAA,QAHG;AAIH4C,MAAAA,UAAU,EAAElC,OAAO,CAACiC;AAJjB,KAAP;AAMH;AACD;AACJ;AACA;;;AACI9B,EAAAA,QAAQ,CAACF,KAAD,EAAQ;AACZ,QAAIhC,EAAJ,EAAQC,EAAR,EAAYiE,EAAZ,EAAgBC,EAAhB,EAAoBC,EAApB;;AACA,QAAI,CAAC,CAACpE,EAAE,GAAGgC,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAK,KAAK,CAAjC,GAAqC,KAAK,CAA1C,GAA8CA,KAAK,CAACD,OAA1D,MAAuE,IAAvE,IAA+E/B,EAAE,KAAK,KAAK,CAA3F,GAA+F,KAAK,CAApG,GAAwGA,EAAE,CAACY,IAA5G,KACA,CAAC,KAAKC,kBAAL,CAAwBmB,KAAK,CAACD,OAAN,CAAcnB,IAAtC,CADD,IAEA,KAAKE,eAAL,EAFJ,EAE4B;AACxB;AACH;;AACD,UAAMI,OAAO,GAAG,KAAKjC,QAAL,CAAcqC,QAAd,MAA4B,EAA5C;AACA,UAAM+C,eAAe,GAAG,CAACH,EAAE,GAAG,CAACjE,EAAE,GAAG+B,KAAK,CAACD,OAAZ,MAAyB,IAAzB,IAAiC9B,EAAE,KAAK,KAAK,CAA7C,GAAiD,KAAK,CAAtD,GAA0DA,EAAE,CAACqE,KAAnE,MAA8E,IAA9E,IAAsFJ,EAAE,KAAK,KAAK,CAAlG,GAAsG,KAAK,CAA3G,GAA+GA,EAAE,CAACK,UAA1I;;AACA,QAAIF,eAAe,IAAIrC,KAAK,CAACX,QAAzB,IAAqCW,KAAK,CAACX,QAAN,GAAiBgD,eAA1D,EAA2E;AACvErC,MAAAA,KAAK,CAACX,QAAN,GAAiBgD,eAAjB;AACH;;AACD,QAAI,CAAC,CAACF,EAAE,GAAGnC,KAAK,CAACD,OAAZ,MAAyB,IAAzB,IAAiCoC,EAAE,KAAK,KAAK,CAA7C,GAAiD,KAAK,CAAtD,GAA0DA,EAAE,CAACvD,IAA9D,KAAuE,KAAKC,kBAAL,CAAwBmB,KAAK,CAACD,OAAN,CAAcnB,IAAtC,CAA3E,EAAwH;AACpH,YAAMQ,UAAU,GAAGF,OAAO,CAACsD,SAAR,CAAmBC,IAAD,IAAU;AAAE,YAAIzE,EAAJ,EAAQC,EAAR;;AAAY,eAAO,CAAC,CAACD,EAAE,GAAGyE,IAAI,CAAC1C,OAAX,MAAwB,IAAxB,IAAgC/B,EAAE,KAAK,KAAK,CAA5C,GAAgD,KAAK,CAArD,GAAyDA,EAAE,CAACY,IAA7D,OAAwE,CAACX,EAAE,GAAG+B,KAAK,CAACD,OAAZ,MAAyB,IAAzB,IAAiC9B,EAAE,KAAK,KAAK,CAA7C,GAAiD,KAAK,CAAtD,GAA0DA,EAAE,CAACW,IAArI,CAAP;AAAoJ,OAA9L,CAAnB;AACA,UAAIS,QAAQ,GAAGH,OAAO,CAACE,UAAD,CAAP,CAAoBC,QAAnC;;AACA,UAAIA,QAAQ,IAAIW,KAAK,CAACX,QAAtB,EAAgC;AAC5BH,QAAAA,OAAO,CAACE,UAAD,CAAP,CAAoBC,QAApB,GAA+BA,QAAQ,IAAIW,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAK,KAAK,CAAjC,GAAqC,KAAK,CAA1C,GAA8CA,KAAK,CAACX,QAAxD,CAAvC;AACA,YAAIqD,WAAW,GAAGxD,OAAO,CAACE,UAAD,CAAP,CAAoBC,QAAtC;;AACA,YAAIqD,WAAW,IAAIL,eAAf,IAAkCK,WAAW,GAAGL,eAApD,EAAqE;AACjEnD,UAAAA,OAAO,CAACE,UAAD,CAAP,CAAoBC,QAApB,GAA+BgD,eAA/B;AACH;;AACD,aAAKpF,QAAL,CAAcyB,IAAd,CAAmB,CAAC,GAAGQ,OAAJ,CAAnB;AACH;AACJ,KAXD,MAYK;AACD,WAAKjC,QAAL,CAAcyB,IAAd,CAAmB,CAAC,GAAGQ,OAAJ,EAAa,GAAG,CAACc,KAAD,CAAhB,CAAnB;AACH;;AACD,SAAKhD,aAAL,CAAmB0B,IAAnB,CAAwB,CAAC0D,EAAE,GAAGpC,KAAK,CAACD,OAAZ,MAAyB,IAAzB,IAAiCqC,EAAE,KAAK,KAAK,CAA7C,GAAiD,KAAK,CAAtD,GAA0DA,EAAE,CAACxD,IAArF;AACH;AACD;AACJ;AACA;;;AACIC,EAAAA,kBAAkB,CAAClB,WAAD,EAAc;AAC5B,UAAMuB,OAAO,GAAG,KAAKjC,QAAL,CAAcqC,QAAd,MAA4B,EAA5C;AACA,WAAO,CAAC,CAACJ,OAAO,CAACyD,IAAR,CAAcF,IAAD,IAAU;AAAE,UAAIzE,EAAJ;;AAAQ,aAAO,CAAC,CAACA,EAAE,GAAGyE,IAAI,CAAC1C,OAAX,MAAwB,IAAxB,IAAgC/B,EAAE,KAAK,KAAK,CAA5C,GAAgD,KAAK,CAArD,GAAyDA,EAAE,CAACY,IAA7D,MAAuEjB,WAA9E;AAA4F,KAA7H,CAAT;AACH;;AACDmB,EAAAA,eAAe,GAAG;AACd,UAAMI,OAAO,GAAG,KAAKjC,QAAL,CAAcqC,QAAd,MAA4B,EAA5C;AACA,WAAOJ,OAAO,CAAC0D,MAAR,IAAkB,KAAKvF,mBAA9B;AACH;;AACDuD,EAAAA,2BAA2B,CAACH,SAAD,EAAY;AACnC,QAAIzC,EAAJ,EAAQC,EAAR,EAAYiE,EAAZ;;AACA,UAAMW,GAAG,GAAG;AACRlF,MAAAA,WAAW,EAAE8C,SAAS,CAAC9C,WADf;AAER0B,MAAAA,QAAQ,EAAEoB,SAAS,CAACpB;AAFZ,KAAZ;;AAIA,QAAI,WAAWoB,SAAf,EAA0B;AACtBoC,MAAAA,GAAG,CAAC7C,KAAJ,GAAYS,SAAS,CAACT,KAAtB;AACH;;AACD,QAAI,mBAAmBS,SAAvB,EAAkC;AAC9BoC,MAAAA,GAAG,CAACnC,aAAJ,GAAoBD,SAAS,CAACC,aAA9B;AACH;;AACD,QAAI,WAAWD,SAAX,IAAwBA,SAAS,CAACqC,KAAV,YAA2BlH,cAAvD,EAAuE;AACnEiH,MAAAA,GAAG,CAACC,KAAJ,GAAYrC,SAAS,CAACqC,KAAtB;AACH;;AACD,QAAI,CAAC7E,EAAE,GAAG,CAACD,EAAE,GAAG6E,GAAG,CAACC,KAAV,MAAqB,IAArB,IAA6B9E,EAAE,KAAK,KAAK,CAAzC,GAA6C,KAAK,CAAlD,GAAsDA,EAAE,CAAC+E,OAA/D,MAA4E,IAA5E,IAAoF9E,EAAE,KAAK,KAAK,CAAhG,GAAoG,KAAK,CAAzG,GAA6GA,EAAE,CAAC2E,MAApH,EAA4H;AACxH,YAAMI,YAAY,GAAG,CAACd,EAAE,GAAGW,GAAG,CAACC,KAAV,MAAqB,IAArB,IAA6BZ,EAAE,KAAK,KAAK,CAAzC,GAA6C,KAAK,CAAlD,GAAsDA,EAAE,CAACa,OAAH,CAAWE,IAAX,CAAiBC,CAAD,IAAOA,CAAC,CAACC,IAAF,KAAW,wBAAlC,CAA3E;AACAN,MAAAA,GAAG,CAACnC,aAAJ,GAAoBsC,YAAY,GAAG,CAAH,GAAOH,GAAG,CAACxD,QAA3C;AACH;;AACD,WAAOwD,GAAP;AACH;;AACDtB,EAAAA,kBAAkB,CAAC5D,WAAD,EAAc;AAC5B,UAAMyF,kBAAkB,GAAG,KAAK9F,mBAAL,CAAyBK,WAAzB,CAA3B;;AACA,QAAIyF,kBAAJ,EAAwB;AACpBA,MAAAA,kBAAkB,CAACnC,WAAnB;AACA,aAAO,KAAK3D,mBAAL,CAAyBK,WAAzB,CAAP;AACH;AACJ;;AArTmB;;AAuTxBjB,iBAAiB,CAAC2G,IAAlB;AAAA,mBAA8G3G,iBAA9G,EAAoGvB,EAApG,UAAiJM,EAAE,CAAC6H,iBAApJ,GAAoGnI,EAApG,UAAkLM,EAAE,CAAC8H,cAArL,GAAoGpI,EAApG,UAAgNM,EAAE,CAAC+H,YAAnN,GAAoGrI,EAApG,UAA4OM,EAAE,CAACgI,sBAA/O;AAAA;;AACA/G,iBAAiB,CAACgH,KAAlB,kBADoGvI,EACpG;AAAA,SAAkHuB,iBAAlH;AAAA,WAAkHA,iBAAlH;AAAA;;AACA;AAAA,qDAFoGvB,EAEpG,mBAA2FuB,iBAA3F,EAA0H,CAAC;AAC/GyG,IAAAA,IAAI,EAAE/H;AADyG,GAAD,CAA1H,EAE4B,YAAY;AAAE,WAAO,CAAC;AAAE+H,MAAAA,IAAI,EAAE1H,EAAE,CAAC6H;AAAX,KAAD,EAAiC;AAAEH,MAAAA,IAAI,EAAE1H,EAAE,CAAC8H;AAAX,KAAjC,EAA8D;AAAEJ,MAAAA,IAAI,EAAE1H,EAAE,CAAC+H;AAAX,KAA9D,EAAyF;AAAEL,MAAAA,IAAI,EAAE1H,EAAE,CAACgI;AAAX,KAAzF,CAAP;AAAuI,GAFjL;AAAA;;AAIA,MAAME,eAAe,GAAG,CACpBjH,iBADoB,EAEpB;AACIkH,EAAAA,OAAO,EAAEpI,gBADb;AAEIqI,EAAAA,WAAW,EAAEnH;AAFjB,CAFoB,CAAxB;;AAQA,MAAMoH,iCAAN,CAAwC;AACpCnH,EAAAA,WAAW,CAACoH,iBAAD,EAAoBC,wBAApB,EAA8CC,uBAA9C,EAAuE;AAC9E,SAAKF,iBAAL,GAAyBA,iBAAzB;AACA,SAAKC,wBAAL,GAAgCA,wBAAhC;AACA,SAAKC,uBAAL,GAA+BA,uBAA/B;AACA,SAAK1D,YAAL,GAAoB,IAAIpE,YAAJ,EAApB;AACA;AACR;AACA;;AACQ,SAAK+H,GAAL,GAAW,aAAX;AACH;AACD;AACJ;AACA;;;AACIC,EAAAA,QAAQ,GAAG;AACP,SAAK5D,YAAL,CAAkBM,GAAlB,CAAsB,KAAKoD,uBAAL,CAA6BG,eAA7B,CAA6C;AAC/DF,MAAAA,GAAG,EAAE,KAAKA,GADqD;AAE/DG,MAAAA,MAAM,EAAE,KAAKN,iBAAL,CAAuBtG,UAAvB,EAFuD;AAG/D6G,MAAAA,QAAQ,EAAE,KAAKN,wBAAL,CAA8BO,SAA9B,CAAwC,CAC9C1I,oBAD8C,CAAxC,CAHqD;AAM/D2I,MAAAA,WAAW,EAAE1I,eAAe,CAAC2I,eANkC;AAO/DC,MAAAA,MAAM,EAAGC,KAAD,IAAW,KAAKD,MAAL,CAAYC,KAAZ;AAP4C,KAA7C,CAAtB;AASH;;AACDD,EAAAA,MAAM,CAACC,KAAD,EAAQ;AACV,QAAIA,KAAJ,EAAW;AACP,WAAKZ,iBAAL,CAAuB9E,WAAvB,CAAmC0F,KAAnC;AACH;AACJ;;AACDpH,EAAAA,WAAW,GAAG;AACV,SAAKgD,YAAL,CAAkBU,WAAlB;AACH;;AAhCmC;;AAkCxC6C,iCAAiC,CAACT,IAAlC;AAAA,mBAA8HS,iCAA9H,EAhDoG3I,EAgDpG,UAAiLG,IAAI,CAACE,gBAAtL,GAhDoGL,EAgDpG,UAAmNM,EAAE,CAACmJ,wBAAtN,GAhDoGzJ,EAgDpG,UAA2PM,EAAE,CAACoJ,uBAA9P;AAAA;;AACAf,iCAAiC,CAACJ,KAAlC,kBAjDoGvI,EAiDpG;AAAA,SAAkI2I,iCAAlI;AAAA,WAAkIA,iCAAlI;AAAA,cAAiL;AAAjL;;AACA;AAAA,qDAlDoG3I,EAkDpG,mBAA2F2I,iCAA3F,EAA0I,CAAC;AAC/HX,IAAAA,IAAI,EAAE/H,UADyH;AAE/H0J,IAAAA,IAAI,EAAE,CAAC;AACCC,MAAAA,UAAU,EAAE;AADb,KAAD;AAFyH,GAAD,CAA1I,EAK4B,YAAY;AAAE,WAAO,CAAC;AAAE5B,MAAAA,IAAI,EAAE7H,IAAI,CAACE;AAAb,KAAD,EAAkC;AAAE2H,MAAAA,IAAI,EAAE1H,EAAE,CAACmJ;AAAX,KAAlC,EAAyE;AAAEzB,MAAAA,IAAI,EAAE1H,EAAE,CAACoJ;AAAX,KAAzE,CAAP;AAAwH,GALlK;AAAA;;AAOA,MAAMG,oBAAN,CAA2B;AACT,SAAPC,OAAO,GAAG;AACb,WAAO;AACHC,MAAAA,QAAQ,EAAEF;AADP,KAAP;AAGH;;AALsB;;AAO3BA,oBAAoB,CAAC3B,IAArB;AAAA,mBAAiH2B,oBAAjH;AAAA;;AACAA,oBAAoB,CAACG,IAArB,kBAjEoGhK,EAiEpG;AAAA,QAAkH6J;AAAlH;AACAA,oBAAoB,CAACI,IAArB,kBAlEoGjK,EAkEpG;AAAA,aAAmJ,CAAC,GAAGwI,eAAJ,EAAqBG,iCAArB;AAAnJ;;AACA;AAAA,qDAnEoG3I,EAmEpG,mBAA2F6J,oBAA3F,EAA6H,CAAC;AAClH7B,IAAAA,IAAI,EAAE9H,QAD4G;AAElHyJ,IAAAA,IAAI,EAAE,CAAC;AACCO,MAAAA,SAAS,EAAE,CAAC,GAAG1B,eAAJ,EAAqBG,iCAArB;AADZ,KAAD;AAF4G,GAAD,CAA7H;AAAA;AAOA;AACA;AACA;;;AAEA,SAASkB,oBAAT,EAA+BtI,iBAA/B,EAAkDoH,iCAAlD,G,CACA","sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, NgModule } from '@angular/core';\nimport * as i1$1 from '@spartacus/cart/quick-order/root';\nimport { defaultQuickOrderConfig, QuickOrderFacade } from '@spartacus/cart/quick-order/root';\nimport * as i1 from '@spartacus/core';\nimport { CartAddEntrySuccessEvent, CartAddEntryFailEvent, HttpErrorModel, BASE_SITE_CONTEXT_ID, StorageSyncType } from '@spartacus/core';\nimport { Subject, BehaviorSubject, of, timer, Subscription } from 'rxjs';\nimport { map, take, first, switchMap, filter, tap } from 'rxjs/operators';\n\nclass QuickOrderService {\n    constructor(activeCartService, productAdapter, // TODO(#14059): Remove this service\n    eventService, productSearchConnector //TODO(#14059): Make it required\n    ) {\n        this.activeCartService = activeCartService;\n        this.productAdapter = productAdapter;\n        this.eventService = eventService;\n        this.productSearchConnector = productSearchConnector;\n        this.productAdded$ = new Subject();\n        this.entries$ = new BehaviorSubject([]);\n        this.softDeletedEntries$ = new BehaviorSubject({});\n        this.nonPurchasableProductError$ = new BehaviorSubject(null);\n        this.hardDeleteTimeout = 5000;\n        this.quickOrderListLimit = 0;\n        this.clearDeleteTimeouts = {};\n    }\n    ngOnDestroy() {\n        this.clearDeletedEntries();\n    }\n    /**\n     * Get entries\n     */\n    getEntries() {\n        return this.entries$;\n    }\n    /**\n     * @deprecated since 4.2 - use searchProducts instead\n     * Search product using SKU\n     */\n    search(productCode) {\n        return this.productAdapter.load(productCode);\n    }\n    /**\n     * Search products using query\n     */\n    searchProducts(query, maxProducts) {\n        var _a, _b;\n        // TODO(#14059): Remove condition\n        if (this.productSearchConnector) {\n            const searchConfig = {\n                pageSize: maxProducts ||\n                    ((_b = (_a = defaultQuickOrderConfig.quickOrder) === null || _a === void 0 ? void 0 : _a.searchForm) === null || _b === void 0 ? void 0 : _b.maxProducts),\n            };\n            return this.productSearchConnector\n                .search(query, searchConfig)\n                .pipe(map((searchPage) => searchPage.products || []));\n        }\n        else {\n            return of([]);\n        }\n    }\n    /**\n     * Clear a list of added entries\n     */\n    clearList() {\n        this.entries$.next([]);\n    }\n    /**\n     * Get information about the possibility to add the next product\n     */\n    canAdd(code) {\n        if (code) {\n            return of(this.isProductOnTheList(code) || !this.isLimitExceeded());\n        }\n        else {\n            return of(!this.isLimitExceeded());\n        }\n    }\n    /**\n     * Set quick order list limit property\n     */\n    setListLimit(limit) {\n        this.quickOrderListLimit = limit;\n    }\n    /**\n     * Load a list of entries\n     */\n    loadEntries(entries = []) {\n        this.entries$.next(entries);\n    }\n    /**\n     * Load a list of entries\n     */\n    updateEntryQuantity(entryIndex, quantity) {\n        const entries = this.entries$.getValue() || [];\n        entries[entryIndex].quantity = quantity;\n        this.entries$.next(entries);\n    }\n    /**\n     * Delete single entry from the list\n     */\n    softDeleteEntry(index) {\n        this.entries$.pipe(take(1)).subscribe((entries) => {\n            const entriesList = entries;\n            this.addSoftEntryDeletion(entriesList[index], true);\n            entriesList.splice(index, 1);\n            this.entries$.next(entriesList);\n        });\n    }\n    /**\n     * @deprecated since 4.2 - use softDeleteEntry instead\n     */\n    removeEntry(index) {\n        this.softDeleteEntry(index);\n    }\n    /**\n     * Add product to the quick order list\n     */\n    addProduct(product, quantity = 1) {\n        const entry = this.generateOrderEntry(product, quantity);\n        this.addEntry(entry);\n    }\n    /**\n     * Return product added subject\n     */\n    getProductAdded() {\n        return this.productAdded$;\n    }\n    /**\n     * Set product added subject\n     */\n    setProductAdded(productCode) {\n        this.productAdded$.next(productCode);\n    }\n    /**\n     * Adding to cart all products from the list\n     */\n    addToCart() {\n        let entries = [];\n        const events = [];\n        const subscription = this.eventService\n            .get(CartAddEntrySuccessEvent)\n            .subscribe((cartEvent) => {\n            if (cartEvent.quantityAdded === 0 ||\n                (!!cartEvent.quantityAdded &&\n                    cartEvent.quantityAdded < cartEvent.quantity)) {\n                events.push(this.createQuickOrderResultEvent(cartEvent));\n            }\n        });\n        subscription.add(this.eventService\n            .get(CartAddEntryFailEvent)\n            .subscribe((cartEvent) => {\n            events.push(this.createQuickOrderResultEvent(cartEvent));\n        }));\n        return this.getEntries().pipe(first(), switchMap((elements) => {\n            entries = elements;\n            this.activeCartService.addEntries(elements);\n            this.clearList();\n            return this.activeCartService.isStable();\n        }), filter((isStable) => isStable), map(() => [entries, events]), tap(() => subscription.unsubscribe()));\n    }\n    /**\n     * Return soft deleted entries\n     */\n    getSoftDeletedEntries() {\n        return this.softDeletedEntries$;\n    }\n    /**\n     * Restore soft deleted entry\n     */\n    restoreSoftDeletedEntry(productCode) {\n        const entry = this.getSoftDeletedEntry(productCode);\n        this.addEntry(entry);\n        this.hardDeleteEntry(productCode);\n    }\n    /**\n     * Clear deleted entry from the list\n     */\n    hardDeleteEntry(productCode) {\n        const entry = this.getSoftDeletedEntry(productCode);\n        const deletedEntries = this.softDeletedEntries$.getValue();\n        if (entry) {\n            delete deletedEntries[productCode];\n            this.softDeletedEntries$.next(deletedEntries);\n        }\n        this.clearDeleteTimeout(productCode);\n    }\n    /**\n     * Clear all deleted entries and timeout subscriptions\n     */\n    clearDeletedEntries() {\n        Object.values(this.clearDeleteTimeouts).forEach((subscription) => subscription.unsubscribe());\n        this.softDeletedEntries$.next({});\n        this.clearDeleteTimeouts = {};\n    }\n    /**\n     *  Return non purchasable product error\n     */\n    getNonPurchasableProductError() {\n        return this.nonPurchasableProductError$;\n    }\n    /**\n     * Set error that selected product is not purchasable\n     */\n    setNonPurchasableProductError(product) {\n        this.nonPurchasableProductError$.next(product);\n    }\n    /**\n     * Clear not purchasable product error\n     */\n    clearNonPurchasableProductError() {\n        this.nonPurchasableProductError$.next(null);\n    }\n    /**\n     * Add soft deleted entry to the cached list\n     */\n    addSoftEntryDeletion(entry, clearTimeout = true) {\n        var _a;\n        const deletedEntries = this.softDeletedEntries$.getValue();\n        const productCode = (_a = entry === null || entry === void 0 ? void 0 : entry.product) === null || _a === void 0 ? void 0 : _a.code;\n        if (productCode) {\n            deletedEntries[productCode] = entry;\n            this.softDeletedEntries$.next(deletedEntries);\n            if (clearTimeout) {\n                const subscription = timer(this.hardDeleteTimeout).subscribe(() => {\n                    this.hardDeleteEntry(productCode);\n                });\n                this.clearDeleteTimeouts[productCode] = subscription;\n            }\n        }\n    }\n    /**\n     * Get soft deletion entry\n     */\n    getSoftDeletedEntry(productCode) {\n        const deletedEntries = this.softDeletedEntries$.getValue();\n        return deletedEntries[productCode];\n    }\n    /**\n     * Generate Order Entry from Product\n     */\n    generateOrderEntry(product, quantity) {\n        return {\n            basePrice: product.price,\n            product,\n            quantity,\n            totalPrice: product.price,\n        };\n    }\n    /**\n     * Add single entry to the list\n     */\n    addEntry(entry) {\n        var _a, _b, _c, _d, _e;\n        if (((_a = entry === null || entry === void 0 ? void 0 : entry.product) === null || _a === void 0 ? void 0 : _a.code) &&\n            !this.isProductOnTheList(entry.product.code) &&\n            this.isLimitExceeded()) {\n            return;\n        }\n        const entries = this.entries$.getValue() || [];\n        const entryStockLevel = (_c = (_b = entry.product) === null || _b === void 0 ? void 0 : _b.stock) === null || _c === void 0 ? void 0 : _c.stockLevel;\n        if (entryStockLevel && entry.quantity && entry.quantity > entryStockLevel) {\n            entry.quantity = entryStockLevel;\n        }\n        if (((_d = entry.product) === null || _d === void 0 ? void 0 : _d.code) && this.isProductOnTheList(entry.product.code)) {\n            const entryIndex = entries.findIndex((item) => { var _a, _b; return ((_a = item.product) === null || _a === void 0 ? void 0 : _a.code) === ((_b = entry.product) === null || _b === void 0 ? void 0 : _b.code); });\n            let quantity = entries[entryIndex].quantity;\n            if (quantity && entry.quantity) {\n                entries[entryIndex].quantity = quantity + (entry === null || entry === void 0 ? void 0 : entry.quantity);\n                let newQuantity = entries[entryIndex].quantity;\n                if (newQuantity && entryStockLevel && newQuantity > entryStockLevel) {\n                    entries[entryIndex].quantity = entryStockLevel;\n                }\n                this.entries$.next([...entries]);\n            }\n        }\n        else {\n            this.entries$.next([...entries, ...[entry]]);\n        }\n        this.productAdded$.next((_e = entry.product) === null || _e === void 0 ? void 0 : _e.code);\n    }\n    /**\n     * Verify if product is already on the list\n     */\n    isProductOnTheList(productCode) {\n        const entries = this.entries$.getValue() || [];\n        return !!entries.find((item) => { var _a; return ((_a = item.product) === null || _a === void 0 ? void 0 : _a.code) === productCode; });\n    }\n    isLimitExceeded() {\n        const entries = this.entries$.getValue() || [];\n        return entries.length >= this.quickOrderListLimit;\n    }\n    createQuickOrderResultEvent(cartEvent) {\n        var _a, _b, _c;\n        const evt = {\n            productCode: cartEvent.productCode,\n            quantity: cartEvent.quantity,\n        };\n        if ('entry' in cartEvent) {\n            evt.entry = cartEvent.entry;\n        }\n        if ('quantityAdded' in cartEvent) {\n            evt.quantityAdded = cartEvent.quantityAdded;\n        }\n        if ('error' in cartEvent && cartEvent.error instanceof HttpErrorModel) {\n            evt.error = cartEvent.error;\n        }\n        if ((_b = (_a = evt.error) === null || _a === void 0 ? void 0 : _a.details) === null || _b === void 0 ? void 0 : _b.length) {\n            const isOutOfStock = (_c = evt.error) === null || _c === void 0 ? void 0 : _c.details.some((e) => e.type === 'InsufficientStockError');\n            evt.quantityAdded = isOutOfStock ? 0 : evt.quantity;\n        }\n        return evt;\n    }\n    clearDeleteTimeout(productCode) {\n        const clearMessageTimout = this.clearDeleteTimeouts[productCode];\n        if (clearMessageTimout) {\n            clearMessageTimout.unsubscribe();\n            delete this.clearDeleteTimeouts[productCode];\n        }\n    }\n}\nQuickOrderService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: QuickOrderService, deps: [{ token: i1.ActiveCartService }, { token: i1.ProductAdapter }, { token: i1.EventService }, { token: i1.ProductSearchConnector }], target: i0.ɵɵFactoryTarget.Injectable });\nQuickOrderService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: QuickOrderService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: QuickOrderService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1.ActiveCartService }, { type: i1.ProductAdapter }, { type: i1.EventService }, { type: i1.ProductSearchConnector }]; } });\n\nconst facadeProviders = [\n    QuickOrderService,\n    {\n        provide: QuickOrderFacade,\n        useExisting: QuickOrderService,\n    },\n];\n\nclass QuickOrderStatePersistenceService {\n    constructor(quickOrderService, siteContextParamsService, statePersistenceService) {\n        this.quickOrderService = quickOrderService;\n        this.siteContextParamsService = siteContextParamsService;\n        this.statePersistenceService = statePersistenceService;\n        this.subscription = new Subscription();\n        /**\n         * Identifier used for storage key.\n         */\n        this.key = 'quick-order';\n    }\n    /**\n     * Initializes the synchronization between state and browser storage.\n     */\n    initSync() {\n        this.subscription.add(this.statePersistenceService.syncWithStorage({\n            key: this.key,\n            state$: this.quickOrderService.getEntries(),\n            context$: this.siteContextParamsService.getValues([\n                BASE_SITE_CONTEXT_ID,\n            ]),\n            storageType: StorageSyncType.SESSION_STORAGE,\n            onRead: (state) => this.onRead(state),\n        }));\n    }\n    onRead(state) {\n        if (state) {\n            this.quickOrderService.loadEntries(state);\n        }\n    }\n    ngOnDestroy() {\n        this.subscription.unsubscribe();\n    }\n}\nQuickOrderStatePersistenceService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: QuickOrderStatePersistenceService, deps: [{ token: i1$1.QuickOrderFacade }, { token: i1.SiteContextParamsService }, { token: i1.StatePersistenceService }], target: i0.ɵɵFactoryTarget.Injectable });\nQuickOrderStatePersistenceService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: QuickOrderStatePersistenceService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: QuickOrderStatePersistenceService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }], ctorParameters: function () { return [{ type: i1$1.QuickOrderFacade }, { type: i1.SiteContextParamsService }, { type: i1.StatePersistenceService }]; } });\n\nclass QuickOrderCoreModule {\n    static forRoot() {\n        return {\n            ngModule: QuickOrderCoreModule,\n        };\n    }\n}\nQuickOrderCoreModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: QuickOrderCoreModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nQuickOrderCoreModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: QuickOrderCoreModule });\nQuickOrderCoreModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: QuickOrderCoreModule, providers: [...facadeProviders, QuickOrderStatePersistenceService] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: QuickOrderCoreModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [...facadeProviders, QuickOrderStatePersistenceService],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { QuickOrderCoreModule, QuickOrderService, QuickOrderStatePersistenceService };\n//# sourceMappingURL=spartacus-cart-quick-order-core.js.map\n"]},"metadata":{},"sourceType":"module"}